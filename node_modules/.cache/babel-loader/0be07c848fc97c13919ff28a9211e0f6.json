{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport ScheduleCourses from './components/ScheduleCourses';\nimport UploadForm from './components/UploadForm';\nimport SelectDoneCourses from './components/SelectDoneCourses';\nimport axios from 'axios';\nimport Sidebar from \"./Sidebar\";\nimport Navbar from \"./Navbar\";\nimport Home from './components/Home';\nimport SharedSchedulers from './components/SharedSchedulers';\nimport Typography from '@mui/material/Typography';\nimport AppBar from './components/AppBar';\nimport AppSwitch from './components/AppSwitch';\nimport AppStepper from './components/AppStepper';\nimport Rating from './components/Rating';\nimport Container from '@mui/material/Container';\nimport UploadFile from './components/UploadFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst adminMail = 'sadna2021mta@gmail.com'; //default values to degree year and semester\n\nlet year = 1;\nlet semester = 1;\n\nconst scrollToRef = ref => ref.current.scrollIntoView({\n  behavior: 'smooth',\n  block: 'center'\n});\n\nconst Text = \"Text\";\nconst Features = \"Features\";\n\nfunction App() {\n  _s();\n\n  const [classifyingType, setClassifyingType] = useState(Text);\n  const [mandatoryCourses, setMandatoryCourses] = useState(null);\n  const [electiveCourses, setElectiveCourses] = useState(null);\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false);\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([]);\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([]);\n  const [user, setUser] = useState(null);\n  const [users, setUsers] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [showKey, setShowKey] = useState('home');\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n     const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n\n  const checkUserCoursesExists = async uid => {\n    var url = '/checkUserCourses/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database courses exists\n      {\n        console.log('User have courses.');\n        return true;\n      }\n\n    if (res.status === 400) {\n      return false;\n    }\n  };\n\n  const checkUserSchedulerDataExists = async uid => {\n    var url = '/checkUserScheduleData/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database exists\n      {\n        console.log('User have scheduler data.');\n        return true;\n      } else {\n      return false;\n    }\n  };\n\n  const checkSharedSchedulersDataExists = async uid => {\n    var url = '/checkSharedScheduleData/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database exists\n      {\n        console.log('Shared scheduler data to user.');\n        return true;\n      } else {\n      return false;\n    }\n  }; //fetch from user database courses\n\n\n  const fetchUserMandadtoryCourses = async uid => {\n    var url = '/mandatoryCourses/' + uid;\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(\"user mandatory courses: \", data.mandatoryCourses);\n    setMandatoryCourses(data.mandatoryCourses);\n  };\n\n  const fetchUserElectiveCourses = async uid => {\n    var url = '/electiveCourses/' + uid;\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(\"user elective courses: \", data.electiveCourses);\n    setElectiveCourses(data.electiveCourses);\n  };\n\n  const fetchSharedSchedulers = async uid => {\n    var url = '/sharedSchedulersData/' + uid;\n    const schedulersDataRes = await fetch(url);\n    const schedulersData = await schedulersDataRes.json();\n    console.log(\"shared schedulers2: \", Object.values(schedulersData));\n    setSharedSchedulersData(Object.values(schedulersData));\n  }; //fetch from newsletter database courses\n\n\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses';\n    const res = await fetch(url);\n    const data = await res.json(); // init: adding needed fields to each object\n\n    const result = data.mandatoryCourses.map((v, index) => ({ ...v,\n      done: false,\n      id: index,\n      courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result);\n    setMandatoryCourses(result);\n    return result;\n  };\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses';\n    const res = await fetch(url);\n    const data = await res.json(); //adding needed fields to each object\n\n    const result = data.electiveCourses.map((v, index) => ({ ...v,\n      done: false,\n      id: index,\n      courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result);\n    setElectiveCourses(result);\n  };\n\n  const defaultCheckDoneCourses = courses => {\n    courses === null || courses === void 0 ? void 0 : courses.map(course => {\n      if (course.year < year || course.year == year && (course.semesters[0] < semester || course.semesters.length === 2)) {\n        courses[course.id].done = true;\n        console.log(course.title + \" done.\");\n      }\n    });\n  };\n\n  const checkMandatoryCourse = (e, id) => {\n    mandatoryCourses[id].done = !mandatoryCourses[id].done;\n    console.log(mandatoryCourses[id].title + \": \" + mandatoryCourses[id].done);\n  };\n\n  const checkElectiveCourse = (e, id) => {\n    electiveCourses[id].done = !electiveCourses[id].done;\n    console.log(electiveCourses[id].title + \": \" + electiveCourses[id].done);\n  };\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid;\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {\n          mandatoryCourses\n        },\n        electiveCourses: {\n          electiveCourses\n        }\n      }\n    });\n  };\n  /*\n    const handleFileSubmit = async (formYear, formSemester) => {\n      //e.preventDefault()\n      year = formYear\n      semester = formSemester\n      var mandatoryCourses_ = await fetchMCourses()\n      await fetchECourses()\n      defaultCheckDoneCourses(mandatoryCourses_)\n      setShowKey('select')\n    }\n    */\n\n\n  const handleSelectCoursesSubmit = () => {\n    if (user != null) updateUserDatabase();\n    window.scrollTo(0, 0);\n    setShowKey('schedule');\n  };\n\n  const onLogin = async userFromLogin => {\n    const uid = userFromLogin.uid;\n    if (userFromLogin.email === adminMail) setIsAdmin(true);\n    setUser(userFromLogin);\n    const userHaveCourses = await checkUserCoursesExists(uid);\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid);\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid);\n    var KeyIsSet = false;\n\n    if (userHaveSharedSchedulersData_) {\n      setShowKey('share');\n      KeyIsSet = true;\n      await fetchSharedSchedulers(uid);\n    }\n\n    if (userHaveSchedulerData_ && userHaveCourses) {\n      if (!KeyIsSet) setShowKey('schedule');\n      setUserHaveSchedulerData(true);\n      await fetchUserMandadtoryCourses(uid);\n      await fetchUserElectiveCourses(uid);\n    } else if (userHaveCourses) {\n      if (!KeyIsSet) setShowKey('select');\n      await fetchUserMandadtoryCourses(uid);\n      await fetchUserElectiveCourses(uid);\n    } else if (!KeyIsSet) //user doesn't have any data\n      setShowKey('upload');\n  };\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\");\n    setIsAdmin(false);\n    setUser(null);\n    setMandatoryCourses(null); // delete later\n\n    setElectiveCourses(null); // delete later\n\n    setShowKey('home'); // delete later\n  };\n\n  const handleFileSubmit = async () => {\n    console.log(\"Submitted file\");\n  };\n\n  const handleSwitch = SwitchText => {\n    setClassifyingType(SwitchText);\n    console.log(classifyingType);\n  };\n\n  const startRef = useRef(null);\n\n  const executeUploadScroll = () => scrollToRef(startRef);\n  /*\n     .waves {\n    background: url(\"/waves.svg\") no-repeat top center;\n    background-size: cover;\n    height: 24vw;\n  }\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      sx: {\n        width: \"90%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        handleStartClick: executeUploadScroll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"5rem\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" CLSFY \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), \"Our goal is to make machine learning and artificial intelligence classifying algorithms accessible to the general public.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"waves\",\n      role: \"presentation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        backgroundSize: \"cover\"\n      },\n      src: \"img/CLSFYlogo.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: startRef,\n      children: /*#__PURE__*/_jsxDEV(AppStepper, {\n        firstStepComponent: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(AppSwitch, {\n            leftSwitchText: Text,\n            rightSwitchText: Features,\n            onSwitch: handleSwitch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this), \"Upload Excel file according to the classifier chosen to train your model. (features (numbers) : class (numbers/strings)) (text () : class)\", /*#__PURE__*/_jsxDEV(UploadFile, {\n            classifyierType: classifyingType,\n            onSubmit: handleFileSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true),\n        secondStepComponent: /*#__PURE__*/_jsxDEV(Rating, {\n          value: 4.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 1500\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YbPAirix714KYeF+3Is1HJzyHus=\");\n\n_c = App;\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n  direction: 'rtl',\n  textAlign: 'right'\n};\nexport default App;\n/*\n\n    <div style={appStyle} className=\"dashboard d-flex\">\n      \n\t\t<Sidebar \n      activeKey={showKey}\n\t\t\thandleHomeClick={() => setShowKey('home')}\n\t\t\thandleUploadClick={() => setShowKey('upload')}\n\t\t\thandleSelectClick={() => setShowKey('select')}\n  \t\thandleScheduleClick={() => setShowKey('schedule')}\n      handleShareClick={() => setShowKey('share')}\n\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\telectiveCourses={electiveCourses}\n\t\t\tuser={user}\n\t\t\tisAdmin={isAdmin}\n\t\t\thandleLogin={onLogin}\n\t\t\thandleLogout={onLogout}\n\t\t/>\n\t\t<div style={navbarStyle}>\n\t\t\t<Navbar user={user}/>\n      <SharedSchedulers\n\t\t\t\tshow={showKey === 'share'}\n        sharedSchedulersData={sharedSchedulersData}\n        />\n\t\t\t<Home \n\t\t\t\tshow={showKey ===  'home'}\n        publishedSchedulersData={publishedSchedulersData}\n\t\t\t/>\t\n\t\t\t<UploadForm \n\t\t\t\tshow={showKey === 'upload'} \n\t\t\t\tonSubmit={handleFileSubmit}\n\t\t\t/>\n\t\t\t<SelectDoneCourses\n\t\t\t\tshow={showKey === 'select'}\n\t\t\t\tmandatoryCourses={mandatoryCourses} \n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tonMandatoryCourseChecked={checkMandatoryCourse} \n\t\t\t\tonElectiveCourseChecked={checkElectiveCourse} \n\t\t\t\tonSubmit={handleSelectCoursesSubmit}\n\t\t\t/>\n\t\t\t<ScheduleCourses \n\t\t\t\tshow={showKey === 'schedule'}\n        user={user}\n        users={users}\n        userHaveSchedulerData={userHaveSchedulerData}\n\t\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tyear={year} \n\t\t\t\tsemester={semester}\n        />\n\n\t\t</div>\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/CLSFY/src/App.js"],"names":["React","useState","useEffect","useRef","ScheduleCourses","UploadForm","SelectDoneCourses","axios","Sidebar","Navbar","Home","SharedSchedulers","Typography","AppBar","AppSwitch","AppStepper","Rating","Container","UploadFile","adminMail","year","semester","scrollToRef","ref","current","scrollIntoView","behavior","block","Text","Features","App","classifyingType","setClassifyingType","mandatoryCourses","setMandatoryCourses","electiveCourses","setElectiveCourses","userHaveSchedulerData","setUserHaveSchedulerData","publishedSchedulersData","setPublishedSchedulersData","sharedSchedulersData","setSharedSchedulersData","user","setUser","users","setUsers","isAdmin","setIsAdmin","showKey","setShowKey","checkUserCoursesExists","uid","url","res","fetch","status","console","log","checkUserSchedulerDataExists","checkSharedSchedulersDataExists","fetchUserMandadtoryCourses","data","json","fetchUserElectiveCourses","fetchSharedSchedulers","schedulersDataRes","schedulersData","Object","values","fetchMCourses","result","map","v","index","done","id","courseType","fetchECourses","defaultCheckDoneCourses","courses","course","semesters","length","title","checkMandatoryCourse","e","checkElectiveCourse","updateUserDatabase","method","handleSelectCoursesSubmit","window","scrollTo","onLogin","userFromLogin","email","userHaveCourses","userHaveSchedulerData_","userHaveSharedSchedulersData_","KeyIsSet","onLogout","handleFileSubmit","handleSwitch","SwitchText","startRef","executeUploadScroll","width","padding","textAlign","backgroundSize","height","appStyle","backgroundColor","color","direction"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,gBAAP,MAA4B,+BAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,MAAMC,SAAS,GAAG,wBAAlB,C,CACA;;AACA,IAAIC,IAAI,GAAG,CAAX;AACA,IAAIC,QAAQ,GAAG,CAAf;;AAEA,MAAMC,WAAW,GAAIC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAYC,cAAZ,CAA2B;AAAEC,EAAAA,QAAQ,EAAE,QAAZ;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAA3B,CAA7B;;AAEA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,QAAQ,GAAG,UAAjB;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwC/B,QAAQ,CAAC2B,IAAD,CAAtD;AAEA,QAAM,CAACK,gBAAD,EAAmBC,mBAAnB,IAA0CjC,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACkC,eAAD,EAAkBC,kBAAlB,IAAwCnC,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACoC,qBAAD,EAAwBC,wBAAxB,IAAoDrC,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACsC,uBAAD,EAA0BC,0BAA1B,IAAwDvC,QAAQ,CAAC,EAAD,CAAtE;AACA,QAAM,CAACwC,oBAAD,EAAuBC,uBAAvB,IAAkDzC,QAAQ,CAAC,EAAD,CAAhE;AAEA,QAAM,CAAC0C,IAAD,EAAOC,OAAP,IAAkB3C,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAAC4C,KAAD,EAAQC,QAAR,IAAoB7C,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC8C,OAAD,EAAUC,UAAV,IAAwB/C,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAACgD,OAAD,EAAUC,UAAV,IAAwBjD,QAAQ,CAAC,MAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMiD,sBAAsB,GAAG,MAAOC,GAAP,IAAe;AAC5C,QAAIC,GAAG,GAAG,uBAAuBD,GAAjC;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACE,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,eAAO,IAAP;AACD;;AACD,QAAGJ,GAAG,CAACE,MAAJ,KAAe,GAAlB,EACA;AACE,aAAO,KAAP;AACD;AACF,GAZD;;AAcA,QAAMG,4BAA4B,GAAG,MAAOP,GAAP,IAAe;AAClD,QAAIC,GAAG,GAAG,4BAA4BD,GAAtC;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACE,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,eAAO,IAAP;AACD,OAJD,MAMA;AACE,aAAO,KAAP;AACD;AACF,GAZD;;AAcA,QAAME,+BAA+B,GAAG,MAAOR,GAAP,IAAe;AACrD,QAAIC,GAAG,GAAG,8BAA8BD,GAAxC;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACE,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA,eAAO,IAAP;AACD,OAJD,MAMA;AACE,aAAO,KAAP;AACD;AACF,GAZD,CAzDY,CAuEZ;;;AACA,QAAMG,0BAA0B,GAAG,MAAOT,GAAP,IAAe;AAChD,QAAIC,GAAG,GAAG,uBAAuBD,GAAjC;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,UAAMS,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCI,IAAI,CAAC7B,gBAA7C;AACAC,IAAAA,mBAAmB,CAAC4B,IAAI,CAAC7B,gBAAN,CAAnB;AACD,GAND;;AAOA,QAAM+B,wBAAwB,GAAG,MAAOZ,GAAP,IAAe;AAC9C,QAAIC,GAAG,GAAG,sBAAsBD,GAAhC;AACA,UAAME,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,UAAMS,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCI,IAAI,CAAC3B,eAA5C;AACAC,IAAAA,kBAAkB,CAAC0B,IAAI,CAAC3B,eAAN,CAAlB;AACD,GAND;;AAOA,QAAM8B,qBAAqB,GAAG,MAAOb,GAAP,IAAe;AAC3C,QAAIC,GAAG,GAAG,2BAA2BD,GAArC;AACA,UAAMc,iBAAiB,GAAG,MAAMX,KAAK,CAACF,GAAD,CAArC;AACA,UAAMc,cAAc,GAAG,MAAMD,iBAAiB,CAACH,IAAlB,EAA7B;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,MAAM,CAACC,MAAP,CAAcF,cAAd,CAApC;AACAzB,IAAAA,uBAAuB,CAAC0B,MAAM,CAACC,MAAP,CAAcF,cAAd,CAAD,CAAvB;AACD,GAND,CAtFY,CA8FZ;;;AACA,QAAMG,aAAa,GAAG,YAAY;AAChC,UAAMjB,GAAG,GAAG,mBAAZ;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,UAAMS,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB,CAHgC,CAIhC;;AACA,UAAMQ,MAAM,GAAGT,IAAI,CAAC7B,gBAAL,CAAsBuC,GAAtB,CAA0B,CAACC,CAAD,EAAIC,KAAJ,MAAe,EAAC,GAAGD,CAAJ;AACpDE,MAAAA,IAAI,EAAE,KAD8C;AAEpDC,MAAAA,EAAE,EAAEF,KAFgD;AAGtDG,MAAAA,UAAU,EAAE;AAH0C,KAAf,CAA1B,CAAf;AAKApB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCa,MAAnC;AACArC,IAAAA,mBAAmB,CAACqC,MAAD,CAAnB;AACA,WAAOA,MAAP;AACD,GAbD;;AAeA,QAAMO,aAAa,GAAG,YAAY;AAChC,QAAIzB,GAAG,GAAG,kBAAV;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;AACA,UAAMS,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB,CAHgC,CAIhC;;AACA,UAAMQ,MAAM,GAAGT,IAAI,CAAC3B,eAAL,CAAqBqC,GAArB,CAAyB,CAACC,CAAD,EAAIC,KAAJ,MAAe,EAAC,GAAGD,CAAJ;AACnDE,MAAAA,IAAI,EAAE,KAD6C;AAEnDC,MAAAA,EAAE,EAAEF,KAF+C;AAGrDG,MAAAA,UAAU,EAAE;AAHyC,KAAf,CAAzB,CAAf;AAKApB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,MAAlC;AACAnC,IAAAA,kBAAkB,CAACmC,MAAD,CAAlB;AACD,GAZD;;AAcA,QAAMQ,uBAAuB,GAAIC,OAAD,IAAa;AAC3CA,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAER,GAAT,CAAaS,MAAM,IAAI;AACrB,UAAGA,MAAM,CAAC7D,IAAP,GAAcA,IAAd,IAAuB6D,MAAM,CAAC7D,IAAP,IAAeA,IAAf,KAAwB6D,MAAM,CAACC,SAAP,CAAiB,CAAjB,IAAsB7D,QAAtB,IAAkC4D,MAAM,CAACC,SAAP,CAAiBC,MAAjB,KAA4B,CAAtF,CAA1B,EAAqH;AACnHH,QAAAA,OAAO,CAACC,MAAM,CAACL,EAAR,CAAP,CAAmBD,IAAnB,GAA0B,IAA1B;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAYuB,MAAM,CAACG,KAAP,GAAe,QAA3B;AACD;AACF,KALD;AAMD,GAPD;;AASA,QAAMC,oBAAoB,GAAG,CAACC,CAAD,EAAIV,EAAJ,KAAW;AACtC3C,IAAAA,gBAAgB,CAAC2C,EAAD,CAAhB,CAAqBD,IAArB,GAA4B,CAAC1C,gBAAgB,CAAC2C,EAAD,CAAhB,CAAqBD,IAAlD;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYzB,gBAAgB,CAAC2C,EAAD,CAAhB,CAAqBQ,KAArB,GAA6B,IAA7B,GAAoCnD,gBAAgB,CAAC2C,EAAD,CAAhB,CAAqBD,IAArE;AACD,GAHD;;AAIA,QAAMY,mBAAmB,GAAG,CAACD,CAAD,EAAIV,EAAJ,KAAW;AACrCzC,IAAAA,eAAe,CAACyC,EAAD,CAAf,CAAoBD,IAApB,GAA2B,CAACxC,eAAe,CAACyC,EAAD,CAAf,CAAoBD,IAAhD;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,eAAe,CAACyC,EAAD,CAAf,CAAoBQ,KAApB,GAA4B,IAA5B,GAAmCjD,eAAe,CAACyC,EAAD,CAAf,CAAoBD,IAAnE;AACD,GAHD;;AAKA,QAAMa,kBAAkB,GAAG,YAAY;AACrC,UAAMnC,GAAG,GAAG,yBAAyBV,IAAI,CAACS,GAA1C;AACA7C,IAAAA,KAAK,CAAC;AACJkF,MAAAA,MAAM,EAAE,MADJ;AAEJpC,MAAAA,GAAG,EAAEA,GAFD;AAGJS,MAAAA,IAAI,EAAE;AACJ7B,QAAAA,gBAAgB,EAAE;AAACA,UAAAA;AAAD,SADd;AAEJE,QAAAA,eAAe,EAAE;AAACA,UAAAA;AAAD;AAFb;AAHF,KAAD,CAAL;AAQD,GAVD;AAWF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,QAAMuD,yBAAyB,GAAG,MAAM;AACtC,QAAG/C,IAAI,IAAI,IAAX,EACE6C,kBAAkB;AACpBG,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA1C,IAAAA,UAAU,CAAC,UAAD,CAAV;AACD,GALD;;AAOA,QAAM2C,OAAO,GAAG,MAAOC,aAAP,IAAyB;AACvC,UAAM1C,GAAG,GAAG0C,aAAa,CAAC1C,GAA1B;AACA,QAAG0C,aAAa,CAACC,KAAd,KAAwB5E,SAA3B,EACE6B,UAAU,CAAC,IAAD,CAAV;AACFJ,IAAAA,OAAO,CAACkD,aAAD,CAAP;AACA,UAAME,eAAe,GAAG,MAAM7C,sBAAsB,CAACC,GAAD,CAApD;AACA,UAAM6C,sBAAsB,GAAG,MAAMtC,4BAA4B,CAACP,GAAD,CAAjE;AACA,UAAM8C,6BAA6B,GAAG,MAAMtC,+BAA+B,CAACR,GAAD,CAA3E;AACA,QAAI+C,QAAQ,GAAG,KAAf;;AAEA,QAAGD,6BAAH,EACA;AACEhD,MAAAA,UAAU,CAAC,OAAD,CAAV;AACAiD,MAAAA,QAAQ,GAAG,IAAX;AACA,YAAMlC,qBAAqB,CAACb,GAAD,CAA3B;AACD;;AAED,QAAG6C,sBAAsB,IAAID,eAA7B,EACA;AACE,UAAG,CAACG,QAAJ,EACEjD,UAAU,CAAC,UAAD,CAAV;AACFZ,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACA,YAAMuB,0BAA0B,CAACT,GAAD,CAAhC;AACA,YAAMY,wBAAwB,CAACZ,GAAD,CAA9B;AACD,KAPD,MAQK,IAAG4C,eAAH,EACL;AACE,UAAG,CAACG,QAAJ,EACAjD,UAAU,CAAC,QAAD,CAAV;AACA,YAAMW,0BAA0B,CAACT,GAAD,CAAhC;AACA,YAAMY,wBAAwB,CAACZ,GAAD,CAA9B;AACD,KANI,MAOA,IAAG,CAAC+C,QAAJ,EAAc;AACjBjD,MAAAA,UAAU,CAAC,QAAD,CAAV;AACH,GAlCD;;AAoCA,QAAMkD,QAAQ,GAAG,MAAM;AACrB3C,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACDV,IAAAA,UAAU,CAAC,KAAD,CAAV;AACCJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AAEAV,IAAAA,mBAAmB,CAAC,IAAD,CAAnB,CALqB,CAKI;;AACzBE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CANqB,CAMG;;AACxBc,IAAAA,UAAU,CAAC,MAAD,CAAV,CAPqB,CAOF;AACpB,GARD;;AAUA,QAAMmD,gBAAgB,GAAG,YAAY;AACnC5C,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GAFD;;AAIA,QAAM4C,YAAY,GAAIC,UAAD,IAAgB;AACnCvE,IAAAA,kBAAkB,CAACuE,UAAD,CAAlB;AACA9C,IAAAA,OAAO,CAACC,GAAR,CAAY3B,eAAZ;AACD,GAHD;;AAKA,QAAMyE,QAAQ,GAAGrG,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAMsG,mBAAmB,GAAG,MAAMnF,WAAW,CAACkF,QAAD,CAA7C;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAIE,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAE;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,gBAAgB,EAAED;AADpB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA,cAJF,eAIO;AAAA;AAAA;AAAA;AAAA,cAJP,eAIY;AAAA;AAAA;AAAA;AAAA,cAJZ,eAIiB;AAAA;AAAA;AAAA;AAAA,cAJjB,eAIsB;AAAA;AAAA;AAAA;AAAA,cAJtB,eAME;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAE,MAAV;AAAkBC,UAAAA,SAAS,EAAE;AAA7B,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcI;AAAK,MAAA,KAAK,EAAC,OAAX;AAAmB,MAAA,IAAI,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,YAdJ,eAgBI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,cAAc,EAAE;AAAjB,OAAZ;AAAuC,MAAA,GAAG,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAkBI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAoBI;AAAK,MAAA,GAAG,EAAEN,QAAV;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,kBAAkB,eAEhB;AAAA,kCACE,QAAC,SAAD;AACE,YAAA,cAAc,EAAE5E,IADlB;AAEE,YAAA,eAAe,EAAEC,QAFnB;AAGE,YAAA,QAAQ,EAAEyE;AAHZ;AAAA;AAAA;AAAA;AAAA,kBADF,6JAWE,QAAC,UAAD;AACE,YAAA,eAAe,EAAEvE,eADnB;AAEE,YAAA,QAAQ,EAAEsE;AAFZ;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA,wBAHJ;AAoBE,QAAA,mBAAmB,eAEjB,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA;AAtBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApBJ,eAgDI;AAAK,MAAA,KAAK,EAAE;AAAES,QAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,YAhDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAnSQhF,G;;KAAAA,G;AAqST,MAAMiF,QAAQ,GAAG;AACfC,EAAAA,eAAe,EAAE,MADF;AAEfC,EAAAA,KAAK,EAAE,OAFQ;AAGhBC,EAAAA,SAAS,EAAE,KAHK;AAIhBN,EAAAA,SAAS,EAAE;AAJK,CAAjB;AAOA,eAAe9E,GAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react'\nimport ScheduleCourses from './components/ScheduleCourses'\nimport UploadForm from './components/UploadForm'\nimport SelectDoneCourses from './components/SelectDoneCourses'\nimport axios from 'axios';\nimport Sidebar from \"./Sidebar\";\nimport Navbar from \"./Navbar\";\nimport Home from './components/Home'\nimport SharedSchedulers from'./components/SharedSchedulers'\nimport Typography from '@mui/material/Typography';\nimport AppBar from'./components/AppBar'\nimport AppSwitch from'./components/AppSwitch'\nimport AppStepper from'./components/AppStepper'\nimport Rating from'./components/Rating'\nimport Container from '@mui/material/Container';\nimport UploadFile from './components/UploadFile'\n\nconst adminMail = 'sadna2021mta@gmail.com'\n//default values to degree year and semester\nlet year = 1\nlet semester = 1\n\nconst scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\nconst Text = \"Text\"\nconst Features = \"Features\"\n\nfunction App(){\n  const [classifyingType, setClassifyingType] = useState(Text)\n\n  const [mandatoryCourses, setMandatoryCourses] = useState(null)\n  const [electiveCourses, setElectiveCourses] = useState(null)\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false)\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([])\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([])\n\n  const [user, setUser] = useState(null)\n  const [users, setUsers] = useState(null)\n  const [isAdmin, setIsAdmin] = useState(false)\n\n  const [showKey, setShowKey] = useState('home')\n\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n\n    const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n\n  const checkUserCoursesExists = async (uid) => {\n    var url = '/checkUserCourses/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database courses exists\n    {\n      console.log('User have courses.')\n      return true\n    }\n    if(res.status === 400)\n    {\n      return false\n    }\n  }\n\n  const checkUserSchedulerDataExists = async (uid) => {\n    var url = '/checkUserScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('User have scheduler data.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  const checkSharedSchedulersDataExists = async (uid) => {\n    var url = '/checkSharedScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('Shared scheduler data to user.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  //fetch from user database courses\n  const fetchUserMandadtoryCourses = async (uid) => {\n    var url = '/mandatoryCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user mandatory courses: \", data.mandatoryCourses)\n    setMandatoryCourses(data.mandatoryCourses)\n  }\n  const fetchUserElectiveCourses = async (uid) => {\n    var url = '/electiveCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user elective courses: \", data.electiveCourses)\n    setElectiveCourses(data.electiveCourses)\n  }\n  const fetchSharedSchedulers = async (uid) => {\n    var url = '/sharedSchedulersData/' + uid \n    const schedulersDataRes = await fetch(url)\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"shared schedulers2: \", Object.values(schedulersData))\n    setSharedSchedulersData(Object.values(schedulersData))\n  }\n\n  //fetch from newsletter database courses\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    // init: adding needed fields to each object\n    const result = data.mandatoryCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result)\n    setMandatoryCourses(result)\n    return result\n  }\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    //adding needed fields to each object\n    const result = data.electiveCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result)\n    setElectiveCourses(result)\n  }\n\n  const defaultCheckDoneCourses = (courses) => {\n    courses?.map(course => {\n      if(course.year < year || (course.year == year && (course.semesters[0] < semester || course.semesters.length === 2))) {\n        courses[course.id].done = true\n        console.log(course.title + \" done.\")\n      }\n    })\n  }\n\n  const checkMandatoryCourse = (e, id) => {\n    mandatoryCourses[id].done = !mandatoryCourses[id].done\n    console.log(mandatoryCourses[id].title + \": \" + mandatoryCourses[id].done)\n  }\n  const checkElectiveCourse = (e, id) => {\n    electiveCourses[id].done = !electiveCourses[id].done\n    console.log(electiveCourses[id].title + \": \" + electiveCourses[id].done)\n  }\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {mandatoryCourses},\n        electiveCourses: {electiveCourses}\n      }\n    });\n  }\n/*\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear\n    semester = formSemester\n    var mandatoryCourses_ = await fetchMCourses()\n    await fetchECourses()\n    defaultCheckDoneCourses(mandatoryCourses_)\n    setShowKey('select')\n  }\n  */\n\n  const handleSelectCoursesSubmit = () => {\n    if(user != null)\n      updateUserDatabase()\n    window.scrollTo(0, 0)\n    setShowKey('schedule')\n  }\n\n  const onLogin = async (userFromLogin) => {\n    const uid = userFromLogin.uid\n    if(userFromLogin.email === adminMail)\n      setIsAdmin(true)\n    setUser(userFromLogin)\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    var KeyIsSet = false;\n\n    if(userHaveSharedSchedulersData_)\n    {\n      setShowKey('share')\n      KeyIsSet = true\n      await fetchSharedSchedulers(uid)\n    }\n\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      if(!KeyIsSet)\n        setShowKey('schedule')\n      setUserHaveSchedulerData(true)\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      if(!KeyIsSet)\n      setShowKey('select')\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(!KeyIsSet) //user doesn't have any data\n      setShowKey('upload')\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n\t  setIsAdmin(false)\n    setUser(null)\n\n    setMandatoryCourses(null)// delete later\n    setElectiveCourses(null)// delete later\n    setShowKey('home') // delete later\n  }\n\n  const handleFileSubmit = async () => {\n    console.log(\"Submitted file\")\n  }\n\n  const handleSwitch = (SwitchText) => {\n    setClassifyingType(SwitchText)\n    console.log(classifyingType)\n  }\n\n  const startRef = useRef(null)\n  const executeUploadScroll = () => scrollToRef(startRef)\n  /*\n\n    .waves {\n    background: url(\"/waves.svg\") no-repeat top center;\n    background-size: cover;\n    height: 24vw;\n  }\n\n  */\n\n  return ( \n    <div>\n      <Container sx={{width: \"90%\"}}>\n        <AppBar\n          handleStartClick={executeUploadScroll}\n        />\n        <br/><br/><br/><br/><br/>\n\n        <div style={{padding: \"5rem\", textAlign: \"center\"}}>\n          <h3> CLSFY </h3>\n          Our goal is to make machine learning and artificial intelligence classifying algorithms accessible to the general public.\n        </div>\n\n        </Container>\n\n        <div class=\"waves\" role=\"presentation\"></div>\n\n        <img style={{backgroundSize: \"cover\"}} src=\"img/CLSFYlogo.png\"/>\n\n        <div style={{ height: 300 }} />\n\n        <div ref={startRef}>\n          <AppStepper\n            firstStepComponent=\n            {\n              <>\n                <AppSwitch \n                  leftSwitchText={Text}\n                  rightSwitchText={Features}\n                  onSwitch={handleSwitch}\n                />\n\n                Upload Excel file according to the classifier chosen to train your model.\n                (features (numbers) : class (numbers/strings))\n                (text () : class)\n\n                <UploadFile \n                  classifyierType={classifyingType}\n                  onSubmit={handleFileSubmit}\n                />\n              </>\n            }\n            secondStepComponent=\n            {\n              <Rating value={4.5}/>\n            }\n          />\n        </div>\n\n        <div style={{ height: 1500 }} />\n    </div>\n  );\n}\n\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n\tdirection: 'rtl',\n\ttextAlign: 'right',\n  }\n\nexport default App;\n\n\n/*\n\n    <div style={appStyle} className=\"dashboard d-flex\">\n      \n\t\t<Sidebar \n      activeKey={showKey}\n\t\t\thandleHomeClick={() => setShowKey('home')}\n\t\t\thandleUploadClick={() => setShowKey('upload')}\n\t\t\thandleSelectClick={() => setShowKey('select')}\n  \t\thandleScheduleClick={() => setShowKey('schedule')}\n      handleShareClick={() => setShowKey('share')}\n\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\telectiveCourses={electiveCourses}\n\t\t\tuser={user}\n\t\t\tisAdmin={isAdmin}\n\t\t\thandleLogin={onLogin}\n\t\t\thandleLogout={onLogout}\n\t\t/>\n\t\t<div style={navbarStyle}>\n\t\t\t<Navbar user={user}/>\n      <SharedSchedulers\n\t\t\t\tshow={showKey === 'share'}\n        sharedSchedulersData={sharedSchedulersData}\n        />\n\t\t\t<Home \n\t\t\t\tshow={showKey ===  'home'}\n        publishedSchedulersData={publishedSchedulersData}\n\t\t\t/>\t\n\t\t\t<UploadForm \n\t\t\t\tshow={showKey === 'upload'} \n\t\t\t\tonSubmit={handleFileSubmit}\n\t\t\t/>\n\t\t\t<SelectDoneCourses\n\t\t\t\tshow={showKey === 'select'}\n\t\t\t\tmandatoryCourses={mandatoryCourses} \n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tonMandatoryCourseChecked={checkMandatoryCourse} \n\t\t\t\tonElectiveCourseChecked={checkElectiveCourse} \n\t\t\t\tonSubmit={handleSelectCoursesSubmit}\n\t\t\t/>\n\t\t\t<ScheduleCourses \n\t\t\t\tshow={showKey === 'schedule'}\n        user={user}\n        users={users}\n        userHaveSchedulerData={userHaveSchedulerData}\n\t\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tyear={year} \n\t\t\t\tsemester={semester}\n        />\n\n\t\t</div>\n\n*/"]},"metadata":{},"sourceType":"module"}