{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleDataToPredict.js\";\nimport React from 'react';\nimport HandleTextDataToPredict from './HandleTextDataToPredict';\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict';\nimport UploadFile from '../file_handling/UploadFile';\nimport Container from '@mui/material/Container';\nimport ExampleButton from '../show_example/ExampleButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleDataToPredict = ({\n  classifyingType,\n  features,\n  onPredictFormSubmit,\n  onPredictFileSubmit\n}) => {\n  /*\r\n  const handleTextFormSubmit = async (data) => {\r\n      console.log(\"Text Form Submit\")\r\n      console.log(data) //Class is here\r\n  }\r\n    const handleFeaturesFormSubmit = async (data) => {\r\n      console.log(\"Features Form Submit\")\r\n      console.log(data) //Class is here\r\n  }\r\n    const handleFileSubmit = async (data) => {\r\n      console.log(\"File Submit\")\r\n      console.log(data) //Class is here\r\n  }\r\n  */\n  return (\n    /*#__PURE__*/\n    //<div style={{color: themeColor, fontSize: '1.3rem'}}>\n    _jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        width: \"90%\",\n        fontSize: \"1rem\"\n      },\n      children: [classifyingType === \"Text\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You Can Enter Text To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(HandleTextDataToPredict, {\n          onSubmit: onPredictFormSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), \"Text (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n          tableTitle: \"File upload example for text classification\",\n          tableFeatures: [\"Text\"],\n          tableItems: [[\"text1\"]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You Can Enter Features To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(HandleFeaturesDataToPredict, {\n          features: features,\n          onSubmit: onPredictFormSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), \"Features (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n          tableTitle: \"File upload example for features classification\",\n          tableFeatures: [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"...\"],\n          tableItems: [[\"0\", \"1\", \"0\", \"...\"]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n        onSubmit: onPredictFileSubmit,\n        url: classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1',\n        successMessage: \"Model trained successfully\",\n        awaitMessage: \"File uploaded, Training model...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c = HandleDataToPredict;\nexport default HandleDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleDataToPredict.js"],"names":["React","HandleTextDataToPredict","HandleFeaturesDataToPredict","UploadFile","Container","ExampleButton","HandleDataToPredict","classifyingType","features","onPredictFormSubmit","onPredictFileSubmit","width","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;;;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,mBAA5B;AAAiDC,EAAAA;AAAjD,CAAD,KAA2E;AAEnG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAII;AAAA;AACQ;AACJ,YAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAyB,MAAA,EAAE,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,QAAQ,EAAE;AAAzB,OAA7B;AAAA,iBAEKL,eAAe,KAAK,MAApB,gBACG;AAAA,2EAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,uBAAD;AAAyB,UAAA,QAAQ,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAKI;AAAA;AAAA;AAAA;AAAA,gBALJ,wEAOI;AAAA;AAAA;AAAA;AAAA,gBAPJ,iCASI;AAAA;AAAA;AAAA;AAAA,gBATJ,eASS;AAAA;AAAA;AAAA;AAAA,gBATT,eAWI,QAAC,aAAD;AACI,UAAA,UAAU,EAAE,6CADhB;AAEI,UAAA,aAAa,EAAE,CAAC,MAAD,CAFnB;AAGI,UAAA,UAAU,EAAE,CAAC,CAAC,OAAD,CAAD;AAHhB;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA,sBADH,gBAoBG;AAAA,+EAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,2BAAD;AACI,UAAA,QAAQ,EAAED,QADd;AAEI,UAAA,QAAQ,EAAEC;AAFd;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAOI;AAAA;AAAA;AAAA;AAAA,gBAPJ,wEASI;AAAA;AAAA;AAAA;AAAA,gBATJ,qCAWI;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAWS;AAAA;AAAA;AAAA;AAAA,gBAXT,eAYI,QAAC,aAAD;AACI,UAAA,UAAU,EAAE,iDADhB;AAEI,UAAA,aAAa,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAyC,KAAzC,CAFnB;AAGI,UAAA,UAAU,EAAE,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,KAAhB,CAAD;AAHhB;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA,sBAtBR,eA0CI;AAAA;AAAA;AAAA;AAAA,cA1CJ,eA2CI;AAAA;AAAA;AAAA;AAAA,cA3CJ,eA4CI,QAAC,UAAD;AACI,QAAA,QAAQ,EAAEC,mBADd;AAEI,QAAA,GAAG,EAAEH,eAAe,KAAK,MAApB,GAA6B,oBAA7B,GAAoD,uBAF7D;AAGI,QAAA,cAAc,EAAE,4BAHpB;AAII,QAAA,YAAY,EAAE;AAJlB;AAAA;AAAA;AAAA;AAAA,cA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAsDH,CAzED;;KAAMD,mB;AA2EN,eAAeA,mBAAf","sourcesContent":["import React from 'react'\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport ExampleButton from '../show_example/ExampleButton'\r\n\r\nconst HandleDataToPredict = ({classifyingType, features, onPredictFormSubmit, onPredictFileSubmit}) => {\r\n    \r\n    /*\r\n    const handleTextFormSubmit = async (data) => {\r\n        console.log(\"Text Form Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n\r\n    const handleFeaturesFormSubmit = async (data) => {\r\n        console.log(\"Features Form Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n    */\r\n\r\n    return (\r\n            //<div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n        <Container maxWidth='md' sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={onPredictFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text1\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        features={features} \r\n                        onSubmit={onPredictFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={onPredictFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n"]},"metadata":{},"sourceType":"module"}