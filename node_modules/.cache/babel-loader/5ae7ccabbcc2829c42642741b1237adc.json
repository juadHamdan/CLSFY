{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\file_handling\\\\HandleFile.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport AppSwitch from './AppSwitch';\nimport UploadFile from './UploadFile';\nimport AppTableModal from './AppTableModal';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Text = \"Text\";\nconst Features = \"Features\";\nconst firstColor = \"#ffcc80\";\nconst secondColor = \"#80cbc4\";\n\nconst HandleFile = ({\n  handleFileSubmit\n}) => {\n  _s();\n\n  const [themeColor, setThemeColor] = useState(firstColor);\n  const [classifyingType, setClassifyingType] = useState(Text);\n  const [showTextModalTable, setShowTextModalTable] = React.useState(false);\n\n  const handleSwitch = SwitchText => {\n    setClassifyingType(SwitchText);\n    if (themeColor === firstColor) setThemeColor(secondColor);else setThemeColor(firstColor);\n    console.log(SwitchText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidthXs: true,\n    sx: {\n      width: \"90%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontFamily: \"Calibri light\",\n        fontSize: \"1.5rem\",\n        color: \"#bdbdbd\",\n        paddingLeft: \"0.5rem\",\n        textDecoration: \"underline\"\n      },\n      children: \"Choose Classifyier Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AppSwitch, {\n      leftSwitchText: Text,\n      rightSwitchText: Features,\n      onSwitch: handleSwitch,\n      firstColor: firstColor,\n      secondColor: secondColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: themeColor\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), classifyingType === Features ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"Upload Excel file in the following format: (features (numbers) : class (numbers/strings))\"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Upload Excel file in the following format: (text () : class)\", /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowTextModalTable(true),\n          children: \"Show Exapmle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AppTableModal, {\n          show: showTextModalTable,\n          onHide: () => setShowTextModalTable(false),\n          title: \"File upload example for text classification\",\n          features: [\"Text\", \"Class\"],\n          items: [[\"text1\", \"class1\"]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n        classifyingType: classifyingType,\n        onSubmit: handleFileSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HandleFile, \"wgGbf7ubWNRtwQCA7lqLxzqhjMo=\");\n\n_c = HandleFile;\nexport default HandleFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFile\");","map":{"version":3,"sources":["D:/CLSFY/src/components/file_handling/HandleFile.js"],"names":["React","useState","AppSwitch","UploadFile","AppTableModal","Container","Button","Text","Features","firstColor","secondColor","HandleFile","handleFileSubmit","themeColor","setThemeColor","classifyingType","setClassifyingType","showTextModalTable","setShowTextModalTable","handleSwitch","SwitchText","console","log","width","fontFamily","fontSize","color","paddingLeft","textDecoration"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport AppSwitch from'./AppSwitch'\r\nimport UploadFile from './UploadFile'\r\nimport AppTableModal from './AppTableModal'\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst Text = \"Text\"\r\nconst Features = \"Features\"\r\n\r\nconst firstColor = \"#ffcc80\"\r\nconst secondColor = \"#80cbc4\"\r\n\r\nconst HandleFile = ({handleFileSubmit}) => {\r\n    const [themeColor, setThemeColor] = useState(firstColor)  \r\n    const [classifyingType, setClassifyingType] = useState(Text)\r\n    const [showTextModalTable, setShowTextModalTable] = React.useState(false)\r\n    \r\n    const handleSwitch = (SwitchText) => {\r\n        setClassifyingType(SwitchText)\r\n        if(themeColor === firstColor)\r\n          setThemeColor(secondColor)\r\n        else\r\n          setThemeColor(firstColor)\r\n        console.log(SwitchText)\r\n      }\r\n\r\n    return (\r\n        <Container maxWidthXs sx={{width: \"90%\"}}>\r\n            <p style={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\", paddingLeft: \"0.5rem\", textDecoration: \"underline\"}}>\r\n                Choose Classifyier Type\r\n            </p>\r\n            <AppSwitch \r\n                leftSwitchText={Text}\r\n                rightSwitchText={Features}\r\n                onSwitch={handleSwitch}\r\n                firstColor={firstColor}\r\n                secondColor={secondColor}\r\n            />\r\n            \r\n            <div style={{color: themeColor}}>\r\n                <hr/>\r\n                {classifyingType === Features?\r\n                <>\r\n                Upload Excel file in the following format:\r\n                (features (numbers) : class (numbers/strings))\r\n                </>\r\n                :\r\n                <>\r\n                Upload Excel file in the following format:\r\n                (text () : class)\r\n\r\n                <Button onClick={() => setShowTextModalTable(true)}>Show Exapmle</Button>\r\n\r\n                <AppTableModal \r\n                    show={showTextModalTable}\r\n                    onHide={() => setShowTextModalTable(false)} \r\n                    title={\"File upload example for text classification\"}\r\n                    features={[\"Text\", \"Class\"]} \r\n                    items={[[\"text1\", \"class1\"]]}\r\n                />\r\n                </>\r\n                }   \r\n                <hr/>\r\n                <UploadFile \r\n                classifyingType={classifyingType}\r\n                onSubmit={handleFileSubmit}\r\n                />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HandleFile\r\n"]},"metadata":{},"sourceType":"module"}