{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFYclone\\\\CLSFY\\\\src\\\\components\\\\ModelCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport CloseButton from 'react-bootstrap/CloseButton';\nimport ExampleButton from './show_example/ExampleButton';\nimport MyRating from './scores_and_stats/Rating';\nimport { TextClassificationColor, FeaturesClassificationColor } from '../constants/Global';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModelCard = ({\n  modelData,\n  onClick,\n  handleDelete\n}) => {\n  _s();\n\n  const [CreationString, setCreationString] = useState(\"\");\n  const fileName = modelData['file_name'];\n  const dateTime = modelData['date_time'];\n  const featuresLabels = modelData['report']['features_labels'];\n  const classificationType = modelData['report']['classification_type'];\n  const accuracy = modelData['report']['accuracy'];\n  useEffect(() => {\n    //get string of days from creation\n    let dateTimeCreated = new Date(dateTime);\n    let dateTimeCurrent = new Date(); // One day in milliseconds\n\n    const oneDay = 1000 * 60 * 60 * 24; // Calculating the time difference between two dates\n\n    const diffInTime = dateTimeCurrent.getTime() - dateTimeCreated.getTime(); // Calculating the no. of days between two dates\n\n    const diffInDays = Math.round(diffInTime / oneDay);\n    if (diffInDays === 0) setCreationString(\"Created Today\");else if (diffInDays === 1) setCreationString(\"Created Yesterday\");else setCreationString(`Created ${diffInDays} Days Ago`);\n  }, [dateTime]); // get CreationString when datetime changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: \"black\",\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: '20rem'\n      },\n      style: classificationType === 'Text' ? TextClassificationBorderColor : FeaturesClassificationBorderColor,\n      children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            paddingLeft: '4rem',\n            paddingRight: '4rem'\n          },\n          onClick: onClick,\n          variant: \"light\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: fileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), \"Classification Type: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: classificationType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 46\n          }, this), \",\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), \"Accuracy:\", /*#__PURE__*/_jsxDEV(MyRating, {\n            value: accuracy * 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n            className: \"mb-2 text-muted\",\n            children: dateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), featuresLabels ? /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: /*#__PURE__*/_jsxDEV(ExampleButton, {\n            buttonText: \"Show Attributes Of Model\",\n            tableTitle: \"Attributes:\",\n            tableFeatures: featuresLabels,\n            tableItems: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        className: \"text-muted\",\n        children: CreationString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModelCard, \"4APQNVFVlGexm1xVyvd2gs0iOMk=\");\n\n_c = ModelCard;\nconst TextClassificationBorderColor = {\n  borderColor: TextClassificationColor\n};\nconst FeaturesClassificationBorderColor = {\n  borderColor: FeaturesClassificationColor\n};\nexport default ModelCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModelCard\");","map":{"version":3,"sources":["D:/CLSFYclone/CLSFY/src/components/ModelCard.js"],"names":["React","useState","useEffect","Card","Button","CloseButton","ExampleButton","MyRating","TextClassificationColor","FeaturesClassificationColor","ModelCard","modelData","onClick","handleDelete","CreationString","setCreationString","fileName","dateTime","featuresLabels","classificationType","accuracy","dateTimeCreated","Date","dateTimeCurrent","oneDay","diffInTime","getTime","diffInDays","Math","round","color","textAlign","width","TextClassificationBorderColor","FeaturesClassificationBorderColor","paddingLeft","paddingRight","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\nimport ExampleButton from './show_example/ExampleButton'\r\nimport MyRating from './scores_and_stats/Rating'\r\nimport { TextClassificationColor, FeaturesClassificationColor } from '../constants/Global'\r\n\r\n\r\nconst ModelCard = ({modelData, onClick, handleDelete}) => {\r\n    const [CreationString, setCreationString] = useState(\"\")\r\n\r\n    const fileName = modelData['file_name']\r\n    const dateTime = modelData['date_time']\r\n    const featuresLabels = modelData['report']['features_labels']\r\n    const classificationType = modelData['report']['classification_type']\r\n    const accuracy = modelData['report']['accuracy']\r\n\r\n    useEffect(() => {\r\n        //get string of days from creation\r\n        let dateTimeCreated = new Date(dateTime)\r\n        let dateTimeCurrent = new Date()\r\n        // One day in milliseconds\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n        // Calculating the time difference between two dates\r\n        const diffInTime = dateTimeCurrent.getTime() - dateTimeCreated.getTime();\r\n        // Calculating the no. of days between two dates\r\n        const diffInDays = Math.round(diffInTime / oneDay);\r\n\r\n        if(diffInDays === 0)\r\n            setCreationString(\"Created Today\")\r\n        else if(diffInDays === 1)\r\n            setCreationString(\"Created Yesterday\")\r\n        else\r\n            setCreationString(`Created ${diffInDays} Days Ago`)\r\n      }, [dateTime]); // get CreationString when datetime changes\r\n\r\n\r\n    return (\r\n        <div style={{color: \"black\", textAlign: 'center'}}>\r\n                <Card \r\n                    style={{width: '20rem'}} \r\n                    style={classificationType === 'Text'? TextClassificationBorderColor : FeaturesClassificationBorderColor}>\r\n                <Card.Body >\r\n                    <CloseButton onClick={handleDelete}/>\r\n                    <Button \r\n                        style={{paddingLeft: '4rem', paddingRight: '4rem'}}\r\n                        onClick={onClick}\r\n                        variant=\"light\"\r\n                    >\r\n                        <Card.Title>{fileName}</Card.Title>\r\n                        Classification Type: <strong>{classificationType}</strong>,\r\n                        <br/>Accuracy:\r\n                        <MyRating value={accuracy * 5} />\r\n                        <hr/>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{dateTime}</Card.Subtitle>\r\n                    </Button>\r\n                    <hr/>\r\n                    {featuresLabels?\r\n                        <Card.Text>\r\n                            <ExampleButton\r\n                                buttonText={\"Show Attributes Of Model\"}\r\n                                tableTitle={\"Attributes:\"}\r\n                                tableFeatures={featuresLabels}\r\n                                tableItems={[]}\r\n                            />\r\n                        </Card.Text>\r\n                    : null}\r\n                </Card.Body>\r\n                <Card.Footer className=\"text-muted\">\r\n                    {CreationString}\r\n                </Card.Footer>\r\n                </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst TextClassificationBorderColor = {\r\n    borderColor: TextClassificationColor\r\n}\r\n\r\nconst FeaturesClassificationBorderColor = {\r\n    borderColor: FeaturesClassificationColor\r\n}\r\n\r\nexport default ModelCard\r\n"]},"metadata":{},"sourceType":"module"}