{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleFeaturesDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport FormControl from '@mui/material/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleFeaturesDataToPredict = ({\n  features,\n  onSubmit\n}) => {\n  _s();\n\n  //{Feature 1 text : value, ...}\n  const [featuersValuesDict] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleSubmit = () => {\n    console.log(features.length);\n    console.log(Object.keys(featuersValuesDict).length);\n\n    if (features.length < Object.keys(featuersValuesDict).length) {\n      console.log(\"Error\");\n      return;\n    }\n    /*\r\n      if(textValue === null || textValue === \"\")\r\n    {\r\n        setError(true)\r\n        //setErrorMessage(\" Feature\")\r\n        return\r\n    }\r\n    setTextValueError(false)\r\n      */\n\n\n    onSubmit(featuersValuesDict);\n  };\n\n  const handleFeatureFieldChange = e => {\n    let featureTextChanged = e.target.labels[0].childNodes[0].data; //update the value of current feature \n\n    featuersValuesDict[featureTextChanged] = e.target.value;\n  };\n\n  return (\n    /*#__PURE__*/\n    //<Container maxWidth='md' sx={{width: \"90%\"}}>\n    _jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 0,\n          children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 2,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                error: error,\n                helperText: errorMessage,\n                label: feature,\n                onChange: handleFeatureFieldChange\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 29\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 25\n            }, this)\n          }, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => onSubmit(featuersValuesDict),\n          children: \"click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleFeaturesDataToPredict, \"c0FZw+sDjEMfc5cWAqTKLdAcpW0=\");\n\n_c = HandleFeaturesDataToPredict;\nexport default HandleFeaturesDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFeaturesDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleFeaturesDataToPredict.js"],"names":["React","useState","Button","Box","TextField","Grid","Container","FormControl","Form","HandleFeaturesDataToPredict","features","onSubmit","featuersValuesDict","errorMessage","setErrorMessage","error","setError","handleSubmit","console","log","length","Object","keys","handleFeatureFieldChange","e","featureTextChanged","target","labels","childNodes","data","value","map","feature","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AAAA;;AAC1D;AACA,QAAM,CAACC,kBAAD,IAAuBX,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMgB,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAACU,MAArB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,IAAP,CAAYV,kBAAZ,EAAgCQ,MAA5C;;AAEA,QAAIV,QAAQ,CAACU,MAAT,GAAkBC,MAAM,CAACC,IAAP,CAAYV,kBAAZ,EAAgCQ,MAAtD,EACA;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;AACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGQR,IAAAA,QAAQ,CAACC,kBAAD,CAAR;AACH,GArBD;;AAuBA,QAAMW,wBAAwB,GAAGC,CAAC,IAAI;AAClC,QAAIC,kBAAkB,GAAGD,CAAC,CAACE,MAAF,CAASC,MAAT,CAAgB,CAAhB,EAAmBC,UAAnB,CAA8B,CAA9B,EAAiCC,IAA1D,CADkC,CAElC;;AACAjB,IAAAA,kBAAkB,CAACa,kBAAD,CAAlB,GAAyCD,CAAC,CAACE,MAAF,CAASI,KAAlD;AACH,GAJD;;AAMA;AAAA;AACI;AACA,YAAC,SAAD;AAAA,6BACI,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEb,YAAvB;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,OAAO,EAAE,CAAzB;AAAA,oBACKP,QAAQ,CAACqB,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACd;AAAA,mCACI,QAAC,IAAD;AAAkB,cAAA,IAAI,MAAtB;AAAuB,cAAA,EAAE,EAAE,CAA3B;AAAA,qCACI,QAAC,SAAD;AACI,gBAAA,KAAK,EAAIlB,KADb;AAEI,gBAAA,UAAU,EAAEF,YAFhB;AAII,gBAAA,KAAK,EAAEmB,OAJX;AAKI,gBAAA,QAAQ,EAAET;AALd,iBAGSU,KAHT;AAAA;AAAA;AAAA;AAAA;AADJ,eAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AADJ,2BADC;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAgBI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAMtB,QAAQ,CAACC,kBAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAuBH,CA1DD;;GAAMH,2B;;KAAAA,2B;AA4DN,eAAeA,2BAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nconst HandleFeaturesDataToPredict = ({features, onSubmit}) => {\r\n    //{Feature 1 text : value, ...}\r\n    const [featuersValuesDict] = useState({})\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        console.log(features.length)\r\n        console.log(Object.keys(featuersValuesDict).length)\r\n\r\n        if (features.length < Object.keys(featuersValuesDict).length)\r\n        {\r\n            console.log(\"Error\")\r\n            return\r\n        }\r\n        /*\r\n\r\n        if(textValue === null || textValue === \"\")\r\n        {\r\n            setError(true)\r\n            //setErrorMessage(\" Feature\")\r\n            return\r\n        }\r\n        setTextValueError(false)\r\n\r\n        */\r\n        onSubmit(featuersValuesDict)\r\n    }\r\n\r\n    const handleFeatureFieldChange = e => {\r\n        let featureTextChanged = e.target.labels[0].childNodes[0].data;\r\n        //update the value of current feature \r\n        featuersValuesDict[featureTextChanged] = e.target.value\r\n    }\r\n\r\n    return (\r\n        //<Container maxWidth='md' sx={{width: \"90%\"}}>\r\n        <Container>\r\n            <FormControl onSubmit={handleSubmit}>\r\n                <Grid container spacing={0}>\r\n                    {features.map((feature, index) => \r\n                    <>\r\n                        <Grid key={index} item xs={2}>\r\n                            <TextField \r\n                                error = {error}\r\n                                helperText={errorMessage}\r\n                                key={index} \r\n                                label={feature}\r\n                                onChange={handleFeatureFieldChange}/>\r\n                        </Grid>\r\n                    </>\r\n                    )}\r\n                </Grid>\r\n\r\n                <Button onClick={() => onSubmit(featuersValuesDict)}>click</Button>\r\n            </FormControl>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleFeaturesDataToPredict"]},"metadata":{},"sourceType":"module"}