{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleFeaturesDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Alert from 'react-bootstrap/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleFeaturesDataToPredict = ({\n  features,\n  onSubmit\n}) => {\n  _s();\n\n  const [featuersValuesDict] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleSubmit = () => {\n    console.log(features.length);\n    console.log(Object.keys(featuersValuesDict).length);\n\n    if (features.length > Object.keys(featuersValuesDict).length) {\n      console.log(\"Error\");\n      setError(true);\n      setErrorMessage(\"One feature (or more) is empty\");\n      return;\n    }\n\n    setError(false);\n    setErrorMessage(\"\");\n    onSubmit(featuersValuesDict);\n  };\n\n  const handleFeatureFieldChange = e => {\n    let featureTextChanged = e.target.labels[0].childNodes[0].data; //update the value of current feature \n\n    featuersValuesDict[featureTextChanged] = e.target.value;\n  };\n\n  return (\n    /*#__PURE__*/\n    //<Container maxWidth='md' sx={{width: \"90%\"}}>\n    _jsxDEV(Container, {\n      sx: {\n        textAlign: \"center\"\n      },\n      children: [error ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(Grid, {\n        sx: {\n          textAlign: \"center\"\n        },\n        container: true,\n        spacing: 1,\n        children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            focused: true,\n            error: error,\n            label: feature,\n            onChange: handleFeatureFieldChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"inherit\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            color: \"#424242\",\n            fontSize: '0.8rem'\n          },\n          children: \"Upload Features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleFeaturesDataToPredict, \"c0FZw+sDjEMfc5cWAqTKLdAcpW0=\");\n\n_c = HandleFeaturesDataToPredict;\nexport default HandleFeaturesDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFeaturesDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleFeaturesDataToPredict.js"],"names":["React","useState","TextField","Grid","Container","Button","Typography","Alert","HandleFeaturesDataToPredict","features","onSubmit","featuersValuesDict","errorMessage","setErrorMessage","error","setError","handleSubmit","console","log","length","Object","keys","handleFeatureFieldChange","e","featureTextChanged","target","labels","childNodes","data","value","textAlign","map","feature","index","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nconst HandleFeaturesDataToPredict = ({features, onSubmit}) => {\r\n    const [featuersValuesDict] = useState({})\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        console.log(features.length)\r\n        console.log(Object.keys(featuersValuesDict).length)\r\n\r\n        if (features.length > Object.keys(featuersValuesDict).length)\r\n        {\r\n            console.log(\"Error\")\r\n            setError(true)\r\n            setErrorMessage(\"One feature (or more) is empty\")\r\n            return\r\n        }\r\n        setError(false)\r\n        setErrorMessage(\"\")\r\n        onSubmit(featuersValuesDict)\r\n    }\r\n\r\n    const handleFeatureFieldChange = e => {\r\n        let featureTextChanged = e.target.labels[0].childNodes[0].data;\r\n        //update the value of current feature \r\n        featuersValuesDict[featureTextChanged] = e.target.value\r\n    }\r\n\r\n    return (\r\n        //<Container maxWidth='md' sx={{width: \"90%\"}}>\r\n        <Container sx={{textAlign: \"center\"}}>\r\n            {error ? \r\n            <Alert variant=\"danger\">\r\n              {errorMessage}\r\n            </Alert>\r\n             : null}\r\n\r\n            <Grid sx={{textAlign: \"center\"}} container spacing={1}>\r\n                {features.map((feature, index) => \r\n                    <Grid key={index} item xs={2}>\r\n                        <TextField \r\n                            focused\r\n                            error = {error}\r\n                            label={feature}\r\n                            onChange={handleFeatureFieldChange}/>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <hr/>\r\n\r\n            <Button \r\n                onClick={handleSubmit} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Upload Features</Typography>\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleFeaturesDataToPredict"]},"metadata":{},"sourceType":"module"}