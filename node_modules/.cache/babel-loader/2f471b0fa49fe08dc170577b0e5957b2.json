{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport AppBar from './components/AppBar';\nimport About from './components/About';\nimport AppStepper from './components/AppStepper';\nimport HandleFile from './components/file_handling/HandleFile';\nimport ModelsCards from './components/ModelsCards';\nimport ScoresAndStats from './components/scores_and_stats/ScoresAndStats';\nimport HandleDataToPredict from './components/handle_data_to_predict/HandleDataToPredict';\nimport Container from '@mui/material/Container';\nimport { Snackbar } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextString = \"Text\";\nconst FeaturesString = \"Features\";\nconst firstColor = \"#ffcc80\";\nconst secondColor = \"#80cbc4\";\nconst anonymousString = \"Anonymous\";\nconst signedString = \"Signed\";\n\nconst scrollToRef = ref => ref.current.scrollIntoView({\n  behavior: 'smooth',\n  block: 'center'\n});\n\nfunction App() {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [themeColor, setThemeColor] = useState(firstColor);\n  const [classifyingType, setClassifyingType] = useState(TextString);\n  const [report, setReport] = useState(null);\n  const [user, setUser] = useState(null);\n  const [userType, setUserType] = useState(anonymousString);\n  const [uid, setUid] = useState(uuidv4()); //generate unique id for anonymous user\n\n  const [features, setFeatures] = useState({});\n  const [modelId, setModelId] = useState(null);\n  const [modelsData, setModelsData] = useState(null);\n  const [message, setMessage] = useState(null);\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n     const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n  /*\n    const checkUserCoursesExists = async (uid) => {\n      var url = '/checkUserCourses/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database courses exists\n      {\n        console.log('User have courses.')\n        return true\n      }\n      if(res.status === 400)\n      {\n        return false\n      }\n    }\n  \n    const checkUserSchedulerDataExists = async (uid) => {\n      var url = '/checkUserScheduleData/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database exists\n      {\n        console.log('User have scheduler data.')\n        return true\n      }\n      else\n      {\n        return false\n      }\n    }\n  \n    const checkSharedSchedulersDataExists = async (uid) => {\n      var url = '/checkSharedScheduleData/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database exists\n      {\n        console.log('Shared scheduler data to user.')\n        return true\n      }\n      else\n      {\n        return false\n      }\n    }\n  \n    //fetch from user database courses\n    const fetchUserMandadtoryCourses = async (uid) => {\n      var url = '/mandatoryCourses/' + uid \n      const res = await fetch(url)\n      const data = await res.json()\n      console.log(\"user mandatory courses: \", data.mandatoryCourses)\n      setMandatoryCourses(data.mandatoryCourses)\n    }\n    const fetchUserElectiveCourses = async (uid) => {\n      var url = '/electiveCourses/' + uid \n      const res = await fetch(url)\n      const data = await res.json()\n      console.log(\"user elective courses: \", data.electiveCourses)\n      setElectiveCourses(data.electiveCourses)\n    }\n    const fetchSharedSchedulers = async (uid) => {\n      var url = '/sharedSchedulersData/' + uid \n      const schedulersDataRes = await fetch(url)\n      const schedulersData = await schedulersDataRes.json()\n      console.log(\"shared schedulers2: \", Object.values(schedulersData))\n      setSharedSchedulersData(Object.values(schedulersData))\n    }\n  \n    //fetch from newsletter database courses\n    const fetchMCourses = async () => {\n      const url = '/mandatoryCourses'\n      const res = await fetch(url)\n      const data = await res.json()\n      // init: adding needed fields to each object\n      const result = data.mandatoryCourses.map((v, index) => ({...v,\n          done: false,\n          id: index,\n  \t\t    courseType: 'Mandatory'\n      }));\n      console.log(\"Mandatory Courses: \", result)\n      setMandatoryCourses(result)\n      return result\n    }\n  \n    const fetchECourses = async () => {\n      var url = '/electiveCourses'\n      const res = await fetch(url)\n      const data = await res.json()\n      //adding needed fields to each object\n      const result = data.electiveCourses.map((v, index) => ({...v,\n          done: false,\n          id: index,\n  \t\t    courseType: 'Elective'\n      }));\n      console.log(\"Elective Courses: \", result)\n      setElectiveCourses(result)\n    }\n  \n    const updateUserDatabase = async () => {\n      const url = '/updateUserDatabase/' + user.uid\n      axios({\n        method: 'post',\n        url: url,\n        data: {\n          mandatoryCourses: {mandatoryCourses},\n          electiveCourses: {electiveCourses}\n        }\n      });\n    }\n    /*\n    const handleFileSubmit = async (formYear, formSemester) => {\n      //e.preventDefault()\n      year = formYear\n      semester = formSemester\n      var mandatoryCourses_ = await fetchMCourses()\n      await fetchECourses()\n      defaultCheckDoneCourses(mandatoryCourses_)\n      setShowKey('select')\n    }\n    */\n\n  const deleteModelFromDatabase = async (uid, modelIdToDelete) => {\n    const url = 'model/' + uid;\n\n    try {\n      const res = await axios({\n        method: 'delete',\n        url: url,\n        data: {\n          modelIdToDelete\n        }\n      });\n      console.log(res.data);\n    } catch (err) {\n      console.log(err.response.status);\n    }\n  };\n\n  const fetchModelsData = async uid => {\n    const url = 'models-data/' + uid;\n\n    try {\n      const res = await axios({\n        method: 'get',\n        url: url\n      });\n      console.log(res.data);\n      setModelsData(res.data['models_data']);\n    } catch (err) {\n      console.log(err.response.status);\n    }\n  };\n\n  const onLogin = async userFromLogin => {\n    setUser(userFromLogin);\n    setUserType(signedString);\n    setUid(userFromLogin.uid);\n    fetchModelsData(userFromLogin.uid);\n    /*\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    if(userHaveSharedSchedulersData_)\n      await fetchSharedSchedulers(uid)\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    */\n  };\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\");\n    setUser(null);\n  };\n\n  const onPredictFormSubmit = async predictedClass => {\n    console.log(predictedClass); //predictFeatures(dataToPredict)\n    //send to \n  };\n\n  const onPredictFileSubmit = predictedClass => {\n    console.log(predictedClass);\n  };\n\n  const onFileSubmit = async data => {\n    setModelId(data['file_id']);\n    setFeatures(data['features']);\n    setReport(data['report']);\n    console.log(data['report']);\n    console.log(report);\n  };\n\n  const handleSwitch = SwitchTextString => {\n    setClassifyingType(SwitchTextString);\n    if (themeColor === firstColor) setThemeColor(secondColor);else setThemeColor(firstColor);\n    console.log(SwitchTextString);\n  };\n\n  const deleteModelFromModelsData = modelIdToDelete => {\n    const newModelsData = modelsData.filter(modelData => modelData['id'] !== modelIdToDelete);\n    console.log(newModelsData);\n    setModelsData(newModelsData);\n  };\n\n  const onModelSelection = (modelId, features) => {\n    setFeatures(features);\n    setModelId(modelId);\n    setActiveStep(2);\n    executeScroll();\n  };\n\n  const handleModelDelete = modelIdToDelete => {\n    deleteModelFromModelsData(modelIdToDelete);\n    deleteModelFromDatabase(uid, modelIdToDelete);\n  };\n\n  const handleActiveSetChange = step => {\n    setActiveStep(step);\n  };\n\n  const startRef = useRef(null);\n\n  const executeScroll = () => scrollToRef(startRef);\n\n  const testButtonClick = () => {\n    setMessage('Scores & Stats updated');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'Calibri light',\n      fontSize: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: message,\n      autoHideDuration: 6000,\n      onClose: () => setMessage(null),\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      sx: {\n        width: \"90%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        user: user,\n        handleLogin: onLogin,\n        handleLogout: onLogout,\n        handleStartClick: executeScroll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '10rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(About, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: testButtonClick,\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), modelsData ? /*#__PURE__*/_jsxDEV(ModelsCards, {\n        modelsData: modelsData,\n        onModelSelection: onModelSelection,\n        handleModelDelete: handleModelDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waves\",\n      role: \"presentation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-bottom\",\n      ref: startRef,\n      style: {\n        color: themeColor\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppStepper, {\n        activeStep: activeStep,\n        setActiveStep: handleActiveSetChange,\n        firstStepComponent: /*#__PURE__*/_jsxDEV(HandleFile, {\n          uid: uid,\n          onFileSubmit: onFileSubmit,\n          handleSwitch: handleSwitch,\n          classifyingType: classifyingType,\n          themeColor: themeColor,\n          firstColor: firstColor,\n          secondColor: secondColor,\n          TextString: TextString,\n          FeaturesString: FeaturesString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }, this),\n        secondStepComponent: /*#__PURE__*/_jsxDEV(ScoresAndStats, {\n          report: report\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 15\n        }, this),\n        thirdStepComponent: /*#__PURE__*/_jsxDEV(HandleDataToPredict, {\n          uid: uid,\n          classifyingType: classifyingType,\n          features: features,\n          onPredictFormSubmit: onPredictFormSubmit,\n          onPredictFileSubmit: onPredictFileSubmit,\n          modelId: modelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '10rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"30S3tOvxY0GBWPnRZJBbKfyCjf4=\");\n\n_c = App;\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n  direction: 'rtl',\n  TextStringAlign: 'right'\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/CLSFY/src/App.js"],"names":["React","useState","useEffect","useRef","axios","v4","uuidv4","AppBar","About","AppStepper","HandleFile","ModelsCards","ScoresAndStats","HandleDataToPredict","Container","Snackbar","TextString","FeaturesString","firstColor","secondColor","anonymousString","signedString","scrollToRef","ref","current","scrollIntoView","behavior","block","App","activeStep","setActiveStep","themeColor","setThemeColor","classifyingType","setClassifyingType","report","setReport","user","setUser","userType","setUserType","uid","setUid","features","setFeatures","modelId","setModelId","modelsData","setModelsData","message","setMessage","deleteModelFromDatabase","modelIdToDelete","url","res","method","data","console","log","err","response","status","fetchModelsData","onLogin","userFromLogin","onLogout","onPredictFormSubmit","predictedClass","onPredictFileSubmit","onFileSubmit","handleSwitch","SwitchTextString","deleteModelFromModelsData","newModelsData","filter","modelData","onModelSelection","executeScroll","handleModelDelete","handleActiveSetChange","step","startRef","testButtonClick","fontFamily","fontSize","width","height","color","appStyle","backgroundColor","direction","TextStringAlign"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAOC,MAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAsB,yBAAtB;AAEA,OAAOC,UAAP,MAAsB,uCAAtB;AACA,OAAOC,WAAP,MAAuB,0BAAvB;AACA,OAAOC,cAAP,MAA0B,8CAA1B;AACA,OAAOC,mBAAP,MAA+B,yDAA/B;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,QAAT,QAAyB,eAAzB;;AAEA,MAAMC,UAAU,GAAG,MAAnB;AACA,MAAMC,cAAc,GAAG,UAAvB;AAEA,MAAMC,UAAU,GAAG,SAAnB;AACA,MAAMC,WAAW,GAAG,SAApB;AAEA,MAAMC,eAAe,GAAG,WAAxB;AACA,MAAMC,YAAY,GAAG,QAArB;;AAEA,MAAMC,WAAW,GAAIC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAYC,cAAZ,CAA2B;AAAEC,EAAAA,QAAQ,EAAE,QAAZ;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAA3B,CAA7B;;AAEA,SAASC,GAAT,GACA;AAAA;;AACE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAACiB,UAAD,CAA5C;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwCjC,QAAQ,CAACe,UAAD,CAAtD;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBnC,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACoC,IAAD,EAAOC,OAAP,IAAkBrC,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACsC,QAAD,EAAWC,WAAX,IAA0BvC,QAAQ,CAACmB,eAAD,CAAxC;AACA,QAAM,CAACqB,GAAD,EAAMC,MAAN,IAAgBzC,QAAQ,CAACK,MAAM,EAAP,CAA9B,CAPF,CAO2C;;AACzC,QAAM,CAACqC,QAAD,EAAWC,WAAX,IAA0B3C,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC4C,OAAD,EAAUC,UAAV,IAAwB7C,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAAC8C,UAAD,EAAaC,aAAb,IAA8B/C,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACgD,OAAD,EAAUC,UAAV,IAAwBjD,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG,GAZQ,EAYN,EAZM,CAAT;AAaiD,uBAAuB,GAAG,OAAOV,GAAP,EAAYW,eAAZ,KAAgC;AAC9D,UAAMC,GAAG,GAAG,WAAWZ,GAAvB;;AACA,QAAI;AACA,YAAMa,GAAG,GAAG,MAAMlD,KAAK,CAAC;AACpBmD,QAAAA,MAAM,EAAE,QADY;AAEpBF,QAAAA,GAAG,EAAEA,GAFe;AAGpBG,QAAAA,IAAI,EAAC;AACHJ,UAAAA;AADG;AAHe,OAAD,CAAvB;AAOAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACE,IAAhB;AACD,KATH,CAUE,OAAOG,GAAP,EACA;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,QAAJ,CAAaC,MAAzB;AACD;AACN,GAhBC;;AAkBA,QAAMC,eAAe,GAAG,MAAOrB,GAAP,IAAe;AACrC,UAAMY,GAAG,GAAG,iBAAiBZ,GAA7B;;AACA,QAAI;AACA,YAAMa,GAAG,GAAG,MAAMlD,KAAK,CAAC;AACpBmD,QAAAA,MAAM,EAAE,KADY;AAEpBF,QAAAA,GAAG,EAAEA;AAFe,OAAD,CAAvB;AAIAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACE,IAAhB;AACAR,MAAAA,aAAa,CAACM,GAAG,CAACE,IAAJ,CAAS,aAAT,CAAD,CAAb;AACD,KAPH,CAQE,OAAOG,GAAP,EACA;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,QAAJ,CAAaC,MAAzB;AACD;AACN,GAdC;;AAgBA,QAAME,OAAO,GAAG,MAAOC,aAAP,IAAyB;AACvC1B,IAAAA,OAAO,CAAC0B,aAAD,CAAP;AACAxB,IAAAA,WAAW,CAACnB,YAAD,CAAX;AACAqB,IAAAA,MAAM,CAACsB,aAAa,CAACvB,GAAf,CAAN;AACAqB,IAAAA,eAAe,CAACE,aAAa,CAACvB,GAAf,CAAf;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAzBD;;AA2BA,QAAMwB,QAAQ,GAAG,MAAM;AACrBR,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACApB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,QAAM4B,mBAAmB,GAAG,MAAOC,cAAP,IAA0B;AACpDV,IAAAA,OAAO,CAACC,GAAR,CAAYS,cAAZ,EADoD,CAEpD;AACA;AACD,GAJD;;AAMA,QAAMC,mBAAmB,GAAID,cAAD,IAAoB;AAC9CV,IAAAA,OAAO,CAACC,GAAR,CAAYS,cAAZ;AACD,GAFD;;AAIA,QAAME,YAAY,GAAG,MAAOb,IAAP,IAAgB;AACnCV,IAAAA,UAAU,CAACU,IAAI,CAAC,SAAD,CAAL,CAAV;AACAZ,IAAAA,WAAW,CAACY,IAAI,CAAC,UAAD,CAAL,CAAX;AACApB,IAAAA,SAAS,CAACoB,IAAI,CAAC,QAAD,CAAL,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAC,QAAD,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAZ;AACD,GAND;;AAQA,QAAMmC,YAAY,GAAIC,gBAAD,IAAsB;AACzCrC,IAAAA,kBAAkB,CAACqC,gBAAD,CAAlB;AACA,QAAGxC,UAAU,KAAKb,UAAlB,EACEc,aAAa,CAACb,WAAD,CAAb,CADF,KAGEa,aAAa,CAACd,UAAD,CAAb;AACFuC,IAAAA,OAAO,CAACC,GAAR,CAAYa,gBAAZ;AACD,GAPD;;AASA,QAAMC,yBAAyB,GAAIpB,eAAD,IAAqB;AACrD,UAAMqB,aAAa,GAAG1B,UAAU,CAAC2B,MAAX,CAAkBC,SAAS,IAAIA,SAAS,CAAC,IAAD,CAAT,KAAoBvB,eAAnD,CAAtB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYe,aAAZ;AACAzB,IAAAA,aAAa,CAACyB,aAAD,CAAb;AACD,GAJD;;AAMA,QAAMG,gBAAgB,GAAG,CAAC/B,OAAD,EAAUF,QAAV,KAAuB;AAC9CC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAf,IAAAA,aAAa,CAAC,CAAD,CAAb;AACA+C,IAAAA,aAAa;AACd,GALD;;AAOA,QAAMC,iBAAiB,GAAI1B,eAAD,IAAqB;AAC7CoB,IAAAA,yBAAyB,CAACpB,eAAD,CAAzB;AACAD,IAAAA,uBAAuB,CAACV,GAAD,EAAMW,eAAN,CAAvB;AACD,GAHD;;AAKA,QAAM2B,qBAAqB,GAAIC,IAAD,IAAU;AACtClD,IAAAA,aAAa,CAACkD,IAAD,CAAb;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAG9E,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAM0E,aAAa,GAAG,MAAMvD,WAAW,CAAC2D,QAAD,CAAvC;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5BhC,IAAAA,UAAU,CAAC,wBAAD,CAAV;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACiC,MAAAA,UAAU,EAAE,eAAb;AAA8BC,MAAAA,QAAQ,EAAE;AAAxC,KAAZ;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,IAAI,EAAEnC,OADR;AAEE,MAAA,gBAAgB,EAAE,IAFpB;AAGE,MAAA,OAAO,EAAE,MAAMC,UAAU,CAAC,IAAD,CAH3B;AAIE,MAAA,OAAO,EAAED;AAJX;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAE;AAACoC,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAEhD,IADR;AAEE,QAAA,WAAW,EAAE0B,OAFf;AAGE,QAAA,YAAY,EAAEE,QAHhB;AAIE,QAAA,gBAAgB,EAAEY;AAJpB;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,KAAK,EAAE;AAAES,UAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEjD;AAAb;AAAA;AAAA;AAAA;AAAA,cARF,eASE;AAAQ,QAAA,OAAO,EAAE6C,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAA;AAAA;AAAA;AAAA,cAVF,EAWGnC,UAAU,gBACT,QAAC,WAAD;AACE,QAAA,UAAU,EAAEA,UADd;AAEE,QAAA,gBAAgB,EAAE6B,gBAFpB;AAGE,QAAA,iBAAiB,EAAEE;AAHrB;AAAA;AAAA;AAAA;AAAA,cADS,GAMT,IAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eA6BI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YA7BJ,eA8BI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,GAAG,EAAEG,QAArC;AAA+C,MAAA,KAAK,EAAE;AAACM,QAAAA,KAAK,EAAExD;AAAR,OAAtD;AAAA,8BACA;AAAK,QAAA,KAAK,EAAE;AAAEuD,UAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,cADA,eAGE,QAAC,UAAD;AACE,QAAA,UAAU,EAAEzD,UADd;AAEE,QAAA,aAAa,EAAEkD,qBAFjB;AAGE,QAAA,kBAAkB,eAChB,QAAC,UAAD;AACE,UAAA,GAAG,EAAEtC,GADP;AAEE,UAAA,YAAY,EAAE4B,YAFhB;AAGE,UAAA,YAAY,EAAEC,YAHhB;AAIE,UAAA,eAAe,EAAErC,eAJnB;AAKE,UAAA,UAAU,EAAEF,UALd;AAME,UAAA,UAAU,EAAEb,UANd;AAOE,UAAA,WAAW,EAAEC,WAPf;AAQE,UAAA,UAAU,EAAEH,UARd;AASE,UAAA,cAAc,EAAEC;AATlB;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAeE,QAAA,mBAAmB,eACjB,QAAC,cAAD;AACE,UAAA,MAAM,EAAEkB;AADV;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAmBE,QAAA,kBAAkB,eAChB,QAAC,mBAAD;AACE,UAAA,GAAG,EAAEM,GADP;AAEE,UAAA,eAAe,EAAER,eAFnB;AAGE,UAAA,QAAQ,EAAEU,QAHZ;AAIE,UAAA,mBAAmB,EAAEuB,mBAJvB;AAKE,UAAA,mBAAmB,EAAEE,mBALvB;AAME,UAAA,OAAO,EAAEvB;AANX;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA,cAHF,eAgCE;AAAK,QAAA,KAAK,EAAE;AAAEyC,UAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,cAhCF;AAAA;AAAA;AAAA;AAAA;AAAA,YA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmED;;GA/UQ1D,G;;KAAAA,G;AAiVT,MAAM4D,QAAQ,GACd;AACEC,EAAAA,eAAe,EAAE,MADnB;AAEEF,EAAAA,KAAK,EAAE,OAFT;AAGCG,EAAAA,SAAS,EAAE,KAHZ;AAICC,EAAAA,eAAe,EAAE;AAJlB,CADA;AAQA,eAAe/D,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react'\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport AppBar from'./components/AppBar'\nimport About from'./components/About'\nimport AppStepper from'./components/AppStepper'\n\nimport HandleFile from'./components/file_handling/HandleFile'\nimport ModelsCards from'./components/ModelsCards'\nimport ScoresAndStats from'./components/scores_and_stats/ScoresAndStats'\nimport HandleDataToPredict from'./components/handle_data_to_predict/HandleDataToPredict'\n\nimport Container from '@mui/material/Container';\nimport { Snackbar } from '@mui/material';\n\nconst TextString = \"Text\"\nconst FeaturesString = \"Features\"\n\nconst firstColor = \"#ffcc80\"\nconst secondColor = \"#80cbc4\"\n\nconst anonymousString = \"Anonymous\"\nconst signedString = \"Signed\"\n\nconst scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\nfunction App()\n{\n  const [activeStep, setActiveStep] = useState(0)\n  const [themeColor, setThemeColor] = useState(firstColor)  \n  const [classifyingType, setClassifyingType] = useState(TextString)\n  const [report, setReport] = useState(null)\n  const [user, setUser] = useState(null)\n  const [userType, setUserType] = useState(anonymousString)\n  const [uid, setUid] = useState(uuidv4()) //generate unique id for anonymous user\n  const [features, setFeatures] = useState({})\n  const [modelId, setModelId] = useState(null)\n  const [modelsData, setModelsData] = useState(null)\n  const [message, setMessage] = useState(null)\n\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n\n    const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n/*\n  const checkUserCoursesExists = async (uid) => {\n    var url = '/checkUserCourses/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database courses exists\n    {\n      console.log('User have courses.')\n      return true\n    }\n    if(res.status === 400)\n    {\n      return false\n    }\n  }\n\n  const checkUserSchedulerDataExists = async (uid) => {\n    var url = '/checkUserScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('User have scheduler data.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  const checkSharedSchedulersDataExists = async (uid) => {\n    var url = '/checkSharedScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('Shared scheduler data to user.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  //fetch from user database courses\n  const fetchUserMandadtoryCourses = async (uid) => {\n    var url = '/mandatoryCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user mandatory courses: \", data.mandatoryCourses)\n    setMandatoryCourses(data.mandatoryCourses)\n  }\n  const fetchUserElectiveCourses = async (uid) => {\n    var url = '/electiveCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user elective courses: \", data.electiveCourses)\n    setElectiveCourses(data.electiveCourses)\n  }\n  const fetchSharedSchedulers = async (uid) => {\n    var url = '/sharedSchedulersData/' + uid \n    const schedulersDataRes = await fetch(url)\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"shared schedulers2: \", Object.values(schedulersData))\n    setSharedSchedulersData(Object.values(schedulersData))\n  }\n\n  //fetch from newsletter database courses\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    // init: adding needed fields to each object\n    const result = data.mandatoryCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result)\n    setMandatoryCourses(result)\n    return result\n  }\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    //adding needed fields to each object\n    const result = data.electiveCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result)\n    setElectiveCourses(result)\n  }\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {mandatoryCourses},\n        electiveCourses: {electiveCourses}\n      }\n    });\n  }\n  /*\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear\n    semester = formSemester\n    var mandatoryCourses_ = await fetchMCourses()\n    await fetchECourses()\n    defaultCheckDoneCourses(mandatoryCourses_)\n    setShowKey('select')\n  }\n  */\n\n  const deleteModelFromDatabase = async (uid, modelIdToDelete) => {\n    const url = 'model/' + uid\n    try {\n        const res = await axios({\n            method: 'delete',\n            url: url,\n            data:{\n              modelIdToDelete\n            }\n        });\n        console.log(res.data)\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const fetchModelsData = async (uid) => {\n    const url = 'models-data/' + uid\n    try {\n        const res = await axios({\n            method: 'get',\n            url: url\n        });\n        console.log(res.data)\n        setModelsData(res.data['models_data'])\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const onLogin = async (userFromLogin) => {\n    setUser(userFromLogin)\n    setUserType(signedString)\n    setUid(userFromLogin.uid)\n    fetchModelsData(userFromLogin.uid)\n\n    \n\n    /*\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    if(userHaveSharedSchedulersData_)\n      await fetchSharedSchedulers(uid)\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    */\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n    setUser(null)\n  }\n\n  const onPredictFormSubmit = async (predictedClass) => {\n    console.log(predictedClass)\n    //predictFeatures(dataToPredict)\n    //send to \n  }\n\n  const onPredictFileSubmit = (predictedClass) => {\n    console.log(predictedClass)\n  }\n\n  const onFileSubmit = async (data) => {\n    setModelId(data['file_id'])\n    setFeatures(data['features'])\n    setReport(data['report'])\n    console.log(data['report'])\n    console.log(report)\n  }\n\n  const handleSwitch = (SwitchTextString) => {\n    setClassifyingType(SwitchTextString)\n    if(themeColor === firstColor)\n      setThemeColor(secondColor)\n    else\n      setThemeColor(firstColor)\n    console.log(SwitchTextString)\n  }\n\n  const deleteModelFromModelsData = (modelIdToDelete) => {\n    const newModelsData = modelsData.filter(modelData => modelData['id'] !== modelIdToDelete)\n    console.log(newModelsData)\n    setModelsData(newModelsData)\n  }\n\n  const onModelSelection = (modelId, features) => {\n    setFeatures(features)\n    setModelId(modelId)\n    setActiveStep(2)\n    executeScroll()\n  }\n\n  const handleModelDelete = (modelIdToDelete) => {\n    deleteModelFromModelsData(modelIdToDelete)\n    deleteModelFromDatabase(uid, modelIdToDelete)\n  }\n\n  const handleActiveSetChange = (step) => {\n    setActiveStep(step)\n  }\n\n  const startRef = useRef(null)\n  const executeScroll = () => scrollToRef(startRef)\n\n  const testButtonClick = () => {\n    setMessage('Scores & Stats updated')\n  }\n\n  return ( \n    <div style={{fontFamily: 'Calibri light', fontSize: '1rem'}}>\n      <Snackbar\n        open={message}\n        autoHideDuration={6000}\n        onClose={() => setMessage(null)}\n        message={message}\n      />\n\n      <Container sx={{width: \"90%\"}}>\n        <AppBar\n          user={user} \n          handleLogin={onLogin} \n          handleLogout={onLogout}\n          handleStartClick={executeScroll}\n        />\n        <div style={{ height: '10rem' }} />\n        <About user={user}/>\n        <button onClick={testButtonClick}>Test</button>\n        <br/>\n        {modelsData? \n          <ModelsCards \n            modelsData={modelsData}\n            onModelSelection={onModelSelection}\n            handleModelDelete={handleModelDelete}\n          /> \n        : null}\n\n      </Container>\n\n        <div className=\"waves\" role=\"presentation\"></div>\n        <div className=\"content-bottom\" ref={startRef} style={{color: themeColor}}>\n        <div style={{ height: '5rem' }} />\n\n          <AppStepper\n            activeStep={activeStep}\n            setActiveStep={handleActiveSetChange}\n            firstStepComponent={\n              <HandleFile \n                uid={uid}\n                onFileSubmit={onFileSubmit}\n                handleSwitch={handleSwitch}\n                classifyingType={classifyingType}\n                themeColor={themeColor}\n                firstColor={firstColor}\n                secondColor={secondColor}\n                TextString={TextString}\n                FeaturesString={FeaturesString}\n              />}\n            secondStepComponent={\n              <ScoresAndStats \n                report={report}\n              />}\n            thirdStepComponent={\n              <HandleDataToPredict \n                uid={uid}\n                classifyingType={classifyingType}\n                features={features}\n                onPredictFormSubmit={onPredictFormSubmit}\n                onPredictFileSubmit={onPredictFileSubmit}\n                modelId={modelId}\n              />}\n          />\n          <div style={{ height: '10rem' }} />\n        </div>\n    </div>\n  );\n}\n\nconst appStyle = \n{\n  backgroundColor: '#444',\n  color: 'white',\n\tdirection: 'rtl',\n\tTextStringAlign: 'right',\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}