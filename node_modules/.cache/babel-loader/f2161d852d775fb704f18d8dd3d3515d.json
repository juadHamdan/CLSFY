{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleFeaturesDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleFeaturesDataToPredict = ({\n  features,\n  onSubmit\n}) => {\n  _s();\n\n  const [textValue, setTextValue] = useState(null);\n  const [textValueMessage, setTextValueMessage] = useState(\"\");\n  const [textValueError, setTextValueError] = useState(false);\n  const [classValue, setClassValue] = useState(null);\n  const [classValueMessage, setClassValueMessage] = useState(\"\");\n  const [classValueError, setClassValueError] = useState(\"\");\n\n  const handleSubmit = e => {\n    console.log(e);\n  };\n\n  const handleTextChange = e => {\n    setTextValue(e.target.value);\n  };\n\n  const handleClassChange = e => {\n    setClassValue(e.target.value);\n  };\n\n  const handleTextFieldClick = e => {\n    let featureChanged = e.target.labels[0].childNodes[0].data; //{currFeatureChanged: }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      width: \"90%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      noValidate: true,\n      autoComplete: \"off\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              style: {\n                color: \"white\"\n              },\n              label: feature,\n              onChange: handleTextFieldClick\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HandleFeaturesDataToPredict, \"0liCYfO25xbJ68v4OMhSzLVvJJo=\");\n\n_c = HandleFeaturesDataToPredict;\nexport default HandleFeaturesDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFeaturesDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleFeaturesDataToPredict.js"],"names":["React","useState","Button","Box","TextField","Grid","Container","HandleFeaturesDataToPredict","features","onSubmit","textValue","setTextValue","textValueMessage","setTextValueMessage","textValueError","setTextValueError","classValue","setClassValue","classValueMessage","setClassValueMessage","classValueError","setClassValueError","handleSubmit","e","console","log","handleTextChange","target","value","handleClassChange","handleTextFieldClick","featureChanged","labels","childNodes","data","width","map","feature","index","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AAAA;;AAC1D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACiB,iBAAD,EAAoBC,oBAApB,IAA4ClB,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAC,EAAD,CAAtD;;AAEA,QAAMqB,YAAY,GAAGC,CAAC,IAAI;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,GAFD;;AAIA,QAAMG,gBAAgB,GAAGH,CAAC,IAAI;AAC1BZ,IAAAA,YAAY,CAACY,CAAC,CAACI,MAAF,CAASC,KAAV,CAAZ;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAGN,CAAC,IAAI;AAC3BN,IAAAA,aAAa,CAACM,CAAC,CAACI,MAAF,CAASC,KAAV,CAAb;AACH,GAFD;;AAIA,QAAME,oBAAoB,GAAGP,CAAC,IAAI;AAC9B,QAAIQ,cAAc,GAAGR,CAAC,CAACI,MAAF,CAASK,MAAT,CAAgB,CAAhB,EAAmBC,UAAnB,CAA8B,CAA9B,EAAiCC,IAAtD,CAD8B,CAE9B;AAEH,GAJD;;AAMA,sBACI,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAyB,IAAA,EAAE,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KAA7B;AAAA,4BACI,QAAC,GAAD;AACI,MAAA,SAAS,EAAC,MADd;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,YAAY,EAAC,KAHjB;AAAA,6BAKI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,kBACK3B,QAAQ,CAAC4B,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACd;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAA,mCACI,QAAC,SAAD;AACI,cAAA,KAAK,EAAE;AAACC,gBAAAA,KAAK,EAAE;AAAR,eADX;AAGI,cAAA,KAAK,EAAEF,OAHX;AAII,cAAA,QAAQ,EAAEP;AAJd,eAESQ,KAFT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,yBADC;AADL;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAqBI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEhB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CApDD;;GAAMf,2B;;KAAAA,2B;AAsDN,eAAeA,2BAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleFeaturesDataToPredict = ({features, onSubmit}) => {\r\n    const [textValue, setTextValue] = useState(null)\r\n    const [textValueMessage, setTextValueMessage] = useState(\"\")\r\n    const [textValueError, setTextValueError] = useState(false)\r\n\r\n    const [classValue, setClassValue] = useState(null)\r\n    const [classValueMessage, setClassValueMessage] = useState(\"\")\r\n    const [classValueError, setClassValueError] = useState(\"\")\r\n\r\n    const handleSubmit = e => {\r\n        console.log(e)\r\n    }\r\n\r\n    const handleTextChange = e => {\r\n        setTextValue(e.target.value)\r\n    }\r\n\r\n    const handleClassChange = e => {\r\n        setClassValue(e.target.value)\r\n    }\r\n\r\n    const handleTextFieldClick = e => {\r\n        let featureChanged = e.target.labels[0].childNodes[0].data;\r\n        //{currFeatureChanged: }\r\n\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='md' sx={{width: \"90%\"}}>\r\n            <Box\r\n                component=\"form\"\r\n                noValidate\r\n                autoComplete=\"off\"\r\n                >\r\n                <Grid container spacing={0}>\r\n                    {features.map((feature, index) => \r\n                    <>\r\n                        <Grid item xs={2}>\r\n                            <TextField \r\n                                style={{color: \"white\"}}\r\n                                key={index} \r\n                                label={feature}\r\n                                onChange={handleTextFieldClick}/>\r\n                        </Grid>\r\n                    </>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n\r\n            <Button onClick={handleSubmit}>click</Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleFeaturesDataToPredict"]},"metadata":{},"sourceType":"module"}