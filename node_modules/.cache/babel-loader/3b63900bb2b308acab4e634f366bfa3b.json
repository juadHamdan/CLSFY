{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleTextDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleTextDataToPredict = ({\n  onSubmit\n}) => {\n  _s();\n\n  const [textValue, setTextValue] = useState(null);\n  const [textValueMessage, setTextValueMessage] = useState(\"\");\n  const [textValueError, setTextValueError] = useState(false);\n\n  const handleSubmit = () => {\n    if (textValue === null || textValue === \"\") {\n      console.log(textValue);\n      setTextValueError(true);\n      setTextValueMessage(\"Empty Text\");\n      return;\n    }\n  };\n\n  const handleTextChange = e => {\n    setTextValue(e.target.value);\n  };\n\n  return (\n    /*#__PURE__*/\n    //maxWidth='md' sx={{width: \"90%\"}}\n    _jsxDEV(Container, {\n      sx: {\n        color: \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        style: {\n          color: \"white\"\n        },\n        error: textValueError,\n        focused: true,\n        multiline: true,\n        rows: 5,\n        fullWidth: true,\n        label: \"Text\",\n        helperText: textValueMessage,\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleTextDataToPredict, \"EWWsueGFtyNPrPXW9IXoypgAUvQ=\");\n\n_c = HandleTextDataToPredict;\nexport default HandleTextDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleTextDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleTextDataToPredict.js"],"names":["React","useState","Button","Box","TextField","Grid","Container","HandleTextDataToPredict","onSubmit","textValue","setTextValue","textValueMessage","setTextValueMessage","textValueError","setTextValueError","handleSubmit","console","log","handleTextChange","e","target","value","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,KAAD,CAApD;;AAEA,QAAMc,YAAY,GAAG,MAAM;AACvB,QAAGN,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,EAAvC,EACA;AACIO,MAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACAK,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAF,MAAAA,mBAAmB,CAAC,YAAD,CAAnB;AACA;AACH;AACJ,GARD;;AAUA,QAAMM,gBAAgB,GAAGC,CAAC,IAAI;AAC1BT,IAAAA,YAAY,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH,GAFD;;AAIA;AAAA;AACI;AACA,YAAC,SAAD;AAAW,MAAA,EAAE,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA,8BACI,QAAC,SAAD;AACI,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAE;AAAR,SADX;AAEI,QAAA,KAAK,EAAIT,cAFb;AAGI,QAAA,OAAO,MAHX;AAII,QAAA,SAAS,MAJb;AAKI,QAAA,IAAI,EAAE,CALV;AAMI,QAAA,SAAS,MANb;AAOI,QAAA,KAAK,EAAC,MAPV;AAQI,QAAA,UAAU,EAAEF,gBARhB;AASI,QAAA,QAAQ,EAAEO;AATd;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAiBH,CApCD;;GAAMR,uB;;KAAAA,uB;AAsCN,eAAeA,uBAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleTextDataToPredict = ({onSubmit}) => {\r\n    const [textValue, setTextValue] = useState(null)\r\n    const [textValueMessage, setTextValueMessage] = useState(\"\")\r\n    const [textValueError, setTextValueError] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        if(textValue === null || textValue === \"\")\r\n        {\r\n            console.log(textValue)\r\n            setTextValueError(true)\r\n            setTextValueMessage(\"Empty Text\")\r\n            return\r\n        }\r\n    }\r\n\r\n    const handleTextChange = e => {\r\n        setTextValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        //maxWidth='md' sx={{width: \"90%\"}}\r\n        <Container sx={{color: \"white\"}}> \r\n            <TextField\r\n                style={{color: \"white\"}}\r\n                error = {textValueError}\r\n                focused\r\n                multiline\r\n                rows={5}\r\n                fullWidth \r\n                label=\"Text\"\r\n                helperText={textValueMessage}\r\n                onChange={handleTextChange}\r\n            />\r\n            <Button onClick={handleSubmit}>click</Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleTextDataToPredict"]},"metadata":{},"sourceType":"module"}