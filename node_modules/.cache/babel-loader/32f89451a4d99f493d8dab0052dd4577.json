{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\UploadFile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Fab from '@mui/material/Fab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport UploadRoundedIcon from '@mui/icons-material/UploadRounded';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport FindInPageRoundedIcon from '@mui/icons-material/FindInPageRounded';\nimport { red } from '@mui/material/colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst color = red[500];\nconst inputText = 'Supports: xls, xlsx, xlsm, xlsb, odf, ods, odt';\n\nconst UploadFile = ({\n  classifyingType,\n  onSubmit\n}) => {\n  _s();\n\n  const [file, setFile] = useState('');\n  const [filename, setFilename] = useState(inputText);\n  const [message, setMessage] = useState('');\n  const [messageVariant, setMessageVariant] = useState('');\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  const onChange = e => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n    console.log(\"classifyingType:\", classifyingType);\n    let url = classifyingType === \"Text\" ? '/classifyText' : 'classifyFeatures';\n    setShowSpinner(true);\n    var fileUploadSuccess = true;\n\n    try {\n      const res = await axios.post(url, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          setUploadPercentage(Math.round(progressEvent.loaded * 100 / progressEvent.total));\n        }\n      });\n      setTimeout(() => setUploadPercentage(0), 3000);\n      setTimeout(() => setMessage(''), 3000);\n      setMessage('Model trained successfully');\n      setMessageVariant('success');\n    } catch (err) {\n      fileUploadSuccess = false;\n\n      if (err.response.status === 500) {\n        setMessage(err.response.statusText);\n        setMessageVariant('danger');\n      } else if (err.response.status === 400) {\n        setMessage(err.response.statusText, \"Only Excel file allowed.\");\n        setMessageVariant('warning');\n      } else {\n        setMessage(err.response.statusText);\n        setMessageVariant('info');\n      }\n\n      setUploadPercentage(0);\n    } finally {\n      setShowSpinner(false);\n\n      if (fileUploadSuccess) {\n        onSubmit(); //to outside scope\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-auto\",\n      style: uploadStyle,\n      children: [message ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: messageVariant,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 24\n      }, this) : null, uploadPercentage === 100 ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"info\",\n        children: \"File uploaded, Training model...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 41\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-file mb-\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            className: \"custom-file-input\",\n            size: \"lg\",\n            id: \"customFile\",\n            onChange: onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"custom-file-label\",\n            htmlFor: \"customFile\",\n            children: [filename, \" \", /*#__PURE__*/_jsxDEV(FindInPageRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              mr: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n              color: \"warning\",\n              variant: \"determinate\",\n              value: uploadPercentage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              minWidth: 35\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"#f57c00\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: `${uploadPercentage}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          onClick: handleSubmit,\n          size: \"small\",\n          loading: showSpinner,\n          loadingPosition: \"start\",\n          color: \"warning\",\n          children: [/*#__PURE__*/_jsxDEV(UploadRoundedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(UploadRoundedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(UploadFile, \"uHh/01enM0V/wwqhkF1Zt4IMsiA=\");\n\n_c = UploadFile;\nconst uploadStyle = {\n  color: 'black',\n  padding: \"2rem\",\n  fontFamily: 'Calibri light',\n  fontSize: '1rem'\n};\nexport default UploadFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"sources":["D:/CLSFY/src/components/UploadFile.js"],"names":["React","useState","axios","Alert","ProgressBar","Spinner","Button","LinearProgress","Fab","Typography","Box","UploadRoundedIcon","LoadingButton","FindInPageRoundedIcon","red","color","inputText","UploadFile","classifyingType","onSubmit","file","setFile","filename","setFilename","message","setMessage","messageVariant","setMessageVariant","uploadPercentage","setUploadPercentage","showSpinner","setShowSpinner","onChange","e","target","files","name","handleSubmit","preventDefault","formData","FormData","append","console","log","url","fileUploadSuccess","res","post","headers","onUploadProgress","progressEvent","Math","round","loaded","total","setTimeout","err","response","status","statusText","uploadStyle","textAlign","display","alignItems","width","mr","minWidth","padding","fontFamily","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AAEA,SAASC,GAAT,QAAoB,sBAApB;;;AAEA,MAAMC,KAAK,GAAGD,GAAG,CAAC,GAAD,CAAjB;AAEA,MAAME,SAAS,GAAG,gDAAlB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA;AAAlB,CAAD,KAAiC;AAAA;;AAClD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAACe,SAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACyB,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC2B,gBAAD,EAAmBC,mBAAnB,IAA0C5B,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAM+B,QAAQ,GAAGC,CAAC,IAAI;AACpBZ,IAAAA,OAAO,CAACY,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAAP;AACAZ,IAAAA,WAAW,CAACU,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,EAAkBC,IAAnB,CAAX;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAMJ,CAAN,IAAW;AAC9BA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBrB,IAAxB;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCzB,eAAhC;AACA,QAAI0B,GAAG,GAAI1B,eAAe,KAAK,MAApB,GAA6B,eAA7B,GAA+C,kBAA1D;AACAa,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEA,QAAIc,iBAAiB,GAAG,IAAxB;;AACA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAM5C,KAAK,CAAC6C,IAAN,CAAWH,GAAX,EAAgBL,QAAhB,EAA0B;AAC1CS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADiC;AAI1CC,QAAAA,gBAAgB,EAAEC,aAAa,IAAI;AACjCrB,UAAAA,mBAAmB,CAACsB,IAAI,CAACC,KAAL,CAAYF,aAAa,CAACG,MAAd,GAAuB,GAAxB,GAA+BH,aAAa,CAACI,KAAxD,CAAD,CAAnB;AACD;AANyC,OAA1B,CAAlB;AAQAC,MAAAA,UAAU,CAAC,MAAM1B,mBAAmB,CAAC,CAAD,CAA1B,EAA8B,IAA9B,CAAV;AACA0B,MAAAA,UAAU,CAAC,MAAM9B,UAAU,CAAC,EAAD,CAAjB,EAAuB,IAAvB,CAAV;AAEAA,MAAAA,UAAU,CAAC,4BAAD,CAAV;AACAE,MAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACD,KAdD,CAeA,OAAO6B,GAAP,EACA;AACEX,MAAAA,iBAAiB,GAAG,KAApB;;AACA,UAAIW,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EACA;AACEjC,QAAAA,UAAU,CAAC+B,GAAG,CAACC,QAAJ,CAAaE,UAAd,CAAV;AACAhC,QAAAA,iBAAiB,CAAC,QAAD,CAAjB;AACD,OAJD,MAKK,IAAI6B,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EACL;AACEjC,QAAAA,UAAU,CAAC+B,GAAG,CAACC,QAAJ,CAAaE,UAAd,EAA0B,0BAA1B,CAAV;AACAhC,QAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACD,OAJI,MAML;AACEF,QAAAA,UAAU,CAAC+B,GAAG,CAACC,QAAJ,CAAaE,UAAd,CAAV;AACAhC,QAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACD;;AACDE,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD,KAlCD,SAmCO;AACLE,MAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,UAAGc,iBAAH,EAAqB;AACnB1B,QAAAA,QAAQ,GADW,CACR;AACZ;AACF;AACF,GAlDD;;AAoDA,sBACE;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,KAAK,EAAEyC,WAAhC;AAAA,iBACKpC,OAAO,gBAAG,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEE,cAAhB;AAAA,kBAAkCF;AAAlC;AAAA;AAAA;AAAA;AAAA,cAAH,GAAwD,IADpE,EAEKI,gBAAgB,KAAK,GAArB,gBAA2B,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3B,GAA6F,IAFlG,eAII;AAAM,QAAA,QAAQ,EAAET,QAAhB;AAA0B,QAAA,KAAK,EAAE;AAAC0C,UAAAA,SAAS,EAAC;AAAX,SAAjC;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,kCACI;AACA,YAAA,IAAI,EAAC,MADL;AAEA,YAAA,SAAS,EAAC,mBAFV;AAGA,YAAA,IAAI,EAAC,IAHL;AAIA,YAAA,EAAE,EAAC,YAJH;AAKA,YAAA,QAAQ,EAAE7B;AALV;AAAA;AAAA;AAAA;AAAA,kBADJ,eAQI;AAAO,YAAA,SAAS,EAAC,mBAAjB;AAAqC,YAAA,OAAO,EAAC,YAA7C;AAAA,uBACCV,QADD,oBACW,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,oBADX;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAcA,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAEwC,YAAAA,OAAO,EAAE,MAAX;AAAmBC,YAAAA,UAAU,EAAE;AAA/B,WAAT;AAAA,kCACE,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE;AAAEC,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,EAAE,EAAE;AAArB,aAAT;AAAA,mCACE,QAAC,cAAD;AAAgB,cAAA,KAAK,EAAC,SAAtB;AAAgC,cAAA,OAAO,EAAC,aAAxC;AAAsD,cAAA,KAAK,EAAErC;AAA7D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE;AAAEsC,cAAAA,QAAQ,EAAE;AAAZ,aAAT;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,KAAK,EAAC,SAAlB;AAAA,qCAA6B;AAAA,0BAAU,GAAEtC,gBAAiB;AAA7B;AAAA;AAAA;AAAA;AAAA;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdA,eAuBE,QAAC,aAAD;AACE,UAAA,OAAO,EAAES,YADX;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,OAAO,EAAEP,WAHX;AAIE,UAAA,eAAe,EAAC,OAJlB;AAKE,UAAA,KAAK,EAAC,SALR;AAAA,kCAOE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,kBAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF,eASE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADF;AA6CD,CA9GD;;GAAMb,U;;KAAAA,U;AAgHN,MAAM2C,WAAW,GAAG;AAClB7C,EAAAA,KAAK,EAAE,OADW;AAElBoD,EAAAA,OAAO,EAAE,MAFS;AAGlBC,EAAAA,UAAU,EAAE,eAHM;AAIlBC,EAAAA,QAAQ,EAAC;AAJS,CAApB;AAOA,eAAepD,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Button from 'react-bootstrap/Button'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport Fab from '@mui/material/Fab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport UploadRoundedIcon from '@mui/icons-material/UploadRounded';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport FindInPageRoundedIcon from '@mui/icons-material/FindInPageRounded';\r\n\r\nimport { red } from '@mui/material/colors';\r\n\r\nconst color = red[500];\r\n\r\nconst inputText = 'Supports: xls, xlsx, xlsm, xlsb, odf, ods, odt'\r\n\r\nconst UploadFile = ({classifyingType, onSubmit}) => {\r\n  const [file, setFile] = useState('');\r\n  const [filename, setFilename] = useState(inputText);\r\n  const [message, setMessage] = useState('');\r\n  const [messageVariant, setMessageVariant] = useState('');\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const [showSpinner, setShowSpinner] = useState(false)\r\n\r\n  const onChange = e => {\r\n    setFile(e.target.files[0]);\r\n    setFilename(e.target.files[0].name);\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    console.log(\"classifyingType:\", classifyingType)\r\n    let url = (classifyingType === \"Text\" ? '/classifyText' : 'classifyFeatures')\r\n    setShowSpinner(true)\r\n\r\n    var fileUploadSuccess = true\r\n    try {\r\n      const res = await axios.post(url, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: progressEvent => {\r\n          setUploadPercentage(Math.round((progressEvent.loaded * 100) / progressEvent.total));\r\n        }\r\n      });\r\n      setTimeout(() => setUploadPercentage(0),3000);\r\n      setTimeout(() => setMessage(''), 3000);\r\n\r\n      setMessage('Model trained successfully')\r\n      setMessageVariant('success')\r\n    } \r\n    catch (err) \r\n    {\r\n      fileUploadSuccess = false\r\n      if (err.response.status === 500)\r\n      {\r\n        setMessage(err.response.statusText)\r\n        setMessageVariant('danger')\r\n      }\r\n      else if (err.response.status === 400)\r\n      {\r\n        setMessage(err.response.statusText, \"Only Excel file allowed.\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else \r\n      {\r\n        setMessage(err.response.statusText);\r\n        setMessageVariant('info')\r\n      }\r\n      setUploadPercentage(0)\r\n    }\r\n    finally{\r\n      setShowSpinner(false)\r\n      if(fileUploadSuccess){\r\n        onSubmit() //to outside scope\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <div className='mx-auto' style={uploadStyle}>\r\n            {message ? <Alert variant={messageVariant} >{message}</Alert> : null}\r\n            {uploadPercentage === 100 ? <Alert variant='info' >File uploaded, Training model...</Alert> : null}\r\n\r\n            <form onSubmit={onSubmit} style={{textAlign:'center'}} >\r\n            <div className='custom-file mb-'>\r\n                <input\r\n                type='file'\r\n                className='custom-file-input'\r\n                size=\"lg\"\r\n                id='customFile'\r\n                onChange={onChange}\r\n                />\r\n                <label className='custom-file-label' htmlFor='customFile'>\r\n                {filename} <FindInPageRoundedIcon/>\r\n                </label>\r\n            </div>\r\n\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Box sx={{ width: '100%', mr: 1}}>\r\n                <LinearProgress color=\"warning\" variant=\"determinate\" value={uploadPercentage} />\r\n              </Box>\r\n              <Box sx={{ minWidth: 35 }}>\r\n                <Typography color=\"#f57c00\" ><strong>{`${uploadPercentage}%`}</strong></Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n              <LoadingButton\r\n                onClick={handleSubmit}\r\n                size=\"small\"\r\n                loading={showSpinner}\r\n                loadingPosition=\"start\"\r\n                color=\"warning\"\r\n              >\r\n                <UploadRoundedIcon/>\r\n                <strong>Upload</strong>\r\n                <UploadRoundedIcon/>\r\n              </LoadingButton>\r\n            \r\n            </form>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst uploadStyle = {\r\n  color: 'black',\r\n  padding: \"2rem\",\r\n  fontFamily: 'Calibri light',\r\n  fontSize:'1rem'\r\n};\r\n\r\nexport default UploadFile;"]},"metadata":{},"sourceType":"module"}