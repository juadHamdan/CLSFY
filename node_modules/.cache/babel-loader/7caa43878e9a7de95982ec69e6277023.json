{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleTextDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleTextDataToPredict = ({\n  onSubmit\n}) => {\n  _s();\n\n  const [value, setValue] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleSubmit = () => {\n    if (value === null || value === \"\") {\n      setError(true);\n      setErrorMessage(\"Empty Text\");\n      return;\n    }\n\n    setTextValueError(false);\n    onSubmit({\n      Text: value\n    });\n  };\n\n  const handleTextChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    /*#__PURE__*/\n    //maxWidth='md' sx={{width: \"90%\"}}\n    _jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        error: error,\n        multiline: true,\n        rows: 5,\n        fullWidth: true,\n        label: \"Text\",\n        helperText: errorMessage,\n        onChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleTextDataToPredict, \"y39Z/KmG6PmvIwPj3MBT53aF/Rw=\");\n\n_c = HandleTextDataToPredict;\nexport default HandleTextDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleTextDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleTextDataToPredict.js"],"names":["React","useState","Button","Box","TextField","Grid","Container","HandleTextDataToPredict","onSubmit","value","setValue","errorMessage","setErrorMessage","error","setError","handleSubmit","setTextValueError","Text","handleTextChange","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMc,YAAY,GAAG,MAAM;AACvB,QAAGN,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAA/B,EACA;AACIK,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,eAAe,CAAC,YAAD,CAAf;AACA;AACH;;AACDI,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAR,IAAAA,QAAQ,CAAC;AAACS,MAAAA,IAAI,EAAER;AAAP,KAAD,CAAR;AACH,GATD;;AAWA,QAAMS,gBAAgB,GAAGC,CAAC,IAAI;AAC1BT,IAAAA,QAAQ,CAACS,CAAC,CAACC,MAAF,CAASX,KAAV,CAAR;AACH,GAFD;;AAIA;AAAA;AACI;AACA,YAAC,SAAD;AAAA,8BACI,QAAC,SAAD;AACI,QAAA,KAAK,EAAII,KADb;AAEI,QAAA,SAAS,MAFb;AAGI,QAAA,IAAI,EAAE,CAHV;AAII,QAAA,SAAS,MAJb;AAKI,QAAA,KAAK,EAAC,MALV;AAMI,QAAA,UAAU,EAAEF,YANhB;AAOI,QAAA,QAAQ,EAAEO;AAPd;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAeH,CAnCD;;GAAMR,uB;;KAAAA,uB;AAqCN,eAAeA,uBAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleTextDataToPredict = ({onSubmit}) => {\r\n    const [value, setValue] = useState(null)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        if(value === null || value === \"\")\r\n        {\r\n            setError(true)\r\n            setErrorMessage(\"Empty Text\")\r\n            return\r\n        }\r\n        setTextValueError(false)\r\n        onSubmit({Text: value})\r\n    }\r\n\r\n    const handleTextChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        //maxWidth='md' sx={{width: \"90%\"}}\r\n        <Container> \r\n            <TextField\r\n                error = {error}\r\n                multiline\r\n                rows={5}\r\n                fullWidth \r\n                label=\"Text\"\r\n                helperText={errorMessage}\r\n                onChange={handleTextChange}\r\n            />\r\n            <Button onClick={handleSubmit}>click</Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleTextDataToPredict"]},"metadata":{},"sourceType":"module"}