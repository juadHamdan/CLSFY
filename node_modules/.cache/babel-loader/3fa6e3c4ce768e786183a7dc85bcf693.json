{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport AppBar from './components/AppBar';\nimport About from './components/About';\nimport AppStepper from './components/AppStepper';\nimport HandleFile from './components/file_handling/HandleFile';\nimport ModelsCards from './components/ModelsCards';\nimport ScoresAndStats from './components/scores_and_stats/ScoresAndStats';\nimport HandleDataToPredict from './components/handle_data_to_predict/HandleDataToPredict';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextString = \"Text\";\nconst FeaturesString = \"Features\";\nconst firstColor = \"#ffcc80\";\nconst secondColor = \"#80cbc4\";\n\nconst scrollToRef = ref => ref.current.scrollIntoView({\n  behavior: 'smooth',\n  block: 'center'\n});\n\nfunction App() {\n  _s();\n\n  const [themeColor, setThemeColor] = useState(firstColor);\n  const [classifyingType, setClassifyingType] = useState(TextString);\n  const [accuracy, setAccuracy] = useState(0);\n  const [user, setUser] = useState(null);\n  const [uid, setUid] = useState(0); //\n\n  const [features, setFeatures] = useState({});\n  const [modelId, setModelId] = useState(null);\n  const [modelsData, setModelsData] = useState(null);\n  const [mandatoryCourses, setMandatoryCourses] = useState(null);\n  const [electiveCourses, setElectiveCourses] = useState(null);\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false);\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([]);\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([]);\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n     const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n  /*\n    const checkUserCoursesExists = async (uid) => {\n      var url = '/checkUserCourses/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database courses exists\n      {\n        console.log('User have courses.')\n        return true\n      }\n      if(res.status === 400)\n      {\n        return false\n      }\n    }\n  \n    const checkUserSchedulerDataExists = async (uid) => {\n      var url = '/checkUserScheduleData/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database exists\n      {\n        console.log('User have scheduler data.')\n        return true\n      }\n      else\n      {\n        return false\n      }\n    }\n  \n    const checkSharedSchedulersDataExists = async (uid) => {\n      var url = '/checkSharedScheduleData/' + uid\n      const res = await fetch(url)\n      if(res.status === 200) //user database exists\n      {\n        console.log('Shared scheduler data to user.')\n        return true\n      }\n      else\n      {\n        return false\n      }\n    }\n  \n    //fetch from user database courses\n    const fetchUserMandadtoryCourses = async (uid) => {\n      var url = '/mandatoryCourses/' + uid \n      const res = await fetch(url)\n      const data = await res.json()\n      console.log(\"user mandatory courses: \", data.mandatoryCourses)\n      setMandatoryCourses(data.mandatoryCourses)\n    }\n    const fetchUserElectiveCourses = async (uid) => {\n      var url = '/electiveCourses/' + uid \n      const res = await fetch(url)\n      const data = await res.json()\n      console.log(\"user elective courses: \", data.electiveCourses)\n      setElectiveCourses(data.electiveCourses)\n    }\n    const fetchSharedSchedulers = async (uid) => {\n      var url = '/sharedSchedulersData/' + uid \n      const schedulersDataRes = await fetch(url)\n      const schedulersData = await schedulersDataRes.json()\n      console.log(\"shared schedulers2: \", Object.values(schedulersData))\n      setSharedSchedulersData(Object.values(schedulersData))\n    }\n  \n    //fetch from newsletter database courses\n    const fetchMCourses = async () => {\n      const url = '/mandatoryCourses'\n      const res = await fetch(url)\n      const data = await res.json()\n      // init: adding needed fields to each object\n      const result = data.mandatoryCourses.map((v, index) => ({...v,\n          done: false,\n          id: index,\n  \t\t    courseType: 'Mandatory'\n      }));\n      console.log(\"Mandatory Courses: \", result)\n      setMandatoryCourses(result)\n      return result\n    }\n  \n    const fetchECourses = async () => {\n      var url = '/electiveCourses'\n      const res = await fetch(url)\n      const data = await res.json()\n      //adding needed fields to each object\n      const result = data.electiveCourses.map((v, index) => ({...v,\n          done: false,\n          id: index,\n  \t\t    courseType: 'Elective'\n      }));\n      console.log(\"Elective Courses: \", result)\n      setElectiveCourses(result)\n    }\n  \n    const updateUserDatabase = async () => {\n      const url = '/updateUserDatabase/' + user.uid\n      axios({\n        method: 'post',\n        url: url,\n        data: {\n          mandatoryCourses: {mandatoryCourses},\n          electiveCourses: {electiveCourses}\n        }\n      });\n    }\n    /*\n    const handleFileSubmit = async (formYear, formSemester) => {\n      //e.preventDefault()\n      year = formYear\n      semester = formSemester\n      var mandatoryCourses_ = await fetchMCourses()\n      await fetchECourses()\n      defaultCheckDoneCourses(mandatoryCourses_)\n      setShowKey('select')\n    }\n    */\n\n  const fetchModelsData = async uid => {\n    const url = 'models-data/' + uid;\n\n    try {\n      const res = await axios({\n        method: 'get',\n        url: url\n      });\n      console.log(res.data); //onModelSelection(objectId)\n    } catch (err) {\n      if (err.response.status === 500) {//setMessage(err.response.statusText)\n      } else if (err.response.status === 400) {//setMessage(err.response.statusText, \"Only Excel file allowed.\")\n      } else {}\n    }\n  };\n\n  const onLogin = async userFromLogin => {\n    setUser(userFromLogin);\n    setUid(userFromLogin.uid);\n    fetchModelsData(userFromLogin.uid);\n    /*\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    if(userHaveSharedSchedulersData_)\n      await fetchSharedSchedulers(uid)\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    */\n  };\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\");\n    setUser(null);\n  };\n\n  const onPredictFormSumbit = async dataToPredict => {\n    console.log(dataToPredict); //predictFeatures(dataToPredict)\n    //send to \n  };\n\n  const onPredictFileSubmit = dataToPredict => {\n    console.log(dataToPredict);\n  }; //TODO: extract scores and stats data\n\n\n  const onFileSubmit = async data => {\n    setModelId(data['file_id']);\n    setFeatures(data['features']);\n    setAccuracy(data['report']['accuracy']); //set confusion matrix and f1 scores\n\n    /*\n    for (let key in data)\n    {\n      console.log(typeof data[key])\n      if(typeof data[key] === Object)\n        for (let innerKey in data[key])\n          console.log(data[key][innerKey])\n      else\n        console.log(key + \": \" + data[key])\n    }\n    */\n  };\n\n  const handleSwitch = SwitchTextString => {\n    setClassifyingType(SwitchTextString);\n    if (themeColor === firstColor) setThemeColor(secondColor);else setThemeColor(firstColor);\n    console.log(SwitchTextString);\n  };\n\n  const startRef = useRef(null);\n\n  const executeUploadScroll = () => scrollToRef(startRef);\n\n  const testButtonClick = async () => {\n    const url = 'models-data/1';\n    const res = await axios({\n      method: 'get',\n      url: url\n    });\n    console.log(res.data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'Calibri'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      sx: {\n        width: \"90%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        user: user,\n        handleLogin: onLogin,\n        handleLogout: onLogout,\n        handleStartClick: executeUploadScroll\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(About, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: testButtonClick,\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), modelsData ? /*#__PURE__*/_jsxDEV(ModelsCards\n      /*modelsData={modelsData}*/\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 22\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waves\",\n      role: \"presentation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-bottom\",\n      ref: startRef,\n      style: {\n        color: themeColor\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppStepper, {\n        firstStepComponent: /*#__PURE__*/_jsxDEV(HandleFile, {\n          uid: uid,\n          onFileSubmit: onFileSubmit,\n          handleSwitch: handleSwitch,\n          classifyingType: classifyingType,\n          themeColor: themeColor,\n          firstColor: firstColor,\n          secondColor: secondColor,\n          TextString: TextString,\n          FeaturesString: FeaturesString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this),\n        secondStepComponent: /*#__PURE__*/_jsxDEV(ScoresAndStats, {\n          accuracy: accuracy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this),\n        thirdStepComponent: /*#__PURE__*/_jsxDEV(HandleDataToPredict, {\n          uid: uid,\n          classifyingType: classifyingType,\n          features: features,\n          onPredictFormSumbit: onPredictFormSumbit,\n          onPredictFileSubmit: onPredictFileSubmit,\n          modelId: modelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 300\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uuRS8VFmYwTp2B9ApQnHeGLGRpo=\");\n\n_c = App;\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n  direction: 'rtl',\n  TextStringAlign: 'right'\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/CLSFY/src/App.js"],"names":["React","useState","useEffect","useRef","axios","AppBar","About","AppStepper","HandleFile","ModelsCards","ScoresAndStats","HandleDataToPredict","Container","TextString","FeaturesString","firstColor","secondColor","scrollToRef","ref","current","scrollIntoView","behavior","block","App","themeColor","setThemeColor","classifyingType","setClassifyingType","accuracy","setAccuracy","user","setUser","uid","setUid","features","setFeatures","modelId","setModelId","modelsData","setModelsData","mandatoryCourses","setMandatoryCourses","electiveCourses","setElectiveCourses","userHaveSchedulerData","setUserHaveSchedulerData","publishedSchedulersData","setPublishedSchedulersData","sharedSchedulersData","setSharedSchedulersData","fetchModelsData","url","res","method","console","log","data","err","response","status","onLogin","userFromLogin","onLogout","onPredictFormSumbit","dataToPredict","onPredictFileSubmit","onFileSubmit","handleSwitch","SwitchTextString","startRef","executeUploadScroll","testButtonClick","fontFamily","width","color","height","appStyle","backgroundColor","direction","TextStringAlign"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAsB,yBAAtB;AAEA,OAAOC,UAAP,MAAsB,uCAAtB;AACA,OAAOC,WAAP,MAAuB,0BAAvB;AACA,OAAOC,cAAP,MAA0B,8CAA1B;AACA,OAAOC,mBAAP,MAA+B,yDAA/B;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;AAGA,MAAMC,UAAU,GAAG,MAAnB;AACA,MAAMC,cAAc,GAAG,UAAvB;AAEA,MAAMC,UAAU,GAAG,SAAnB;AACA,MAAMC,WAAW,GAAG,SAApB;;AAEA,MAAMC,WAAW,GAAIC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAYC,cAAZ,CAA2B;AAAEC,EAAAA,QAAQ,EAAE,QAAZ;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAA3B,CAA7B;;AAEA,SAASC,GAAT,GACA;AAAA;;AACE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAACc,UAAD,CAA5C;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwC1B,QAAQ,CAACY,UAAD,CAAtD;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAAC6B,IAAD,EAAOC,OAAP,IAAkB9B,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAAC+B,GAAD,EAAMC,MAAN,IAAgBhC,QAAQ,CAAC,CAAD,CAA9B,CALF,CAKoC;;AAClC,QAAM,CAACiC,QAAD,EAAWC,WAAX,IAA0BlC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACqC,UAAD,EAAaC,aAAb,IAA8BtC,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAM,CAACuC,gBAAD,EAAmBC,mBAAnB,IAA0CxC,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACyC,eAAD,EAAkBC,kBAAlB,IAAwC1C,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC2C,qBAAD,EAAwBC,wBAAxB,IAAoD5C,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAAC6C,uBAAD,EAA0BC,0BAA1B,IAAwD9C,QAAQ,CAAC,EAAD,CAAtE;AACA,QAAM,CAAC+C,oBAAD,EAAuBC,uBAAvB,IAAkDhD,QAAQ,CAAC,EAAD,CAAhE;AAGAC,EAAAA,SAAS,CAAC,YAAY;AACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG,GAZQ,EAYN,EAZM,CAAT;AAagD,eAAe,GAAG,MAAOlB,GAAP,IAAe;AACrC,UAAMmB,GAAG,GAAG,iBAAiBnB,GAA7B;;AACA,QAAI;AACA,YAAMoB,GAAG,GAAG,MAAMhD,KAAK,CAAC;AACpBiD,QAAAA,MAAM,EAAE,KADY;AAEpBF,QAAAA,GAAG,EAAEA;AAFe,OAAD,CAAvB;AAIAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB,EALA,CAMA;AACD,KAPH,CAQE,OAAOC,GAAP,EACA;AACE,UAAIA,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EACA,CACE;AACD,OAHD,MAIK,IAAIF,GAAG,CAACC,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EACL,CACE;AACD,OAHI,MAKL,CACC;AACF;AACN,GAxBC;;AA0BA,QAAMC,OAAO,GAAG,MAAOC,aAAP,IAAyB;AACvC9B,IAAAA,OAAO,CAAC8B,aAAD,CAAP;AAEA5B,IAAAA,MAAM,CAAC4B,aAAa,CAAC7B,GAAf,CAAN;AACAkB,IAAAA,eAAe,CAACW,aAAa,CAAC7B,GAAf,CAAf;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAzBD;;AA2BA,QAAM8B,QAAQ,GAAG,MAAM;AACrBR,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAxB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,QAAMgC,mBAAmB,GAAG,MAAOC,aAAP,IAAyB;AACnDV,IAAAA,OAAO,CAACC,GAAR,CAAYS,aAAZ,EADmD,CAEnD;AACA;AACD,GAJD;;AAMA,QAAMC,mBAAmB,GAAID,aAAD,IAAmB;AAC7CV,IAAAA,OAAO,CAACC,GAAR,CAAYS,aAAZ;AACD,GAFD,CArNF,CAyNE;;;AACA,QAAME,YAAY,GAAG,MAAOV,IAAP,IAAgB;AACnCnB,IAAAA,UAAU,CAACmB,IAAI,CAAC,SAAD,CAAL,CAAV;AACArB,IAAAA,WAAW,CAACqB,IAAI,CAAC,UAAD,CAAL,CAAX;AACA3B,IAAAA,WAAW,CAAC2B,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,CAAD,CAAX,CAHmC,CAKnC;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAjBD;;AAmBA,QAAMW,YAAY,GAAIC,gBAAD,IAAsB;AACzCzC,IAAAA,kBAAkB,CAACyC,gBAAD,CAAlB;AACA,QAAG5C,UAAU,KAAKT,UAAlB,EACEU,aAAa,CAACT,WAAD,CAAb,CADF,KAGES,aAAa,CAACV,UAAD,CAAb;AACFuC,IAAAA,OAAO,CAACC,GAAR,CAAYa,gBAAZ;AACD,GAPD;;AASA,QAAMC,QAAQ,GAAGlE,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAMmE,mBAAmB,GAAG,MAAMrD,WAAW,CAACoD,QAAD,CAA7C;;AAEA,QAAME,eAAe,GAAG,YAAY;AAClC,UAAMpB,GAAG,GAAG,eAAZ;AAEA,UAAMC,GAAG,GAAG,MAAMhD,KAAK,CAAC;AACtBiD,MAAAA,MAAM,EAAE,KADc;AAEtBF,MAAAA,GAAG,EAAEA;AAFiB,KAAD,CAAvB;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACgB,MAAAA,UAAU,EAAE;AAAb,KAAZ;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAf;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAE3C,IADR;AAEE,QAAA,WAAW,EAAE8B,OAFf;AAGE,QAAA,YAAY,EAAEE,QAHhB;AAIE,QAAA,gBAAgB,EAAEQ;AAJpB;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA;AAAA;AAAA;AAAA,cAPF,eAOO;AAAA;AAAA;AAAA;AAAA,cAPP,eAOY;AAAA;AAAA;AAAA;AAAA,cAPZ,eAOiB;AAAA;AAAA;AAAA;AAAA,cAPjB,eAOsB;AAAA;AAAA;AAAA;AAAA,cAPtB,eAQE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAExC;AAAb;AAAA;AAAA;AAAA;AAAA,cARF,eASE;AAAQ,QAAA,OAAO,EAAEyC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAA;AAAA;AAAA;AAAA,cAVF,EAWGjC,UAAU,gBAAE,QAAC;AAAY;AAAb;AAAA;AAAA;AAAA;AAAA,cAAF,GAAgD,IAX7D;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAiBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,GAAG,EAAE+B,QAArC;AAA+C,MAAA,KAAK,EAAE;AAACK,QAAAA,KAAK,EAAElD;AAAR,OAAtD;AAAA,8BAGE,QAAC,UAAD;AACE,QAAA,kBAAkB,eAChB,QAAC,UAAD;AACE,UAAA,GAAG,EAAEQ,GADP;AAEE,UAAA,YAAY,EAAEkC,YAFhB;AAGE,UAAA,YAAY,EAAEC,YAHhB;AAIE,UAAA,eAAe,EAAEzC,eAJnB;AAKE,UAAA,UAAU,EAAEF,UALd;AAME,UAAA,UAAU,EAAET,UANd;AAOE,UAAA,WAAW,EAAEC,WAPf;AAQE,UAAA,UAAU,EAAEH,UARd;AASE,UAAA,cAAc,EAAEC;AATlB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAaE,QAAA,mBAAmB,eACjB,QAAC,cAAD;AACE,UAAA,QAAQ,EAAEc;AADZ;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAiBE,QAAA,kBAAkB,eAChB,QAAC,mBAAD;AACE,UAAA,GAAG,EAAEI,GADP;AAEE,UAAA,eAAe,EAAEN,eAFnB;AAGE,UAAA,QAAQ,EAAEQ,QAHZ;AAIE,UAAA,mBAAmB,EAAE6B,mBAJvB;AAKE,UAAA,mBAAmB,EAAEE,mBALvB;AAME,UAAA,OAAO,EAAE7B;AANX;AAAA;AAAA;AAAA;AAAA;AAlBJ;AAAA;AAAA;AAAA;AAAA,cAHF,eA8BE;AAAK,QAAA,KAAK,EAAE;AAAEuC,UAAAA,MAAM,EAAE;AAAV;AAAZ;AAAA;AAAA;AAAA;AAAA,cA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAxTQpD,G;;KAAAA,G;AA0TT,MAAMqD,QAAQ,GACd;AACEC,EAAAA,eAAe,EAAE,MADnB;AAEEH,EAAAA,KAAK,EAAE,OAFT;AAGCI,EAAAA,SAAS,EAAE,KAHZ;AAICC,EAAAA,eAAe,EAAE;AAJlB,CADA;AAQA,eAAexD,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react'\nimport axios from 'axios';\nimport AppBar from'./components/AppBar'\nimport About from'./components/About'\nimport AppStepper from'./components/AppStepper'\n\nimport HandleFile from'./components/file_handling/HandleFile'\nimport ModelsCards from'./components/ModelsCards'\nimport ScoresAndStats from'./components/scores_and_stats/ScoresAndStats'\nimport HandleDataToPredict from'./components/handle_data_to_predict/HandleDataToPredict'\n\nimport Container from '@mui/material/Container';\n\n\nconst TextString = \"Text\"\nconst FeaturesString = \"Features\"\n\nconst firstColor = \"#ffcc80\"\nconst secondColor = \"#80cbc4\"\n\nconst scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\nfunction App()\n{\n  const [themeColor, setThemeColor] = useState(firstColor)  \n  const [classifyingType, setClassifyingType] = useState(TextString)\n  const [accuracy, setAccuracy] = useState(0)\n  const [user, setUser] = useState(null)\n  const [uid, setUid] = useState(0) //\n  const [features, setFeatures] = useState({})\n  const [modelId, setModelId] = useState(null)\n  const [modelsData, setModelsData] = useState(null)\n\n  const [mandatoryCourses, setMandatoryCourses] = useState(null)\n  const [electiveCourses, setElectiveCourses] = useState(null)\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false)\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([])\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([])\n\n\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n\n    const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n/*\n  const checkUserCoursesExists = async (uid) => {\n    var url = '/checkUserCourses/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database courses exists\n    {\n      console.log('User have courses.')\n      return true\n    }\n    if(res.status === 400)\n    {\n      return false\n    }\n  }\n\n  const checkUserSchedulerDataExists = async (uid) => {\n    var url = '/checkUserScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('User have scheduler data.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  const checkSharedSchedulersDataExists = async (uid) => {\n    var url = '/checkSharedScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('Shared scheduler data to user.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  //fetch from user database courses\n  const fetchUserMandadtoryCourses = async (uid) => {\n    var url = '/mandatoryCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user mandatory courses: \", data.mandatoryCourses)\n    setMandatoryCourses(data.mandatoryCourses)\n  }\n  const fetchUserElectiveCourses = async (uid) => {\n    var url = '/electiveCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user elective courses: \", data.electiveCourses)\n    setElectiveCourses(data.electiveCourses)\n  }\n  const fetchSharedSchedulers = async (uid) => {\n    var url = '/sharedSchedulersData/' + uid \n    const schedulersDataRes = await fetch(url)\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"shared schedulers2: \", Object.values(schedulersData))\n    setSharedSchedulersData(Object.values(schedulersData))\n  }\n\n  //fetch from newsletter database courses\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    // init: adding needed fields to each object\n    const result = data.mandatoryCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result)\n    setMandatoryCourses(result)\n    return result\n  }\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    //adding needed fields to each object\n    const result = data.electiveCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result)\n    setElectiveCourses(result)\n  }\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {mandatoryCourses},\n        electiveCourses: {electiveCourses}\n      }\n    });\n  }\n  /*\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear\n    semester = formSemester\n    var mandatoryCourses_ = await fetchMCourses()\n    await fetchECourses()\n    defaultCheckDoneCourses(mandatoryCourses_)\n    setShowKey('select')\n  }\n  */\n\n  const fetchModelsData = async (uid) => {\n    const url = 'models-data/' + uid\n    try {\n        const res = await axios({\n            method: 'get',\n            url: url\n        });\n        console.log(res.data)\n        //onModelSelection(objectId)\n      } \n      catch (err) \n      {\n        if (err.response.status === 500)\n        {\n          //setMessage(err.response.statusText)\n        }\n        else if (err.response.status === 400)\n        {\n          //setMessage(err.response.statusText, \"Only Excel file allowed.\")\n        }\n        else \n        {\n        }\n      }\n}\n\n  const onLogin = async (userFromLogin) => {\n    setUser(userFromLogin)\n\n    setUid(userFromLogin.uid)\n    fetchModelsData(userFromLogin.uid)\n\n    \n\n    /*\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    if(userHaveSharedSchedulersData_)\n      await fetchSharedSchedulers(uid)\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    */\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n    setUser(null)\n  }\n\n  const onPredictFormSumbit = async (dataToPredict) => {\n    console.log(dataToPredict)\n    //predictFeatures(dataToPredict)\n    //send to \n  }\n\n  const onPredictFileSubmit = (dataToPredict) => {\n    console.log(dataToPredict)\n  }\n\n  //TODO: extract scores and stats data\n  const onFileSubmit = async (data) => {\n    setModelId(data['file_id'])\n    setFeatures(data['features'])\n    setAccuracy(data['report']['accuracy'])\n\n    //set confusion matrix and f1 scores\n    /*\n    for (let key in data)\n    {\n      console.log(typeof data[key])\n      if(typeof data[key] === Object)\n        for (let innerKey in data[key])\n          console.log(data[key][innerKey])\n      else\n        console.log(key + \": \" + data[key])\n    }\n    */\n  }\n\n  const handleSwitch = (SwitchTextString) => {\n    setClassifyingType(SwitchTextString)\n    if(themeColor === firstColor)\n      setThemeColor(secondColor)\n    else\n      setThemeColor(firstColor)\n    console.log(SwitchTextString)\n  }\n\n  const startRef = useRef(null)\n  const executeUploadScroll = () => scrollToRef(startRef)\n\n  const testButtonClick = async () => {\n    const url = 'models-data/1'\n\n    const res = await axios({\n      method: 'get',\n      url: url\n    });\n    console.log(res.data)\n  }\n\n  return ( \n    <div style={{fontFamily: 'Calibri'}}>\n      <Container sx={{width: \"90%\"}}>\n        <AppBar\n          user={user} \n          handleLogin={onLogin} \n          handleLogout={onLogout}\n          handleStartClick={executeUploadScroll}\n        />\n        <br/><br/><br/><br/><br/>\n        <About user={user}/>\n        <button onClick={testButtonClick}>Test</button>\n        <br/>\n        {modelsData? <ModelsCards /*modelsData={modelsData}*/ /> : null}\n\n      </Container>\n\n        <div className=\"waves\" role=\"presentation\"></div>\n        <div className=\"content-bottom\" ref={startRef} style={{color: themeColor}}>\n\n\n          <AppStepper\n            firstStepComponent={\n              <HandleFile \n                uid={uid}\n                onFileSubmit={onFileSubmit}\n                handleSwitch={handleSwitch}\n                classifyingType={classifyingType}\n                themeColor={themeColor}\n                firstColor={firstColor}\n                secondColor={secondColor}\n                TextString={TextString}\n                FeaturesString={FeaturesString}\n              />}\n            secondStepComponent={\n              <ScoresAndStats \n                accuracy={accuracy}\n              />}\n            thirdStepComponent={\n              <HandleDataToPredict \n                uid={uid}\n                classifyingType={classifyingType}\n                features={features}\n                onPredictFormSumbit={onPredictFormSumbit}\n                onPredictFileSubmit={onPredictFileSubmit}\n                modelId={modelId}\n              />}\n          />\n          <div style={{ height: 300 }} />\n        </div>\n    </div>\n  );\n}\n\nconst appStyle = \n{\n  backgroundColor: '#444',\n  color: 'white',\n\tdirection: 'rtl',\n\tTextStringAlign: 'right',\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}