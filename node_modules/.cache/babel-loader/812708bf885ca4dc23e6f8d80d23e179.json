{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joad Hamdan\\\\Desktop\\\\Sadna2021\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport ScheduleCourses from './components/ScheduleCourses';\nimport UploadForm from './components/UploadForm';\nimport SelectDoneCourses from './components/SelectDoneCourses';\nimport axios from 'axios';\nimport Sidebar from \"./Sidebar\";\nimport Navbar from \"./Navbar\";\nimport Home from './components/Home';\nimport SharedSchedulers from './components/SharedSchedulers';\nimport AppBar from './components/AppBar';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst adminMail = 'sadna2021mta@gmail.com'; //default values to degree year and semester\n\nlet year = 1;\nlet semester = 1;\n\nfunction App() {\n  _s();\n\n  const [mandatoryCourses, setMandatoryCourses] = useState(null);\n  const [electiveCourses, setElectiveCourses] = useState(null);\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false);\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([]);\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([]);\n  const [user, setUser] = useState(null);\n  const [users, setUsers] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [showKey, setShowKey] = useState('home');\n  useEffect(async () => {\n    const schedulersDataRes = await fetch('/schedulersData');\n    const schedulersData = await schedulersDataRes.json();\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData));\n    setPublishedSchedulersData(Object.values(schedulersData));\n    const usersRes = await fetch('/getUsersInfo');\n    const usersData = await usersRes.json();\n    console.log(Object.values(usersData));\n    setUsers(Object.values(usersData));\n  }, []);\n\n  const checkUserCoursesExists = async uid => {\n    var url = '/checkUserCourses/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database courses exists\n      {\n        console.log('User have courses.');\n        return true;\n      }\n\n    if (res.status === 400) {\n      return false;\n    }\n  };\n\n  const checkUserSchedulerDataExists = async uid => {\n    var url = '/checkUserScheduleData/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database exists\n      {\n        console.log('User have scheduler data.');\n        return true;\n      } else {\n      return false;\n    }\n  };\n\n  const checkSharedSchedulersDataExists = async uid => {\n    var url = '/checkSharedScheduleData/' + uid;\n    const res = await fetch(url);\n\n    if (res.status === 200) //user database exists\n      {\n        console.log('Shared scheduler data to user.');\n        return true;\n      } else {\n      return false;\n    }\n  }; //fetch from user database courses\n\n\n  const fetchUserMandadtoryCourses = async uid => {\n    var url = '/mandatoryCourses/' + uid;\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(\"user mandatory courses: \", data.mandatoryCourses);\n    setMandatoryCourses(data.mandatoryCourses);\n  };\n\n  const fetchUserElectiveCourses = async uid => {\n    var url = '/electiveCourses/' + uid;\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(\"user elective courses: \", data.electiveCourses);\n    setElectiveCourses(data.electiveCourses);\n  };\n\n  const fetchSharedSchedulers = async uid => {\n    var url = '/sharedSchedulersData/' + uid;\n    const schedulersDataRes = await fetch(url);\n    const schedulersData = await schedulersDataRes.json();\n    console.log(\"shared schedulers2: \", Object.values(schedulersData));\n    setSharedSchedulersData(Object.values(schedulersData));\n  }; //fetch from newsletter database courses\n\n\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses';\n    const res = await fetch(url);\n    const data = await res.json(); // init: adding needed fields to each object\n\n    const result = data.mandatoryCourses.map((v, index) => ({ ...v,\n      done: false,\n      id: index,\n      courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result);\n    setMandatoryCourses(result);\n    return result;\n  };\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses';\n    const res = await fetch(url);\n    const data = await res.json(); //adding needed fields to each object\n\n    const result = data.electiveCourses.map((v, index) => ({ ...v,\n      done: false,\n      id: index,\n      courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result);\n    setElectiveCourses(result);\n  };\n\n  const defaultCheckDoneCourses = courses => {\n    courses === null || courses === void 0 ? void 0 : courses.map(course => {\n      if (course.year < year || course.year == year && (course.semesters[0] < semester || course.semesters.length === 2)) {\n        courses[course.id].done = true;\n        console.log(course.title + \" done.\");\n      }\n    });\n  };\n\n  const checkMandatoryCourse = (e, id) => {\n    mandatoryCourses[id].done = !mandatoryCourses[id].done;\n    console.log(mandatoryCourses[id].title + \": \" + mandatoryCourses[id].done);\n  };\n\n  const checkElectiveCourse = (e, id) => {\n    electiveCourses[id].done = !electiveCourses[id].done;\n    console.log(electiveCourses[id].title + \": \" + electiveCourses[id].done);\n  };\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid;\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {\n          mandatoryCourses\n        },\n        electiveCourses: {\n          electiveCourses\n        }\n      }\n    });\n  };\n\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear;\n    semester = formSemester;\n    var mandatoryCourses_ = await fetchMCourses();\n    await fetchECourses();\n    defaultCheckDoneCourses(mandatoryCourses_);\n    setShowKey('select');\n  };\n\n  const handleSelectCoursesSubmit = () => {\n    if (user != null) updateUserDatabase();\n    window.scrollTo(0, 0);\n    setShowKey('schedule');\n  };\n\n  const onLogin = async userFromLogin => {\n    const uid = userFromLogin.uid;\n    if (userFromLogin.email === adminMail) setIsAdmin(true);\n    setUser(userFromLogin);\n    const userHaveCourses = await checkUserCoursesExists(uid);\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid);\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid);\n    var KeyIsSet = false;\n\n    if (userHaveSharedSchedulersData_) {\n      setShowKey('share');\n      KeyIsSet = true;\n      await fetchSharedSchedulers(uid);\n    }\n\n    if (userHaveSchedulerData_ && userHaveCourses) {\n      if (!KeyIsSet) setShowKey('schedule');\n      setUserHaveSchedulerData(true);\n      await fetchUserMandadtoryCourses(uid);\n      await fetchUserElectiveCourses(uid);\n    } else if (userHaveCourses) {\n      if (!KeyIsSet) setShowKey('select');\n      await fetchUserMandadtoryCourses(uid);\n      await fetchUserElectiveCourses(uid);\n    } else if (!KeyIsSet) //user doesn't have any data\n      setShowKey('upload');\n  };\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\");\n    setIsAdmin(false);\n    setUser(null);\n    setMandatoryCourses(null); // delete later\n\n    setElectiveCourses(null); // delete later\n\n    setShowKey('home'); // delete later\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), \"AAAAAAAA\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3ZtGOodzOYHnaGiJNhzBlWS0cts=\");\n\n_c = App;\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n  direction: 'rtl',\n  textAlign: 'right'\n};\nconst navbarStyle = {\n  flex: \"1 1 auto\",\n  display: \"flex\",\n  flexFlow: \"column\",\n  height: \"100vh\",\n  overflowY: \"hidden\"\n};\nexport default App;\n/*\n\n    <div style={appStyle} className=\"dashboard d-flex\">\n      \n\t\t<Sidebar \n      activeKey={showKey}\n\t\t\thandleHomeClick={() => setShowKey('home')}\n\t\t\thandleUploadClick={() => setShowKey('upload')}\n\t\t\thandleSelectClick={() => setShowKey('select')}\n  \t\thandleScheduleClick={() => setShowKey('schedule')}\n      handleShareClick={() => setShowKey('share')}\n\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\telectiveCourses={electiveCourses}\n\t\t\tuser={user}\n\t\t\tisAdmin={isAdmin}\n\t\t\thandleLogin={onLogin}\n\t\t\thandleLogout={onLogout}\n\t\t/>\n\t\t<div style={navbarStyle}>\n\t\t\t<Navbar user={user}/>\n      <SharedSchedulers\n\t\t\t\tshow={showKey === 'share'}\n        sharedSchedulersData={sharedSchedulersData}\n        />\n\t\t\t<Home \n\t\t\t\tshow={showKey ===  'home'}\n        publishedSchedulersData={publishedSchedulersData}\n\t\t\t/>\t\n\t\t\t<UploadForm \n\t\t\t\tshow={showKey === 'upload'} \n\t\t\t\tonSubmit={handleFileSubmit}\n\t\t\t/>\n\t\t\t<SelectDoneCourses\n\t\t\t\tshow={showKey === 'select'}\n\t\t\t\tmandatoryCourses={mandatoryCourses} \n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tonMandatoryCourseChecked={checkMandatoryCourse} \n\t\t\t\tonElectiveCourseChecked={checkElectiveCourse} \n\t\t\t\tonSubmit={handleSelectCoursesSubmit}\n\t\t\t/>\n\t\t\t<ScheduleCourses \n\t\t\t\tshow={showKey === 'schedule'}\n        user={user}\n        users={users}\n        userHaveSchedulerData={userHaveSchedulerData}\n\t\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tyear={year} \n\t\t\t\tsemester={semester}\n        />\n\n\t\t</div>\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Joad Hamdan/Desktop/Sadna2021/src/App.js"],"names":["React","useState","useEffect","ScheduleCourses","UploadForm","SelectDoneCourses","axios","Sidebar","Navbar","Home","SharedSchedulers","AppBar","Container","adminMail","year","semester","App","mandatoryCourses","setMandatoryCourses","electiveCourses","setElectiveCourses","userHaveSchedulerData","setUserHaveSchedulerData","publishedSchedulersData","setPublishedSchedulersData","sharedSchedulersData","setSharedSchedulersData","user","setUser","users","setUsers","isAdmin","setIsAdmin","showKey","setShowKey","schedulersDataRes","fetch","schedulersData","json","console","log","Object","values","usersRes","usersData","checkUserCoursesExists","uid","url","res","status","checkUserSchedulerDataExists","checkSharedSchedulersDataExists","fetchUserMandadtoryCourses","data","fetchUserElectiveCourses","fetchSharedSchedulers","fetchMCourses","result","map","v","index","done","id","courseType","fetchECourses","defaultCheckDoneCourses","courses","course","semesters","length","title","checkMandatoryCourse","e","checkElectiveCourse","updateUserDatabase","method","handleFileSubmit","formYear","formSemester","mandatoryCourses_","handleSelectCoursesSubmit","window","scrollTo","onLogin","userFromLogin","email","userHaveCourses","userHaveSchedulerData_","userHaveSharedSchedulersData_","KeyIsSet","onLogout","appStyle","backgroundColor","color","direction","textAlign","navbarStyle","flex","display","flexFlow","height","overflowY"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,gBAAP,MAA4B,+BAA5B;AACA,OAAOC,MAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,SAAS,GAAG,wBAAlB,C,CACA;;AACA,IAAIC,IAAI,GAAG,CAAX;AACA,IAAIC,QAAQ,GAAG,CAAf;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACoB,qBAAD,EAAwBC,wBAAxB,IAAoDrB,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACsB,uBAAD,EAA0BC,0BAA1B,IAAwDvB,QAAQ,CAAC,EAAD,CAAtE;AACA,QAAM,CAACwB,oBAAD,EAAuBC,uBAAvB,IAAkDzB,QAAQ,CAAC,EAAD,CAAhE;AAEA,QAAM,CAAC0B,IAAD,EAAOC,OAAP,IAAkB3B,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAoB7B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,MAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMiC,iBAAiB,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAArC;AACA,UAAMC,cAAc,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,EAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,MAAM,CAACC,MAAP,CAAcL,cAAd,CAAtC;AACAb,IAAAA,0BAA0B,CAACiB,MAAM,CAACC,MAAP,CAAcL,cAAd,CAAD,CAA1B;AAEA,UAAMM,QAAQ,GAAG,MAAMP,KAAK,CAAC,eAAD,CAA5B;AACA,UAAMQ,SAAS,GAAG,MAAMD,QAAQ,CAACL,IAAT,EAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,MAAP,CAAcE,SAAd,CAAZ;AACAd,IAAAA,QAAQ,CAACW,MAAM,CAACC,MAAP,CAAcE,SAAd,CAAD,CAAR;AACD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMC,sBAAsB,GAAG,MAAOC,GAAP,IAAe;AAC5C,QAAIC,GAAG,GAAG,uBAAuBD,GAAjC;AACA,UAAME,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEV,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,eAAO,IAAP;AACD;;AACD,QAAGQ,GAAG,CAACC,MAAJ,KAAe,GAAlB,EACA;AACE,aAAO,KAAP;AACD;AACF,GAZD;;AAcA,QAAMC,4BAA4B,GAAG,MAAOJ,GAAP,IAAe;AAClD,QAAIC,GAAG,GAAG,4BAA4BD,GAAtC;AACA,UAAME,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEV,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,eAAO,IAAP;AACD,OAJD,MAMA;AACE,aAAO,KAAP;AACD;AACF,GAZD;;AAcA,QAAMW,+BAA+B,GAAG,MAAOL,GAAP,IAAe;AACrD,QAAIC,GAAG,GAAG,8BAA8BD,GAAxC;AACA,UAAME,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;;AACA,QAAGC,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACvB;AACEV,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA,eAAO,IAAP;AACD,OAJD,MAMA;AACE,aAAO,KAAP;AACD;AACF,GAZD,CArDY,CAmEZ;;;AACA,QAAMY,0BAA0B,GAAG,MAAON,GAAP,IAAe;AAChD,QAAIC,GAAG,GAAG,uBAAuBD,GAAjC;AACA,UAAME,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAML,GAAG,CAACV,IAAJ,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCa,IAAI,CAACpC,gBAA7C;AACAC,IAAAA,mBAAmB,CAACmC,IAAI,CAACpC,gBAAN,CAAnB;AACD,GAND;;AAOA,QAAMqC,wBAAwB,GAAG,MAAOR,GAAP,IAAe;AAC9C,QAAIC,GAAG,GAAG,sBAAsBD,GAAhC;AACA,UAAME,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAML,GAAG,CAACV,IAAJ,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCa,IAAI,CAAClC,eAA5C;AACAC,IAAAA,kBAAkB,CAACiC,IAAI,CAAClC,eAAN,CAAlB;AACD,GAND;;AAOA,QAAMoC,qBAAqB,GAAG,MAAOT,GAAP,IAAe;AAC3C,QAAIC,GAAG,GAAG,2BAA2BD,GAArC;AACA,UAAMX,iBAAiB,GAAG,MAAMC,KAAK,CAACW,GAAD,CAArC;AACA,UAAMV,cAAc,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,EAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,MAAM,CAACC,MAAP,CAAcL,cAAd,CAApC;AACAX,IAAAA,uBAAuB,CAACe,MAAM,CAACC,MAAP,CAAcL,cAAd,CAAD,CAAvB;AACD,GAND,CAlFY,CA0FZ;;;AACA,QAAMmB,aAAa,GAAG,YAAY;AAChC,UAAMT,GAAG,GAAG,mBAAZ;AACA,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAML,GAAG,CAACV,IAAJ,EAAnB,CAHgC,CAIhC;;AACA,UAAMmB,MAAM,GAAGJ,IAAI,CAACpC,gBAAL,CAAsByC,GAAtB,CAA0B,CAACC,CAAD,EAAIC,KAAJ,MAAe,EAAC,GAAGD,CAAJ;AACpDE,MAAAA,IAAI,EAAE,KAD8C;AAEpDC,MAAAA,EAAE,EAAEF,KAFgD;AAGtDG,MAAAA,UAAU,EAAE;AAH0C,KAAf,CAA1B,CAAf;AAKAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCiB,MAAnC;AACAvC,IAAAA,mBAAmB,CAACuC,MAAD,CAAnB;AACA,WAAOA,MAAP;AACD,GAbD;;AAeA,QAAMO,aAAa,GAAG,YAAY;AAChC,QAAIjB,GAAG,GAAG,kBAAV;AACA,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACW,GAAD,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAML,GAAG,CAACV,IAAJ,EAAnB,CAHgC,CAIhC;;AACA,UAAMmB,MAAM,GAAGJ,IAAI,CAAClC,eAAL,CAAqBuC,GAArB,CAAyB,CAACC,CAAD,EAAIC,KAAJ,MAAe,EAAC,GAAGD,CAAJ;AACnDE,MAAAA,IAAI,EAAE,KAD6C;AAEnDC,MAAAA,EAAE,EAAEF,KAF+C;AAGrDG,MAAAA,UAAU,EAAE;AAHyC,KAAf,CAAzB,CAAf;AAKAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCiB,MAAlC;AACArC,IAAAA,kBAAkB,CAACqC,MAAD,CAAlB;AACD,GAZD;;AAcA,QAAMQ,uBAAuB,GAAIC,OAAD,IAAa;AAC3CA,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAER,GAAT,CAAaS,MAAM,IAAI;AACrB,UAAGA,MAAM,CAACrD,IAAP,GAAcA,IAAd,IAAuBqD,MAAM,CAACrD,IAAP,IAAeA,IAAf,KAAwBqD,MAAM,CAACC,SAAP,CAAiB,CAAjB,IAAsBrD,QAAtB,IAAkCoD,MAAM,CAACC,SAAP,CAAiBC,MAAjB,KAA4B,CAAtF,CAA1B,EAAqH;AACnHH,QAAAA,OAAO,CAACC,MAAM,CAACL,EAAR,CAAP,CAAmBD,IAAnB,GAA0B,IAA1B;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY2B,MAAM,CAACG,KAAP,GAAe,QAA3B;AACD;AACF,KALD;AAMD,GAPD;;AASA,QAAMC,oBAAoB,GAAG,CAACC,CAAD,EAAIV,EAAJ,KAAW;AACtC7C,IAAAA,gBAAgB,CAAC6C,EAAD,CAAhB,CAAqBD,IAArB,GAA4B,CAAC5C,gBAAgB,CAAC6C,EAAD,CAAhB,CAAqBD,IAAlD;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,gBAAgB,CAAC6C,EAAD,CAAhB,CAAqBQ,KAArB,GAA6B,IAA7B,GAAoCrD,gBAAgB,CAAC6C,EAAD,CAAhB,CAAqBD,IAArE;AACD,GAHD;;AAIA,QAAMY,mBAAmB,GAAG,CAACD,CAAD,EAAIV,EAAJ,KAAW;AACrC3C,IAAAA,eAAe,CAAC2C,EAAD,CAAf,CAAoBD,IAApB,GAA2B,CAAC1C,eAAe,CAAC2C,EAAD,CAAf,CAAoBD,IAAhD;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,eAAe,CAAC2C,EAAD,CAAf,CAAoBQ,KAApB,GAA4B,IAA5B,GAAmCnD,eAAe,CAAC2C,EAAD,CAAf,CAAoBD,IAAnE;AACD,GAHD;;AAKA,QAAMa,kBAAkB,GAAG,YAAY;AACrC,UAAM3B,GAAG,GAAG,yBAAyBpB,IAAI,CAACmB,GAA1C;AACAxC,IAAAA,KAAK,CAAC;AACJqE,MAAAA,MAAM,EAAE,MADJ;AAEJ5B,MAAAA,GAAG,EAAEA,GAFD;AAGJM,MAAAA,IAAI,EAAE;AACJpC,QAAAA,gBAAgB,EAAE;AAACA,UAAAA;AAAD,SADd;AAEJE,QAAAA,eAAe,EAAE;AAACA,UAAAA;AAAD;AAFb;AAHF,KAAD,CAAL;AAQD,GAVD;;AAYA,QAAMyD,gBAAgB,GAAG,OAAOC,QAAP,EAAiBC,YAAjB,KAAkC;AACzD;AACAhE,IAAAA,IAAI,GAAG+D,QAAP;AACA9D,IAAAA,QAAQ,GAAG+D,YAAX;AACA,QAAIC,iBAAiB,GAAG,MAAMvB,aAAa,EAA3C;AACA,UAAMQ,aAAa,EAAnB;AACAC,IAAAA,uBAAuB,CAACc,iBAAD,CAAvB;AACA7C,IAAAA,UAAU,CAAC,QAAD,CAAV;AACD,GARD;;AAUA,QAAM8C,yBAAyB,GAAG,MAAM;AACtC,QAAGrD,IAAI,IAAI,IAAX,EACE+C,kBAAkB;AACpBO,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAhD,IAAAA,UAAU,CAAC,UAAD,CAAV;AACD,GALD;;AAOA,QAAMiD,OAAO,GAAG,MAAOC,aAAP,IAAyB;AACvC,UAAMtC,GAAG,GAAGsC,aAAa,CAACtC,GAA1B;AACA,QAAGsC,aAAa,CAACC,KAAd,KAAwBxE,SAA3B,EACEmB,UAAU,CAAC,IAAD,CAAV;AACFJ,IAAAA,OAAO,CAACwD,aAAD,CAAP;AACA,UAAME,eAAe,GAAG,MAAMzC,sBAAsB,CAACC,GAAD,CAApD;AACA,UAAMyC,sBAAsB,GAAG,MAAMrC,4BAA4B,CAACJ,GAAD,CAAjE;AACA,UAAM0C,6BAA6B,GAAG,MAAMrC,+BAA+B,CAACL,GAAD,CAA3E;AACA,QAAI2C,QAAQ,GAAG,KAAf;;AAEA,QAAGD,6BAAH,EACA;AACEtD,MAAAA,UAAU,CAAC,OAAD,CAAV;AACAuD,MAAAA,QAAQ,GAAG,IAAX;AACA,YAAMlC,qBAAqB,CAACT,GAAD,CAA3B;AACD;;AAED,QAAGyC,sBAAsB,IAAID,eAA7B,EACA;AACE,UAAG,CAACG,QAAJ,EACEvD,UAAU,CAAC,UAAD,CAAV;AACFZ,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACA,YAAM8B,0BAA0B,CAACN,GAAD,CAAhC;AACA,YAAMQ,wBAAwB,CAACR,GAAD,CAA9B;AACD,KAPD,MAQK,IAAGwC,eAAH,EACL;AACE,UAAG,CAACG,QAAJ,EACAvD,UAAU,CAAC,QAAD,CAAV;AACA,YAAMkB,0BAA0B,CAACN,GAAD,CAAhC;AACA,YAAMQ,wBAAwB,CAACR,GAAD,CAA9B;AACD,KANI,MAOA,IAAG,CAAC2C,QAAJ,EAAc;AACjBvD,MAAAA,UAAU,CAAC,QAAD,CAAV;AACH,GAlCD;;AAoCA,QAAMwD,QAAQ,GAAG,MAAM;AACrBnD,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACDR,IAAAA,UAAU,CAAC,KAAD,CAAV;AACCJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AAEAV,IAAAA,mBAAmB,CAAC,IAAD,CAAnB,CALqB,CAKI;;AACzBE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CANqB,CAMG;;AACxBc,IAAAA,UAAU,CAAC,MAAD,CAAV,CAPqB,CAOF;AACpB,GARD;;AAUA,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA7NQlB,G;;KAAAA,G;AA+NT,MAAM2E,QAAQ,GAAG;AACfC,EAAAA,eAAe,EAAE,MADF;AAEfC,EAAAA,KAAK,EAAE,OAFQ;AAGhBC,EAAAA,SAAS,EAAE,KAHK;AAIhBC,EAAAA,SAAS,EAAE;AAJK,CAAjB;AAOA,MAAMC,WAAW,GAAG;AACnBC,EAAAA,IAAI,EAAC,UADc;AACFC,EAAAA,OAAO,EAAC,MADN;AACcC,EAAAA,QAAQ,EAAC,QADvB;AACiCC,EAAAA,MAAM,EAAC,OADxC;AACiDC,EAAAA,SAAS,EAAC;AAD3D,CAApB;AAGA,eAAerF,GAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react'\nimport ScheduleCourses from './components/ScheduleCourses'\nimport UploadForm from './components/UploadForm'\nimport SelectDoneCourses from './components/SelectDoneCourses'\nimport axios from 'axios';\nimport Sidebar from \"./Sidebar\";\nimport Navbar from \"./Navbar\";\nimport Home from './components/Home'\nimport SharedSchedulers from'./components/SharedSchedulers'\nimport AppBar from'./components/AppBar'\nimport Container from '@mui/material/Container';\n\nconst adminMail = 'sadna2021mta@gmail.com'\n//default values to degree year and semester\nlet year = 1\nlet semester = 1\n\nfunction App(){\n  const [mandatoryCourses, setMandatoryCourses] = useState(null)\n  const [electiveCourses, setElectiveCourses] = useState(null)\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false)\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([])\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([])\n\n  const [user, setUser] = useState(null)\n  const [users, setUsers] = useState(null)\n  const [isAdmin, setIsAdmin] = useState(false)\n\n  const [showKey, setShowKey] = useState('home')\n\n  useEffect(async () => {\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n\n    const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n  }, []);\n\n  const checkUserCoursesExists = async (uid) => {\n    var url = '/checkUserCourses/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database courses exists\n    {\n      console.log('User have courses.')\n      return true\n    }\n    if(res.status === 400)\n    {\n      return false\n    }\n  }\n\n  const checkUserSchedulerDataExists = async (uid) => {\n    var url = '/checkUserScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('User have scheduler data.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  const checkSharedSchedulersDataExists = async (uid) => {\n    var url = '/checkSharedScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('Shared scheduler data to user.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  //fetch from user database courses\n  const fetchUserMandadtoryCourses = async (uid) => {\n    var url = '/mandatoryCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user mandatory courses: \", data.mandatoryCourses)\n    setMandatoryCourses(data.mandatoryCourses)\n  }\n  const fetchUserElectiveCourses = async (uid) => {\n    var url = '/electiveCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user elective courses: \", data.electiveCourses)\n    setElectiveCourses(data.electiveCourses)\n  }\n  const fetchSharedSchedulers = async (uid) => {\n    var url = '/sharedSchedulersData/' + uid \n    const schedulersDataRes = await fetch(url)\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"shared schedulers2: \", Object.values(schedulersData))\n    setSharedSchedulersData(Object.values(schedulersData))\n  }\n\n  //fetch from newsletter database courses\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    // init: adding needed fields to each object\n    const result = data.mandatoryCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result)\n    setMandatoryCourses(result)\n    return result\n  }\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    //adding needed fields to each object\n    const result = data.electiveCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result)\n    setElectiveCourses(result)\n  }\n\n  const defaultCheckDoneCourses = (courses) => {\n    courses?.map(course => {\n      if(course.year < year || (course.year == year && (course.semesters[0] < semester || course.semesters.length === 2))) {\n        courses[course.id].done = true\n        console.log(course.title + \" done.\")\n      }\n    })\n  }\n\n  const checkMandatoryCourse = (e, id) => {\n    mandatoryCourses[id].done = !mandatoryCourses[id].done\n    console.log(mandatoryCourses[id].title + \": \" + mandatoryCourses[id].done)\n  }\n  const checkElectiveCourse = (e, id) => {\n    electiveCourses[id].done = !electiveCourses[id].done\n    console.log(electiveCourses[id].title + \": \" + electiveCourses[id].done)\n  }\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {mandatoryCourses},\n        electiveCourses: {electiveCourses}\n      }\n    });\n  }\n\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear\n    semester = formSemester\n    var mandatoryCourses_ = await fetchMCourses()\n    await fetchECourses()\n    defaultCheckDoneCourses(mandatoryCourses_)\n    setShowKey('select')\n  }\n\n  const handleSelectCoursesSubmit = () => {\n    if(user != null)\n      updateUserDatabase()\n    window.scrollTo(0, 0)\n    setShowKey('schedule')\n  }\n\n  const onLogin = async (userFromLogin) => {\n    const uid = userFromLogin.uid\n    if(userFromLogin.email === adminMail)\n      setIsAdmin(true)\n    setUser(userFromLogin)\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    var KeyIsSet = false;\n\n    if(userHaveSharedSchedulersData_)\n    {\n      setShowKey('share')\n      KeyIsSet = true\n      await fetchSharedSchedulers(uid)\n    }\n\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      if(!KeyIsSet)\n        setShowKey('schedule')\n      setUserHaveSchedulerData(true)\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      if(!KeyIsSet)\n      setShowKey('select')\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(!KeyIsSet) //user doesn't have any data\n      setShowKey('upload')\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n\t  setIsAdmin(false)\n    setUser(null)\n\n    setMandatoryCourses(null)// delete later\n    setElectiveCourses(null)// delete later\n    setShowKey('home') // delete later\n  }\n\n  return ( \n    <div>\n      <Container maxWidth=\"sm\">\n        <AppBar/>\n        AAAAAAAA\n      </Container>\n    </div>\n  );\n}\n\nconst appStyle = {\n  backgroundColor: '#444',\n  color: 'white',\n\tdirection: 'rtl',\n\ttextAlign: 'right',\n  }\n\nconst navbarStyle = {\n\tflex:\"1 1 auto\", display:\"flex\", flexFlow:\"column\", height:\"100vh\", overflowY:\"hidden\"\n}\nexport default App;\n\n\n/*\n\n    <div style={appStyle} className=\"dashboard d-flex\">\n      \n\t\t<Sidebar \n      activeKey={showKey}\n\t\t\thandleHomeClick={() => setShowKey('home')}\n\t\t\thandleUploadClick={() => setShowKey('upload')}\n\t\t\thandleSelectClick={() => setShowKey('select')}\n  \t\thandleScheduleClick={() => setShowKey('schedule')}\n      handleShareClick={() => setShowKey('share')}\n\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\telectiveCourses={electiveCourses}\n\t\t\tuser={user}\n\t\t\tisAdmin={isAdmin}\n\t\t\thandleLogin={onLogin}\n\t\t\thandleLogout={onLogout}\n\t\t/>\n\t\t<div style={navbarStyle}>\n\t\t\t<Navbar user={user}/>\n      <SharedSchedulers\n\t\t\t\tshow={showKey === 'share'}\n        sharedSchedulersData={sharedSchedulersData}\n        />\n\t\t\t<Home \n\t\t\t\tshow={showKey ===  'home'}\n        publishedSchedulersData={publishedSchedulersData}\n\t\t\t/>\t\n\t\t\t<UploadForm \n\t\t\t\tshow={showKey === 'upload'} \n\t\t\t\tonSubmit={handleFileSubmit}\n\t\t\t/>\n\t\t\t<SelectDoneCourses\n\t\t\t\tshow={showKey === 'select'}\n\t\t\t\tmandatoryCourses={mandatoryCourses} \n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tonMandatoryCourseChecked={checkMandatoryCourse} \n\t\t\t\tonElectiveCourseChecked={checkElectiveCourse} \n\t\t\t\tonSubmit={handleSelectCoursesSubmit}\n\t\t\t/>\n\t\t\t<ScheduleCourses \n\t\t\t\tshow={showKey === 'schedule'}\n        user={user}\n        users={users}\n        userHaveSchedulerData={userHaveSchedulerData}\n\t\t\t\tmandatoryCourses={mandatoryCourses}\n\t\t\t\telectiveCourses={electiveCourses} \n\t\t\t\tyear={year} \n\t\t\t\tsemester={semester}\n        />\n\n\t\t</div>\n\n*/"]},"metadata":{},"sourceType":"module"}