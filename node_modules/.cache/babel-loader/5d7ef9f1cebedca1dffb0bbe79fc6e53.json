{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFYclone\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport HandleTextDataToPredict from './HandleTextDataToPredict';\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict';\nimport UploadFile from '../file_handling/UploadFile';\nimport Container from '@mui/material/Container';\nimport ExampleButton from '../show_example/ExampleButton';\nimport ClassModal from './ClassModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleDataToPredict = ({\n  uid,\n  classifyingType,\n  featuresLabels,\n  onPredictFormSubmit,\n  onPredictFileSubmit,\n  modelId\n}) => {\n  _s();\n\n  const [classPrediction, setClassPrediction] = React.useState(null);\n  const [showClassPrediction, setShowClassPrediction] = React.useState(false);\n\n  const predict = async (url, dataToPredict) => {\n    try {\n      const res = await axios({\n        method: 'post',\n        url: url,\n        data: {\n          modelId,\n          dataToPredict\n        }\n      });\n      console.log(res.data);\n      setClassPrediction(res.data[\"class\"]);\n      setShowClassPrediction(true);\n      onPredictFormSubmit(classPrediction);\n    } catch (err) {\n      if (err.response.status === 500) {//setMessage(err.response.statusText)\n      } else if (err.response.status === 400) {//setMessage(err.response.statusText, \"Only Excel file allowed.\")\n      } else {}\n    }\n  };\n\n  const handleFormSubmit = async data => {\n    console.log(data);\n    const url = classifyingType === \"Text\" ? 'predict-text/' + uid : 'predict-features/' + uid;\n    predict(url, data);\n  };\n  /*\r\n  const handleFileSubmit = async (data) => {\r\n      console.log(\"File Submit\")\r\n      console.log(data) //Class is here\r\n  }\r\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fixed: true,\n    sx: {\n      width: \"90%\",\n      fontSize: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ClassModal, {\n      show: showClassPrediction,\n      onHide: () => setShowClassPrediction(false),\n      text: classPrediction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), classifyingType === \"Text\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"You Can Enter Text To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(HandleTextDataToPredict, {\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), \"Text (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n        buttonText: \"Show Example\",\n        tableTitle: \"File upload example for text classification\",\n        tableFeatures: [\"Text\"],\n        tableItems: [[\"text\"]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"You Can Enter Features To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(HandleFeaturesDataToPredict, {\n        featuresLabels: featuresLabels,\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), \"Features (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n        buttonText: \"Show Example\",\n        tableTitle: \"File upload example for features classification\",\n        tableFeatures: [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"...\"],\n        tableItems: [[\"0\", \"8\", \"120\", \"...\"]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n      onSubmit: onPredictFileSubmit,\n      url: classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1',\n      successMessage: \"Model trained successfully\",\n      awaitMessage: \"File uploaded, Training model...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HandleDataToPredict, \"pRKnmnsGd6V5iktoUKtEfUiPy2Q=\");\n\n_c = HandleDataToPredict;\nexport default HandleDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleDataToPredict\");","map":{"version":3,"sources":["D:/CLSFYclone/CLSFY/src/components/handle_data_to_predict/HandleDataToPredict.js"],"names":["React","axios","HandleTextDataToPredict","HandleFeaturesDataToPredict","UploadFile","Container","ExampleButton","ClassModal","HandleDataToPredict","uid","classifyingType","featuresLabels","onPredictFormSubmit","onPredictFileSubmit","modelId","classPrediction","setClassPrediction","useState","showClassPrediction","setShowClassPrediction","predict","url","dataToPredict","res","method","data","console","log","err","response","status","handleFormSubmit","width","fontSize"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport axios from 'axios';\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport ClassModal from './ClassModal'\r\n\r\nconst HandleDataToPredict = ({uid, classifyingType, featuresLabels, onPredictFormSubmit, onPredictFileSubmit, modelId}) => {\r\n    const [classPrediction, setClassPrediction] = React.useState(null)\r\n    const [showClassPrediction, setShowClassPrediction] = React.useState(false)\r\n\r\n    const predict = async (url, dataToPredict) => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'post',\r\n                url: url,\r\n                data: {\r\n                    modelId,\r\n                    dataToPredict\r\n                }\r\n            });\r\n            console.log(res.data)\r\n            setClassPrediction(res.data[\"class\"])\r\n            setShowClassPrediction(true)\r\n            onPredictFormSubmit(classPrediction)\r\n          } \r\n          catch (err) \r\n          {\r\n            if (err.response.status === 500)\r\n            {\r\n              //setMessage(err.response.statusText)\r\n            }\r\n            else if (err.response.status === 400)\r\n            {\r\n              //setMessage(err.response.statusText, \"Only Excel file allowed.\")\r\n            }\r\n            else \r\n            {\r\n            }\r\n          }\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        console.log(data)\r\n        const url = (classifyingType === \"Text\" ? 'predict-text/' + uid : 'predict-features/' + uid)\r\n        predict(url, data)\r\n    }\r\n\r\n    /*\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n    */\r\n\r\n    return (\r\n        <Container fixed sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n            <ClassModal\r\n                show={showClassPrediction} \r\n                onHide={() => setShowClassPrediction(false)} \r\n                text={classPrediction}\r\n            />\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={handleFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        featuresLabels={featuresLabels} \r\n                        onSubmit={handleFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        tableItems={[[\"0\", \"8\", \"120\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={onPredictFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n"]},"metadata":{},"sourceType":"module"}