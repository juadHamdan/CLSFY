{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFYclone\\\\CLSFY\\\\src\\\\components\\\\file_handling\\\\HandleFile.js\";\nimport React from 'react';\nimport { TextString, FeaturesString } from '../../constants/Global';\nimport AppSwitch from './AppSwitch';\nimport UploadFile from './UploadFile';\nimport ExampleButton from '../show_example/ExampleButton';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleFile = ({\n  uid,\n  onFileSubmit,\n  handleSwitch,\n  switchOn,\n  disableSwitch,\n  classifyingType,\n  themeColor\n}) => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      width: \"90%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"nobr\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Choose Classifyier Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AppSwitch, {\n      leftSwitchText: TextString,\n      rightSwitchText: FeaturesString,\n      onSwitch: handleSwitch,\n      switchOn: switchOn,\n      disableSwitch: disableSwitch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: themeColor,\n        fontSize: '1.3rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), \"Upload Excel file is in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), classifyingType === FeaturesString ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Feature 1 (Numbers) | Feature 2 (Numbers) | ... | Feature n (Numbers) | Class (Numbers or Strings)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n          buttonText: \"Show Example\",\n          tableTitle: \"File upload example for features classification\",\n          tableFeatures: [\"Feature 1 (1-Yes, 0-No)\", \"Feature 2\", \"Feature 3\", \"...\", \"Class\"],\n          tableItems: [[\"0\", \"8\", \"127\", \"...\", \"Great\"], [\"1\", \"6\", \"250\", \"...\", \"Bad\"], ['...', '...', '...', '...', '...']],\n          tableAdditionalText: ' * Features must be numbers, classes can be text or numbers'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Text (Numbers) | Class (Numbers or Strings)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n          buttonText: \"Show Example\",\n          tableTitle: \"File upload example for text classification\",\n          tableFeatures: [\"Text\", \"Class\"],\n          tableItems: [[\"text\", \"Well Done\"], ['text', 'Fail'], [\"...\", '...']],\n          tableAdditionalText: ' * Classes can be text or numbers'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n        url: classifyingType === \"Text\" ? '/classify-text/' + uid : 'classify-features/' + uid,\n        onSubmit: onFileSubmit,\n        successMessage: \"Model trained successfully\",\n        awaitMessage: \"File uploaded, Training model...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HandleFile;\nexport default HandleFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFile\");","map":{"version":3,"sources":["D:/CLSFYclone/CLSFY/src/components/file_handling/HandleFile.js"],"names":["React","TextString","FeaturesString","AppSwitch","UploadFile","ExampleButton","Container","HandleFile","uid","onFileSubmit","handleSwitch","switchOn","disableSwitch","classifyingType","themeColor","width","color","fontSize"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { TextString, FeaturesString } from '../../constants/Global'\r\nimport AppSwitch from'./AppSwitch'\r\nimport UploadFile from './UploadFile'\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleFile = ({uid, onFileSubmit, handleSwitch, switchOn, disableSwitch, classifyingType, themeColor}) => {\r\n    return (\r\n        <Container maxWidth='md' sx={{width: \"90%\"}}>\r\n            <nobr><strong>Choose Classifyier Type</strong></nobr>\r\n            <AppSwitch \r\n                leftSwitchText={TextString}\r\n                rightSwitchText={FeaturesString}\r\n                onSwitch={handleSwitch}\r\n                switchOn={switchOn}\r\n                disableSwitch={disableSwitch}\r\n            />\r\n            \r\n            <div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n                <hr/>\r\n                Upload Excel file is in the following format:\r\n                <br/>\r\n                {classifyingType === FeaturesString?\r\n                <>\r\n                    Feature 1 (Numbers) | Feature 2 (Numbers) | ... | Feature n (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1 (1-Yes, 0-No)\", \"Feature 2\", \"Feature 3\" , \"...\", \"Class\"]} \r\n                        tableItems={[[\"0\", \"8\", \"127\", \"...\", \"Great\"], [\"1\", \"6\", \"250\", \"...\", \"Bad\"], ['...', '...', '...', '...', '...']]}\r\n                        tableAdditionalText={' * Features must be numbers, classes can be text or numbers'}\r\n                    />\r\n                </>\r\n                :\r\n                <>\r\n                    Text (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\", \"Class\"]} \r\n                        tableItems={[[\"text\", \"Well Done\"], ['text', 'Fail'], [\"...\", '...']]}\r\n                        tableAdditionalText={' * Classes can be text or numbers'}\r\n                    />\r\n                </>\r\n                }   \r\n                <hr/>\r\n                <UploadFile \r\n                    url={classifyingType === \"Text\" ? '/classify-text/' + uid : 'classify-features/' + uid}\r\n                    onSubmit={onFileSubmit}\r\n                    successMessage={\"Model trained successfully\"}\r\n                    awaitMessage={\"File uploaded, Training model...\"}\r\n                />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HandleFile\r\n"]},"metadata":{},"sourceType":"module"}