{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleTextDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HandleTextDataToPredict = ({\n  onSubmit\n}) => {\n  _s();\n\n  const [value, setValue] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleSubmit = () => {\n    if (value === null || value === \"\") {\n      setError(true);\n      setErrorMessage(\"Empty\");\n      return;\n    }\n\n    setError(false);\n    setErrorMessage(\"\");\n    onSubmit({\n      Text: value\n    });\n  };\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    /*#__PURE__*/\n    //maxWidth='md' sx={{width: \"90%\"}}\n    _jsxDEV(Container, {\n      sx: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        focused: true,\n        error: error,\n        multiline: true,\n        rows: 5,\n        fullWidth: true,\n        color: \"neutral\",\n        label: \"Text\",\n        helperText: errorMessage,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"inherit\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            color: \"#424242\",\n            fontSize: '0.8rem'\n          },\n          children: \"Upload Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleTextDataToPredict, \"y39Z/KmG6PmvIwPj3MBT53aF/Rw=\");\n\n_c = HandleTextDataToPredict;\nexport default HandleTextDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleTextDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleTextDataToPredict.js"],"names":["React","useState","TextField","Container","Button","Typography","HandleTextDataToPredict","onSubmit","value","setValue","errorMessage","setErrorMessage","error","setError","handleSubmit","Text","handleChange","e","target","textAlign","color","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACvB,QAAGN,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAA/B,EACA;AACIK,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,eAAe,CAAC,OAAD,CAAf;AACA;AACH;;AACDE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AAEAJ,IAAAA,QAAQ,CAAC;AAACQ,MAAAA,IAAI,EAAEP;AAAP,KAAD,CAAR;AACH,GAXD;;AAaA,QAAMQ,YAAY,GAAGC,CAAC,IAAI;AACtBR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;AACH,GAFD;;AAIA;AAAA;AACI;AACA,YAAC,SAAD;AAAW,MAAA,EAAE,EAAE;AAACW,QAAAA,SAAS,EAAE;AAAZ,OAAf;AAAA,8BACI,QAAC,SAAD;AACI,QAAA,OAAO,MADX;AAEI,QAAA,KAAK,EAAIP,KAFb;AAGI,QAAA,SAAS,MAHb;AAII,QAAA,IAAI,EAAE,CAJV;AAKI,QAAA,SAAS,MALb;AAMI,QAAA,KAAK,EAAC,SANV;AAOI,QAAA,KAAK,EAAC,MAPV;AAQI,QAAA,UAAU,EAAEF,YARhB;AASI,QAAA,QAAQ,EAAEM;AATd;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI;AAAA;AAAA;AAAA;AAAA,cAZJ,eAaI,QAAC,MAAD;AACI,QAAA,OAAO,EAAEF,YADb;AAEI,QAAA,OAAO,EAAC,WAFZ;AAGI,QAAA,KAAK,EAAC,SAHV;AAAA,+BAII,QAAC,UAAD;AAAY,UAAA,EAAE,EAAE;AAACM,YAAAA,KAAK,EAAE,SAAR;AAAmBC,YAAAA,QAAQ,EAAE;AAA7B,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAuBH,CA7CD;;GAAMf,uB;;KAAAA,uB;AA+CN,eAAeA,uBAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport TextField from '@mui/material/TextField';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst HandleTextDataToPredict = ({onSubmit}) => {\r\n    const [value, setValue] = useState(null)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        if(value === null || value === \"\")\r\n        {\r\n            setError(true)\r\n            setErrorMessage(\"Empty\")\r\n            return\r\n        }\r\n        setError(false)\r\n        setErrorMessage(\"\")\r\n\r\n        onSubmit({Text: value})\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        //maxWidth='md' sx={{width: \"90%\"}}\r\n        <Container sx={{textAlign: \"center\"}}> \r\n            <TextField\r\n                focused\r\n                error = {error}\r\n                multiline\r\n                rows={5}\r\n                fullWidth \r\n                color=\"neutral\"\r\n                label=\"Text\"\r\n                helperText={errorMessage}\r\n                onChange={handleChange}\r\n            />\r\n            <hr/>\r\n            <Button \r\n                onClick={handleSubmit} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Upload Text</Typography>\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HandleTextDataToPredict"]},"metadata":{},"sourceType":"module"}