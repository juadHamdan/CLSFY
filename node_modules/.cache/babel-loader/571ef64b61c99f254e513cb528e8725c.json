{"ast":null,"code":"var _jsxFileName = \"D:\\\\CLSFY\\\\src\\\\components\\\\handle_data_to_predict\\\\HandleDataToPredict.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HandleTextDataToPredict from './HandleTextDataToPredict';\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict';\nimport UploadFile from '../file_handling/UploadFile';\nimport Container from '@mui/material/Container';\nimport AppTableModal from '../show_example/AppTableModal';\nimport Button from '@mui/material/Button';\nimport Fab from '@mui/material/Fab';\nimport InfoRoundedIcon from '@mui/icons-material/InfoRounded';\nimport ExampleButton from '../show_example/ExampleButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HandleDataToPredict = ({\n  classifyingType\n}) => {\n  _s();\n\n  const [showFeaturesModalTable, setShowFeaturesModalTable] = React.useState(false);\n\n  const handleTextFormSubmit = async data => {\n    console.log(\"Text Form Submit\");\n    console.log(data); //Class is here\n  };\n\n  const handleFeaturesFormSubmit = async data => {\n    console.log(\"Features Form Submit\");\n    console.log(data); //Class is here\n  };\n\n  const handleFileSubmit = async data => {\n    console.log(\"File Submit\");\n    console.log(data); //Class is here\n  };\n\n  return (\n    /*#__PURE__*/\n    //<div style={{color: themeColor, fontSize: '1.3rem'}}>\n    _jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        width: \"90%\",\n        fontSize: \"1rem\"\n      },\n      children: [classifyingType === \"Text\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You Can Enter Text To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(HandleTextDataToPredict, {\n          onSubmit: handleTextFormSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), \"Text (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(ExampleButton, {\n          tableTitle: \"File upload example for text classification\",\n          tableFeatures: [\"Text\"],\n          tableItems: [[\"text1\"]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You Can Enter Features To Predict The Class\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(HandleFeaturesDataToPredict, {\n          features: [\"feature1\", \"feature2\", \"feature3\", \"feature4\"],\n          onSubmit: handleFeaturesFormSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), \"Or You Can Upload Excel file in the following format:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), \"Features (Numbers)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(Fab, {\n          style: {\n            color: \"inherit\",\n            backgroundColor: \"inherit\"\n          },\n          onClick: () => setShowFeaturesModalTable(true),\n          size: \"small\",\n          variant: \"extended\",\n          color: \"inherit\",\n          children: [/*#__PURE__*/_jsxDEV(InfoRoundedIcon, {\n            sx: {\n              mr: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), \"Show Example\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AppTableModal, {\n          show: showFeaturesModalTable,\n          onHide: () => setShowFeaturesModalTable(false),\n          title: \"File upload example for features classification\",\n          features: [\"Feature 1\", \"Feature 2\", \"Feature 3\", \"...\"],\n          items: [[\"0\", \"1\", \"0\", \"...\"]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n        onSubmit: handleFileSubmit,\n        url: classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1',\n        successMessage: \"Model trained successfully\",\n        awaitMessage: \"File uploaded, Training model...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(HandleDataToPredict, \"bwgsxETUgZJnBofmonQmstACTAw=\");\n\n_c = HandleDataToPredict;\nexport default HandleDataToPredict;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleDataToPredict\");","map":{"version":3,"sources":["D:/CLSFY/src/components/handle_data_to_predict/HandleDataToPredict.js"],"names":["React","HandleTextDataToPredict","HandleFeaturesDataToPredict","UploadFile","Container","AppTableModal","Button","Fab","InfoRoundedIcon","ExampleButton","HandleDataToPredict","classifyingType","showFeaturesModalTable","setShowFeaturesModalTable","useState","handleTextFormSubmit","data","console","log","handleFeaturesFormSubmit","handleFileSubmit","width","fontSize","color","backgroundColor","mr"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport AppTableModal from '../show_example/AppTableModal'\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoRoundedIcon from '@mui/icons-material/InfoRounded';\r\n\r\nimport ExampleButton from '../show_example/ExampleButton'\r\n\r\nconst HandleDataToPredict = ({classifyingType}) => {\r\n    const [showFeaturesModalTable, setShowFeaturesModalTable] = React.useState(false)\r\n\r\n    const handleTextFormSubmit = async (data) => {\r\n        console.log(\"Text Form Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n\r\n    const handleFeaturesFormSubmit = async (data) => {\r\n        console.log(\"Features Form Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n\r\n    return (\r\n                    //<div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n        <Container maxWidth='md' sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={handleTextFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text1\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        features={[\"feature1\", \"feature2\", \"feature3\", \"feature4\"]} \r\n                        onSubmit={handleFeaturesFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <Fab \r\n                        style={{color: \"inherit\", backgroundColor: \"inherit\"}}\r\n                        onClick={() => setShowFeaturesModalTable(true)}\r\n                        size=\"small\" \r\n                        variant=\"extended\" \r\n                        color=\"inherit\">\r\n                    <InfoRoundedIcon sx={{ mr: 1 }} />\r\n                    Show Example\r\n                    </Fab>\r\n\r\n                    <AppTableModal \r\n                        show={showFeaturesModalTable}\r\n                        onHide={() => setShowFeaturesModalTable(false)} \r\n                        title={\"File upload example for features classification\"}\r\n                        features={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        items={[[\"0\", \"1\", \"0\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={handleFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n"]},"metadata":{},"sourceType":"module"}