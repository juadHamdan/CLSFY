{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joad Hamdan\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\Sadna2021\\\\src\\\\components\\\\ScheduleCourses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SelectGroup from './SelectGroup';\nimport PostInputModal from './PostInputModal';\nimport SchedulerTable from './Scheduler';\nimport SelectUsers from './SelectUsers';\nimport { Container, Row, Col, FormGroup, Button } from 'react-bootstrap';\nimport Select from 'react-select';\nimport axios from 'axios';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Alert from 'react-bootstrap/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst schedulerYear = 2020;\nconst schedulerMonth = 10;\n\nfunction ScheduleCourses({\n  show,\n  user,\n  users,\n  userHaveSchedulerData,\n  mandatoryCourses,\n  electiveCourses\n}) {\n  _s();\n\n  const [courses, setCourses] = useState();\n  const [currentCourse, setCurrentCourse] = useState(); //const [coursesData, setCoursesData] = useState();\n  //const [groupsData, setGroupsData] = useState(null);\n\n  const [groups, setGroups] = useState();\n  const [section, setSection] = useState();\n  const [semester, setSemester] = useState();\n  const [schedulerData, setSchedulerData] = useState([]); //const [selectedGroups, setSelectedGroups] = useState([]);\n\n  const [exercise, setExercise] = useState();\n  const [allExercises, setAllExercises] = useState(); //const [exerciseTimes, setExerciseTimes] = useState([]);\n\n  const [message, setMessage] = useState('');\n  const [showApprovalAlarm, setShowApprovalAlarm] = useState(false);\n  const [approvalAlarmMessage, setApprovalAlarmMessage] = useState('');\n  const [showUsers, setShowUsers] = useState(false);\n  const [alarmVariant, setAlarmVariant] = useState('');\n  const [showPostInput, setShowPostInput] = useState(false);\n  const [currYear, setCurrYear] = useState(null);\n  const [currSemester, setCurrSemester] = useState(null);\n  const hedvaOne = 'חדו\"א 1';\n  const hedvaTwo = 'חדו\"א 2';\n  useEffect(async () => {\n    if (userHaveSchedulerData) await fetchUserSchedulerData(user.uid);\n  }, [userHaveSchedulerData]);\n\n  const fetchUserSchedulerData = async uid => {\n    var url = '/userSchedulerData/' + uid;\n    const res = await fetch(url);\n    const data = await res.json();\n    setSchedulerData(data.schedulerData);\n  };\n\n  const coursePrerequisitesDone = (courses, e, id) => {\n    let coursesPrerequisitesDone = true;\n    let newCourse = courses[id]; //check if NewCourse's prerequisites are done courses \n\n    if (newCourse.prerequisites != null) {\n      newCourse.prerequisites.map(courseName => {\n        courses.map(course => {\n          if (newCourse.id !== course.id) {\n            //if course is in this state => course NOT done.\n            if (course.title === courseName) {\n              handleAlarm('warning', 'הקורס \"' + course.title + '\" בדרישות הקדם של \"' + newCourse.title + '\" .ולכן צריך להוסיף אותו למע\\' השעות ');\n              coursesPrerequisitesDone = false;\n              return; //exit from mapping\n            }\n          }\n        });\n\n        if (coursesPrerequisitesDone == false) {\n          e.preventDefault(); //cancel the check in checkbox\n\n          return; //exit from mapping\n        }\n      });\n    }\n\n    return coursesPrerequisitesDone;\n  };\n\n  const checkCourseParallelReqs = (courses, e, id) => {\n    let newCourse = courses[id]; //check NewCourse's parrallel requests \n\n    if (newCourse.parrallelReqs != null) {\n      newCourse.parrallelReqs.map(courseName => {\n        courses.map(course => {\n          //if course is in this state => course NOT done.\n          if (course.title === courseName) {\n            alert('לקורס \": \"' + newCourse.title + '\"יש דרישת לימוד במקביל עם הקורס: ' + course.title + '\" נוסיף אותו למע\\' השעות.');\n            this.onChecked(e, course.id);\n            return; //exit from mapping\n          }\n        });\n      });\n    }\n  };\n\n  const checkPrerequisites = (courseFromNewsletter, coursesFromNewsletter) => {\n    let prerequisites = courseFromNewsletter['prerequisites'];\n    if (prerequisites == undefined || prerequisites == '') return;\n    prerequisites = prerequisites.split(' ').join('');\n    const coursesNames = mandatoryCourses.map(course => course.title); //courses title \n\n    const doneCoursesNames = mandatoryCourses.filter(course => course['done'] == true).map(course => course['title']); //courses title done\n\n    coursesNames.forEach(courseName => {\n      if (prerequisites.includes(courseName.split(' ').join('')) && !doneCoursesNames.includes(courseName)) {\n        handleAlarm('warning', `הקורס ${courseName} הוא תנאי קדם לקורס ${courseFromNewsletter['title']}, עליך לקבל בו ציון עובר`);\n      }\n    });\n  };\n\n  const checkParallelReqs = (courseFromNewsletter, coursesFromNewsletter) => {\n    let parallelReqs = courseFromNewsletter['parallelReqs'];\n    if (parallelReqs == undefined || parallelReqs == '') return;\n    parallelReqs = parallelReqs.split(' ').join(''); //const dependenciesStrTemp = prerequisetes.replace(' ', '')\n\n    const coursesNames = coursesFromNewsletter.map(course => course.title); //courses title \n\n    const doneCoursesNames = coursesFromNewsletter.filter(course => course['done'] == true).map(course => course['title']); //courses title done\n\n    const checkedSchedulerCourses = schedulerData.map(course => course.title);\n    const schedulerCoursesNaming = checkedSchedulerCourses.map(courseName => courseName == \"חשבון דיפרנציאלי ואינטגרלי 2\" ? hedvaTwo : courseName);\n    const schedulerCoursesNamingSec = schedulerCoursesNaming.map(courseName => courseName == \"חשבון דיפרנציאלי ואינטגרלי 1\" ? hedvaOne : courseName);\n    const schedulerCoursesName = schedulerCoursesNamingSec.map(courseName => courseName.replace('++ ', '++').replace('  ', ' ')); //if course from newsletter is done, don't show it \n    //let parrallelCoursesNames = []\n\n    coursesNames.forEach(courseName => {\n      if (parallelReqs.includes(courseName.split(' ').join('')) && !doneCoursesNames.includes(courseName) && !schedulerCoursesName.includes(courseName.replace('++ ', '++').replace('  ', ' '))) {\n        //parrallelCoursesNames = parrallelCoursesNames.push(courseName)\n        handleAlarm('warning', `הקורס ${courseName} הוא דרישה מקבילה לקורס ${courseFromNewsletter['title']}`);\n      }\n    });\n  }; //add schedulerData check\n  // schedulerData.replace(\" \", \"\")\n  // schedulerData.name.includes(courseName)\n  // add courseName to list and than alarm of all courses names.\n  //group can be on 2 days or more\n\n\n  const getStringOfGroupTime = group => {\n    return group.endDate.getHours() + \":\" + group.endDate.getMinutes() + \" - \" + group.startDate.getHours() + \":\" + group.startDate.getMinutes();\n  };\n\n  const isOverlappingGroups = (group1, group2) => {\n    if (group1.startDate <= group2.endDate && group2.startDate <= group1.endDate) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const groupOverlap = group => {\n    let groupOverlap = false; //check if newCourse time overlap with other checked courses\n\n    group.map(groupDay => {\n      schedulerData.map(schedulerGroupDay => {\n        if (!(schedulerGroupDay instanceof Date)) {\n          schedulerGroupDay.startDate = new Date(schedulerGroupDay.startDate);\n          schedulerGroupDay.endDate = new Date(schedulerGroupDay.endDate);\n        }\n\n        groupOverlap = isOverlappingGroups(groupDay, schedulerGroupDay);\n\n        if (groupOverlap) {\n          handleAlarm(\"warning\", 'הקורס \"' + groupDay.title + '\" חופף עם הקורס \"' + schedulerGroupDay.title + '\" (שעת הקורס: ' + getStringOfGroupTime(groupDay) + ')');\n          return groupOverlap; //exit from mapping\n        }\n      });\n      if (groupOverlap) return groupOverlap;\n    });\n    return groupOverlap;\n  };\n\n  const validateDependancies = crawlerCourse => {\n    if (!crawlerCourse.checked) return; //check if elective or mandatory\n\n    const courseType = crawlerCourse.courseType;\n    let courseFromNewsletter;\n    const hedvaOneCheck = 'חדו\\\"א 1';\n    const hedvaTwoCheck = 'חדו\\\"א 2';\n    let crawlerCourseTitle = crawlerCourse.title;\n    crawlerCourseTitle = crawlerCourseTitle == \"חשבון דיפרנציאלי ואינטגרלי 2\" ? hedvaTwoCheck : crawlerCourseTitle;\n    crawlerCourseTitle = crawlerCourseTitle == \"חשבון דיפרנציאלי ואינטגרלי 1\" ? hedvaOneCheck : crawlerCourseTitle;\n\n    if (courseType === 'Mandatory') {\n      courseFromNewsletter = mandatoryCourses.find(course => course['title'].replace('++ ', '++').replace('  ', ' ') == crawlerCourseTitle);\n\n      if (courseFromNewsletter == undefined) {\n        return;\n      } // add additional check\n\n\n      checkPrerequisites(courseFromNewsletter, mandatoryCourses);\n      checkParallelReqs(courseFromNewsletter, mandatoryCourses);\n    }\n\n    if (courseType === 'Elective') {\n      courseFromNewsletter = electiveCourses.find(course => course['title'].replace('\"', '').replace('++ ', '++').replace('  ', ' ') == crawlerCourseTitle);\n\n      if (courseFromNewsletter == undefined) {\n        return;\n      } // add additional check\n\n\n      checkPrerequisites(courseFromNewsletter, electiveCourses);\n    }\n  };\n\n  const getExercise = groupId => {\n    axios.get('http://localhost:3000/relevantExercise', {\n      params: {\n        groupId: groupId\n      }\n    }).then(res => {\n      const exerciseDataRes = res.data;\n\n      for (const [group_id, group_] of Object.entries(exerciseDataRes)) group_.forEach(function (groupDay, index) {\n        groupDay.checked = false;\n      });\n\n      schedulerData.forEach(function (group_, index) {\n        if (exerciseDataRes[group_.groupId]) {\n          exerciseDataRes[group_.groupId].forEach(function (groupDay, index) {\n            groupDay.checked = true;\n          });\n          console.log(\"found exercise check\");\n        }\n      });\n      console.log(\"exercises: \", exerciseDataRes);\n      setExercise(exerciseDataRes);\n      const newAllExercises = { ...allExercises,\n        ...exerciseDataRes\n      };\n      console.log(\"all exersices: \", newAllExercises);\n      setAllExercises(newAllExercises);\n    });\n  };\n\n  const courseClicked = (e, courseId) => {\n    let unCheckedCurrentCourse = false;\n    courses.forEach(course => {\n      if (course.id !== courseId) {\n        course.checked = false;\n      } else {\n        course.checked = !course.checked;\n        if (course.checked == false) unCheckedCurrentCourse = true;\n      }\n    });\n\n    if (unCheckedCurrentCourse == true) {\n      setGroups(null);\n      setExercise(null);\n      setSchedulerData(schedulerData.filter(data => data.id !== courseId));\n      setExercise(null);\n      setAllExercises(null);\n      return;\n    }\n\n    setCurrentCourse(courseId);\n    setExercise(null);\n    const course = courses.find(course => course.id == courseId);\n    axios.get('/relevantGroups', {\n      params: {\n        courseId: courseId,\n        semester: semester\n      }\n    }).then(res => {\n      const groupsData = res.data;\n\n      for (const [group_id, group_] of Object.entries(groupsData)) group_.forEach(function (groupDay, index) {\n        groupDay.checked = false;\n      });\n\n      schedulerData.forEach(function (group_, index) {\n        if (groupsData[group_.groupId]) {\n          groupsData[group_.groupId].forEach(function (groupDay, index) {\n            groupDay.checked = true;\n          });\n          console.log(\"found group check\");\n        }\n      });\n      console.log(\"Groups: \", groupsData);\n      setGroups(groupsData);\n      validateDependancies(course);\n    });\n  };\n\n  const groupClicked = (e, groupId) => {\n    let group = groups[groupId];\n\n    for (const [group_id, group_] of Object.entries(groups)) group_.forEach(function (groupDay, index) {\n      if (Number(group_id) != groupId) {\n        if (groupDay.checked) {\n          setSchedulerData(schedulerData.filter(data => data.id !== groupDay.course_number));\n        }\n\n        groupDay.checked = false;\n      } else groupDay.checked = !groupDay.checked;\n    });\n\n    group = groups[groupId];\n\n    if (group[0].checked === false) {\n      setSchedulerData(schedulerData.filter(data => data.id !== group[0].course_number));\n\n      if (allExercises) {\n        for (const [group_id, group_] of Object.entries(allExercises)) group_.forEach(function (groupDay, index) {\n          if (groupDay.course_number == group[0].course_number) groupDay.checked = false;\n        });\n      }\n\n      return;\n    }\n\n    const courseType = getCourseType();\n    let fullGroupData = group.map((v, index) => ({\n      title: v['name'],\n      checked: true,\n      id: v['course_number'],\n      groupId: groupId,\n      startDate: new Date(schedulerYear, schedulerMonth, v['day'], v['start_hour'], v['start_min']),\n      endDate: new Date(schedulerYear, schedulerMonth, v['day'], v['end_hour'], v['end_min']),\n      exercise: false,\n      courseType: courseType\n    }));\n    groupOverlap(fullGroupData);\n    const existingCourse = schedulerData.some(groupTime => groupTime.id == group[0]['course_number']);\n\n    if (existingCourse == true) {\n      const removeCourse = schedulerData.filter(groupTime => groupTime.id != group[0]['course_number'] && groupTime.exercise == false);\n      fullGroupData = fullGroupData.concat(removeCourse);\n    } else {\n      fullGroupData = fullGroupData.concat(schedulerData);\n    }\n\n    getExercise(groupId);\n    setSchedulerData(fullGroupData);\n  };\n\n  const exerciseClicked = (e, groupId) => {\n    let group = allExercises[groupId];\n    const courseNumber = group[0].course_number;\n    console.log(\"exercises clicked: \", group);\n\n    for (const [group_id, group_] of Object.entries(allExercises)) group_.forEach(function (groupDay, index) {\n      if (groupDay.course_number == courseNumber) {\n        if (Number(group_id) != groupId) groupDay.checked = false;else groupDay.checked = !groupDay.checked;\n      }\n    });\n\n    group = allExercises[groupId];\n\n    if (group[0].checked === false) {\n      setSchedulerData(schedulerData.filter(data => data.groupId != groupId));\n      return;\n    }\n\n    let details = group.map((v, index) => ({\n      title: v['name'],\n      checked: true,\n      id: v['course_number'],\n      groupId: groupId,\n      startDate: new Date(schedulerYear, schedulerMonth, v['day'], v['start_hour'], v['start_min']),\n      endDate: new Date(schedulerYear, schedulerMonth, v['day'], v['end_hour'], v['end_min']),\n      exercise: true\n    }));\n    groupOverlap(details);\n    const existingCourse = schedulerData.some(exerciseTime => exerciseTime.id == group[0]['course_number'] && exerciseTime.exercise == true);\n\n    if (existingCourse == true) {\n      const removeCourse = schedulerData.filter(exerciseTime => exerciseTime.id != group[0]['course_number'] || exerciseTime.exercise != true);\n      details = details.concat(removeCourse);\n    } else {\n      details = details.concat(schedulerData);\n    }\n\n    setSchedulerData(details); //add to scheduler data the new group/exercise\n    //details = details.concat(exerciseTimes)\n    //setExerciseTimes(details)\n    //const schedulerDataNew = schedulerData.filter(exerciseTime =>  exerciseTime.id != group[0]['course_number'] || exerciseTime.exercise == false )\n    //console.log(\"entering schudeler Data: \", details.concat(schedulerDataNew))\n    //setSchedulerData(details.concat(schedulerDataNew))\n  };\n\n  const sectionChange = event => {\n    setSection(event.value);\n  };\n\n  const semesterChange = event => {\n    setSemester(event.value);\n  };\n\n  const getCourseType = () => {\n    let courseType;\n    if (section >= 1 && section <= 3) courseType = \"Mandatory\";else if (section >= 4 && section <= 6) courseType = \"Elective\";else if (section === 7) courseType = \"Sadna\";\n    return courseType;\n  };\n\n  let cleanData = e => {\n    e.preventDefault();\n    setSchedulerData([]);\n    setExercise(null);\n    setAllExercises(null);\n    setGroups(null);\n  };\n\n  let submit = e => {\n    e.preventDefault();\n    setExercise(null);\n    setAllExercises(null);\n    setGroups(null);\n    const courseType = getCourseType();\n\n    if (section == null || semester == null) {\n      handleAlarm('warning', 'חסרים פרטים.');\n    }\n\n    axios.get('http://localhost:3000/relevantCourses', {\n      params: {\n        section: section,\n        semester: semester\n      }\n    }).then(res => {\n      const coursesData = res.data; //setCoursesData(coursesData);\n\n      let coursesNames = [];\n      coursesData.forEach(course => coursesNames.push({\n        id: course.course_number,\n        title: course.course_name,\n        checked: false,\n        courseType: courseType\n      }));\n      setCourses(coursesNames);\n    });\n  };\n\n  const degreeYear = [{\n    value: 1,\n    label: 'חובה - שנה ראשונה'\n  }, {\n    value: 2,\n    label: 'חובה - שנה שנייה'\n  }, {\n    value: 3,\n    label: 'חובה - שנה שלישית'\n  }, {\n    value: 4,\n    label: 'בחירה - מדעי המחשב'\n  }, {\n    value: 5,\n    label: 'בחירה - מדעים'\n  }, {\n    value: 6,\n    label: 'בחירה מתמטיקה'\n  }, {\n    value: 7,\n    label: 'סדנאות'\n  }, {\n    value: 8,\n    label: 'אנגלית'\n  }];\n  const degreeSemester = [{\n    value: 1,\n    label: 'סמסטר א\\''\n  }, {\n    value: 2,\n    label: 'סמסטר ב\\''\n  }, {\n    value: 3,\n    label: 'קיץ'\n  }];\n\n  const isSchedulerActionValid = () => {\n    var isValid = true;\n\n    if (!user) {\n      handleAlarm('warning', 'התחבר/י על מנת להמשיך');\n      isValid = false;\n    }\n\n    if (schedulerData.length === 0) {\n      handleAlarm('warning', 'לא שובצו קורסים למערכת השעות');\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const postSchedulerData = async url => {\n    const photoURL = user.photoURL;\n    const displayName = user.displayName;\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        schedulerData: {\n          schedulerData\n        },\n        photoURL: {\n          photoURL\n        },\n        displayName: {\n          displayName\n        },\n        year: {\n          currYear\n        },\n        semester: {\n          currSemester\n        }\n      }\n    });\n  };\n\n  const handleSchedulerPublish = () => {\n    if (isSchedulerActionValid()) {\n      var url = '/publishSchedulerData';\n      postSchedulerData(url);\n      handleAlarm('success', 'מערכת שעות פורסמה בהצלחה, ניתן לראותה בדף הבית');\n    }\n  };\n\n  const handleSchedulerSave = () => {\n    if (isSchedulerActionValid()) {\n      var url = '/saveUserScheduleData/' + user.uid;\n      postSchedulerData(url);\n      handleAlarm('success', 'מערכת שעות נשמרה בהצלחה');\n    }\n  };\n\n  const onUserClick = (e, uid) => {\n    console.log(\"Clicked: \", uid);\n    var url = '/sharedSchedulersData/' + uid;\n    postSchedulerData(url);\n    setShowUsers(false);\n    handleAlarm('success', 'מערכת שעות שותפה בהצלחה');\n  };\n\n  const handleSchedulerShare = () => {\n    if (isSchedulerActionValid()) {\n      setShowUsers(true);\n    }\n  };\n\n  const handleApprovalAlarm = (variant, text) => {\n    setShowApprovalAlarm(true);\n    setApprovalAlarmMessage(text);\n    setAlarmVariant(variant);\n  };\n\n  const handleAlarm = (variant, text) => {\n    setTimeout(() => setMessage(''), 10000);\n    setMessage(text);\n    setAlarmVariant(variant);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 64px)\",\n        overflowY: \"scroll\"\n      },\n      children: show ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontFamily: 'Calibri',\n            fontSize: '24px'\n          },\n          children: [message ? /*#__PURE__*/_jsxDEV(Alert, {\n            variant: alarmVariant,\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 22\n          }, this) : null, /*#__PURE__*/_jsxDEV(Alert, {\n            show: showApprovalAlarm,\n            variant: alarmVariant,\n            onClose: () => setShowApprovalAlarm(false),\n            dismissible: true,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: approvalAlarmMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-start\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-success\",\n                onClick: () => {\n                  setShowApprovalAlarm(false);\n                  handleSchedulerPublish();\n                },\n                children: \"\\u05D0\\u05D9\\u05E9\\u05D5\\u05E8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 15\n              }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-danger\",\n                onClick: () => setShowApprovalAlarm(false),\n                children: \"\\u05E1\\u05D2\\u05D9\\u05E8\\u05D4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(SelectUsers, {\n          show: showUsers,\n          onHide: () => setShowUsers(false),\n          user: user,\n          users: users,\n          onChecked: onUserClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PostInputModal, {\n          show: showPostInput,\n          onHide: () => setShowPostInput(false),\n          setYear: setCurrYear,\n          setSemester: setCurrSemester\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            md: 2,\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: [/*#__PURE__*/_jsxDEV(Container, {\n                style: {\n                  padding: '20px'\n                },\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    sm: 2,\n                    children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                      vertical: true,\n                      size: \"lg\",\n                      children: [/*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"info\",\n                        onClick: () => {\n                          if (!currYear && !currSemester) setShowPostInput(true);\n                          handleApprovalAlarm('info', 'פרסום מערכת השעות יגרום לפרטים אישיים להפוך לציבוריים. האם להמשיך?');\n                        },\n                        children: \"\\u05E4\\u05E8\\u05E1\\u05D5\\u05DD\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 642,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"info\",\n                        onClick: () => {\n                          handleSchedulerShare();\n                          if (!currYear && !currSemester) setShowPostInput(true);\n                        },\n                        children: \"\\u05E9\\u05D9\\u05EA\\u05D5\\u05E3\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 652,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"info\",\n                        onClick: handleSchedulerSave,\n                        children: \"\\u05E9\\u05DE\\u05D9\\u05E8\\u05D4\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 661,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 641,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 640,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: 10,\n                    children: /*#__PURE__*/_jsxDEV(\"form\", {\n                      onSubmit: submit,\n                      className: \"mx-auto\",\n                      style: formStyle,\n                      children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                        role: \"form\",\n                        children: [/*#__PURE__*/_jsxDEV(Select, {\n                          class: \"form-control\",\n                          id: \"section\",\n                          menuPlacement: \"auto\",\n                          placeholder: \"\\u05E9\\u05E0\\u05EA \\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD\",\n                          options: degreeYear,\n                          onChange: sectionChange\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 672,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(Select, {\n                          class: \"form-control\",\n                          id: \"semester\",\n                          menuPlacement: \"auto\",\n                          placeholder: \"\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8\",\n                          options: degreeSemester,\n                          onChange: semesterChange\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 678,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"d-grid gap-2\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 684,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(Button, {\n                          variant: \"info\",\n                          size: \"lg\",\n                          type: \"submit\",\n                          children: \"\\u05D1\\u05D7\\u05E8/\\u05D9\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 685,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(Button, {\n                          style: {\n                            marginRight: \"60px\"\n                          },\n                          variant: \"info\",\n                          size: \"lg\",\n                          onClick: cleanData,\n                          type: \"clean\",\n                          children: \"\\u05E0\\u05D9\\u05E7\\u05D5\\u05D9 \\u05DE\\u05E2\\u05E8\\u05DB\\u05EA \\u05E9\\u05E2\\u05D5\\u05EA\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 691,\n                          columnNumber: 30\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 670,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 669,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 668,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(SelectGroup, {\n                courses: courses,\n                groups: groups,\n                exercise: exercise,\n                exerciseData: allExercises,\n                schedulerData: schedulerData,\n                onCourseClicked: courseClicked,\n                onGroupClicked: groupClicked,\n                onExerciseClicked: exerciseClicked,\n                currentCourse: currentCourse\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(SchedulerTable, {\n                data: schedulerData,\n                height: \"1150\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 589,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ScheduleCourses, \"mxIXGipEDnVU5bcRsKAVV28ce14=\");\n\n_c = ScheduleCourses;\nconst formStyle = {\n  color: 'black',\n  width: '600px',\n  textAlign: 'center',\n  fontFamily: 'Calibri',\n  fontSize: '20px'\n};\nexport default ScheduleCourses;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScheduleCourses\");","map":{"version":3,"sources":["C:/Users/Joad Hamdan/OneDrive/שולחן העבודה/Sadna2021/src/components/ScheduleCourses.js"],"names":["React","useState","useEffect","SelectGroup","PostInputModal","SchedulerTable","SelectUsers","Container","Row","Col","FormGroup","Button","Select","axios","ButtonGroup","Alert","schedulerYear","schedulerMonth","ScheduleCourses","show","user","users","userHaveSchedulerData","mandatoryCourses","electiveCourses","courses","setCourses","currentCourse","setCurrentCourse","groups","setGroups","section","setSection","semester","setSemester","schedulerData","setSchedulerData","exercise","setExercise","allExercises","setAllExercises","message","setMessage","showApprovalAlarm","setShowApprovalAlarm","approvalAlarmMessage","setApprovalAlarmMessage","showUsers","setShowUsers","alarmVariant","setAlarmVariant","showPostInput","setShowPostInput","currYear","setCurrYear","currSemester","setCurrSemester","hedvaOne","hedvaTwo","fetchUserSchedulerData","uid","url","res","fetch","data","json","coursePrerequisitesDone","e","id","coursesPrerequisitesDone","newCourse","prerequisites","map","courseName","course","title","handleAlarm","preventDefault","checkCourseParallelReqs","parrallelReqs","alert","onChecked","checkPrerequisites","courseFromNewsletter","coursesFromNewsletter","undefined","split","join","coursesNames","doneCoursesNames","filter","forEach","includes","checkParallelReqs","parallelReqs","checkedSchedulerCourses","schedulerCoursesNaming","schedulerCoursesNamingSec","schedulerCoursesName","replace","getStringOfGroupTime","group","endDate","getHours","getMinutes","startDate","isOverlappingGroups","group1","group2","groupOverlap","groupDay","schedulerGroupDay","Date","validateDependancies","crawlerCourse","checked","courseType","hedvaOneCheck","hedvaTwoCheck","crawlerCourseTitle","find","getExercise","groupId","get","params","then","exerciseDataRes","group_id","group_","Object","entries","index","console","log","newAllExercises","courseClicked","courseId","unCheckedCurrentCourse","groupsData","groupClicked","Number","course_number","getCourseType","fullGroupData","v","existingCourse","some","groupTime","removeCourse","concat","exerciseClicked","courseNumber","details","exerciseTime","sectionChange","event","value","semesterChange","cleanData","submit","coursesData","push","course_name","degreeYear","label","degreeSemester","isSchedulerActionValid","isValid","length","postSchedulerData","photoURL","displayName","method","year","handleSchedulerPublish","handleSchedulerSave","onUserClick","handleSchedulerShare","handleApprovalAlarm","variant","text","setTimeout","height","overflowY","fontFamily","fontSize","padding","formStyle","marginRight","color","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\r\nimport SelectGroup from './SelectGroup'\r\nimport PostInputModal from './PostInputModal'\r\nimport SchedulerTable from './Scheduler'\r\nimport SelectUsers from './SelectUsers'\r\nimport { Container, Row, Col, FormGroup, Button } from 'react-bootstrap'\r\nimport Select from 'react-select'\r\nimport axios from 'axios';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nconst schedulerYear=2020;\r\nconst schedulerMonth=10;\r\n\r\nfunction ScheduleCourses({show, user, users, userHaveSchedulerData, mandatoryCourses, electiveCourses}) {\r\n\r\n  const [courses, setCourses] = useState();\r\n  const [currentCourse, setCurrentCourse] = useState();\r\n  //const [coursesData, setCoursesData] = useState();\r\n  //const [groupsData, setGroupsData] = useState(null);\r\n  const [groups, setGroups] = useState();\r\n  const [section, setSection] = useState();\r\n  const [semester, setSemester] = useState();\r\n  const [schedulerData, setSchedulerData] = useState([]);\r\n  //const [selectedGroups, setSelectedGroups] = useState([]);\r\n  const [exercise, setExercise] = useState();\r\n  const [allExercises, setAllExercises] = useState();\r\n  //const [exerciseTimes, setExerciseTimes] = useState([]);\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  const [showApprovalAlarm, setShowApprovalAlarm] = useState(false)\r\n  const [approvalAlarmMessage, setApprovalAlarmMessage] = useState('')\r\n\r\n  const [showUsers, setShowUsers] = useState(false)\r\n\r\n  const [alarmVariant, setAlarmVariant] = useState('');\r\n  const [showPostInput, setShowPostInput] = useState(false);\r\n  const [currYear, setCurrYear] = useState(null);\r\n  const [currSemester, setCurrSemester] = useState(null);\r\n\r\n  \r\n  const hedvaOne = 'חדו\"א 1'\r\n  const hedvaTwo = 'חדו\"א 2'\r\n\r\n\r\n  useEffect(async () => {\r\n    if(userHaveSchedulerData)\r\n      await fetchUserSchedulerData(user.uid)\r\n  }, [userHaveSchedulerData]);\r\n\r\n  const fetchUserSchedulerData = async (uid) => {\r\n    var url = '/userSchedulerData/' + uid \r\n    const res = await fetch(url)\r\n    const data = await res.json()\r\n    setSchedulerData(data.schedulerData)\r\n  }\r\n\r\n  const coursePrerequisitesDone = (courses, e, id) => {\r\n    let coursesPrerequisitesDone = true\r\n    let newCourse = courses[id]\r\n    //check if NewCourse's prerequisites are done courses \r\n    if(newCourse.prerequisites != null){\r\n        newCourse.prerequisites.map(courseName => {\r\n            courses.map(course => {\r\n                if(newCourse.id !== course.id)\r\n                {\r\n                    //if course is in this state => course NOT done.\r\n                    if(course.title === courseName){\r\n                        handleAlarm('warning', 'הקורס \"' + course.title + '\" בדרישות הקדם של \"' + newCourse.title + '\" .ולכן צריך להוסיף אותו למע\\' השעות ')\r\n                        coursesPrerequisitesDone = false\r\n                        return //exit from mapping\r\n                    }\r\n                }\r\n    })\r\n\r\n        if(coursesPrerequisitesDone == false){\r\n            e.preventDefault() //cancel the check in checkbox\r\n            return //exit from mapping\r\n        }\r\n      })\r\n    }\r\n\r\n    return coursesPrerequisitesDone\r\n  }\r\n\r\n  const checkCourseParallelReqs = (courses, e, id) => {\r\n    let newCourse = courses[id]\r\n    //check NewCourse's parrallel requests \r\n    if(newCourse.parrallelReqs != null){\r\n      newCourse.parrallelReqs.map(courseName => {\r\n        courses.map(course => {\r\n          //if course is in this state => course NOT done.\r\n          if(course.title === courseName){\r\n            alert('לקורס \": \"' + newCourse.title + '\"יש דרישת לימוד במקביל עם הקורס: ' + course.title + '\" נוסיף אותו למע\\' השעות.')\r\n            this.onChecked(e, course.id)\r\n            return //exit from mapping\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  const checkPrerequisites = (courseFromNewsletter, coursesFromNewsletter) => {\r\n    let prerequisites = courseFromNewsletter['prerequisites']\r\n    if (prerequisites == undefined || prerequisites == '') return\r\n\r\n    prerequisites = prerequisites.split(' ').join('')\r\n\r\n    const coursesNames = mandatoryCourses.map(course => course.title) //courses title \r\n    const doneCoursesNames = mandatoryCourses.filter(course => course['done'] == true).map(course => course['title']) //courses title done\r\n\r\n\r\n    coursesNames.forEach(courseName => {\r\n      if (prerequisites.includes(courseName.split(' ').join('')) &&  !doneCoursesNames.includes(courseName)){\r\n        handleAlarm('warning', `הקורס ${courseName} הוא תנאי קדם לקורס ${courseFromNewsletter['title']}, עליך לקבל בו ציון עובר`)\r\n      }\r\n    })\r\n  }\r\n\r\n  const checkParallelReqs = (courseFromNewsletter, coursesFromNewsletter) => {\r\n    let parallelReqs = courseFromNewsletter['parallelReqs']\r\n    if (parallelReqs == undefined || parallelReqs == '') return\r\n\r\n    parallelReqs = parallelReqs.split(' ').join('')\r\n\r\n    //const dependenciesStrTemp = prerequisetes.replace(' ', '')\r\n\r\n\r\n    const coursesNames = coursesFromNewsletter.map(course => course.title) //courses title \r\n    const doneCoursesNames = coursesFromNewsletter.filter(course => course['done'] == true).map(course => course['title']) //courses title done\r\n    const checkedSchedulerCourses = schedulerData.map(course => course.title)\r\n    const schedulerCoursesNaming = checkedSchedulerCourses.map(courseName => courseName == \"חשבון דיפרנציאלי ואינטגרלי 2\" ? hedvaTwo  : courseName)\r\n    const schedulerCoursesNamingSec = schedulerCoursesNaming.map(courseName => courseName == \"חשבון דיפרנציאלי ואינטגרלי 1\" ? hedvaOne  : courseName);\r\n    const schedulerCoursesName = schedulerCoursesNamingSec.map(courseName => courseName.replace('++ ', '++').replace('  ', ' '));\r\n\r\n    //if course from newsletter is done, don't show it \r\n\r\n    //let parrallelCoursesNames = []\r\n\r\n    coursesNames.forEach(courseName => {\r\n      if (parallelReqs.includes(courseName.split(' ').join('')) &&  !doneCoursesNames.includes(courseName) && !schedulerCoursesName.includes(courseName.replace('++ ', '++').replace('  ', ' '))){\r\n        //parrallelCoursesNames = parrallelCoursesNames.push(courseName)\r\n        handleAlarm('warning', `הקורס ${courseName} הוא דרישה מקבילה לקורס ${courseFromNewsletter['title']}`)\r\n      }\r\n    })\r\n  }\r\n\r\n  //add schedulerData check\r\n  // schedulerData.replace(\" \", \"\")\r\n  // schedulerData.name.includes(courseName)\r\n\r\n  // add courseName to list and than alarm of all courses names.\r\n\r\n\r\n  //group can be on 2 days or more\r\n  const getStringOfGroupTime = (group) => {\r\n    return (group.endDate.getHours() + \":\" + group.endDate.getMinutes() + \" - \" + group.startDate.getHours() + \":\" + group.startDate.getMinutes())\r\n  }\r\n\r\n  const isOverlappingGroups = (group1, group2) => {\r\n    if((group1.startDate <= group2.endDate) && (group2.startDate <= group1.endDate)){\r\n        return true;\r\n    }\r\n    return false\r\n  }\r\n\r\n  const groupOverlap = (group) => { \r\n    let groupOverlap = false\r\n    //check if newCourse time overlap with other checked courses\r\n    group.map(groupDay => {\r\n      schedulerData.map(schedulerGroupDay => {\r\n        if(!(schedulerGroupDay instanceof Date))\r\n        {\r\n          schedulerGroupDay.startDate = new Date(schedulerGroupDay.startDate)\r\n          schedulerGroupDay.endDate = new Date(schedulerGroupDay.endDate)\r\n        }\r\n        groupOverlap = isOverlappingGroups(groupDay, schedulerGroupDay)\r\n        if(groupOverlap)\r\n        {\r\n          handleAlarm(\"warning\", 'הקורס \"' + groupDay.title + '\" חופף עם הקורס \"' + schedulerGroupDay.title + '\" (שעת הקורס: ' + getStringOfGroupTime(groupDay) + ')')\r\n          return groupOverlap//exit from mapping\r\n        }\r\n      })\r\n      if(groupOverlap)\r\n        return groupOverlap\r\n    })\r\n    return groupOverlap\r\n  }\r\n\r\n  const validateDependancies = (crawlerCourse) => {\r\n    if(!crawlerCourse.checked)\r\n      return\r\n\r\n    //check if elective or mandatory\r\n    const courseType = crawlerCourse.courseType\r\n    let courseFromNewsletter\r\n    const hedvaOneCheck = 'חדו\\\"א 1'\r\n    const hedvaTwoCheck = 'חדו\\\"א 2'\r\n    let crawlerCourseTitle = crawlerCourse.title\r\n    crawlerCourseTitle = crawlerCourseTitle == \"חשבון דיפרנציאלי ואינטגרלי 2\" ? hedvaTwoCheck  : crawlerCourseTitle\r\n    crawlerCourseTitle = crawlerCourseTitle == \"חשבון דיפרנציאלי ואינטגרלי 1\" ? hedvaOneCheck  : crawlerCourseTitle\r\n\r\n    if(courseType === 'Mandatory')\r\n    {\r\n      courseFromNewsletter = mandatoryCourses.find(course => course['title'].replace('++ ', '++').replace('  ', ' ') == crawlerCourseTitle)\r\n      if(courseFromNewsletter == undefined){\r\n        return\r\n      }\r\n\r\n      // add additional check\r\n      checkPrerequisites(courseFromNewsletter, mandatoryCourses)\r\n      checkParallelReqs(courseFromNewsletter, mandatoryCourses)\r\n    }\r\n    if(courseType === 'Elective')\r\n    {\r\n      courseFromNewsletter = electiveCourses.find(course => course['title'].replace('\"', '').replace('++ ', '++').replace('  ', ' ')  == crawlerCourseTitle)\r\n      if(courseFromNewsletter == undefined){\r\n        return\r\n      }\r\n      // add additional check\r\n      checkPrerequisites(courseFromNewsletter, electiveCourses)\r\n    }\r\n  }\r\n\r\n    const getExercise = (groupId) => {\r\n      axios.get('http://localhost:3000/relevantExercise', {\r\n      params: {\r\n        groupId: groupId,\r\n      }\r\n    }).then(res => {\r\n        const exerciseDataRes = res.data;\r\n\r\n        for(const [group_id, group_] of Object.entries(exerciseDataRes))\r\n          group_.forEach(function(groupDay, index) {\r\n            groupDay.checked = false\r\n        });\r\n\r\n        schedulerData.forEach(function(group_, index) {\r\n          if(exerciseDataRes[group_.groupId])\r\n          {\r\n            exerciseDataRes[group_.groupId].forEach(function(groupDay, index) {\r\n              groupDay.checked = true\r\n           });\r\n\r\n            console.log(\"found exercise check\")\r\n\r\n          }\r\n       });\r\n\r\n        console.log(\"exercises: \", exerciseDataRes)\r\n        setExercise(exerciseDataRes);\r\n\r\n        const newAllExercises = {...allExercises, ...exerciseDataRes}\r\n        console.log(\"all exersices: \", newAllExercises)\r\n        setAllExercises(newAllExercises);\r\n      });\r\n  }\r\n\r\n  const courseClicked = (e, courseId) => {\r\n  let unCheckedCurrentCourse = false;\r\n    courses.forEach((course) => {\r\n        if(course.id !== courseId) {\r\n            course.checked = false;\r\n        }\r\n        else {\r\n            course.checked = !course.checked\r\n            if(course.checked == false) unCheckedCurrentCourse = true\r\n        }\r\n    })\r\n    if(unCheckedCurrentCourse == true){\r\n        setGroups(null);\r\n        setExercise(null);\r\n        setSchedulerData(schedulerData.filter(data => data.id !== courseId));\r\n        setExercise(null);\r\n        setAllExercises(null);\r\n        return;\r\n    }\r\n\r\n    setCurrentCourse(courseId)\r\n    setExercise(null);\r\n\r\n\r\n    const course = courses.find(course => course.id == courseId)\r\n\r\n    axios.get('/relevantGroups', {\r\n      params: {\r\n        courseId: courseId,\r\n        semester: semester\r\n      }\r\n    }).then(res => {\r\n        const groupsData = res.data;\r\n\r\n        for(const [group_id, group_] of Object.entries(groupsData))\r\n          group_.forEach(function(groupDay, index) {\r\n            groupDay.checked = false\r\n        });\r\n\r\n        schedulerData.forEach(function(group_, index) {\r\n          if(groupsData[group_.groupId])\r\n          {\r\n\r\n            groupsData[group_.groupId].forEach(function(groupDay, index) {\r\n              groupDay.checked = true\r\n           });\r\n\r\n            console.log(\"found group check\")\r\n\r\n          }\r\n       });\r\n        \r\n        console.log(\"Groups: \", groupsData)\r\n        setGroups(groupsData);\r\n        validateDependancies(course);\r\n      });\r\n  }\r\n\r\n  const groupClicked =(e, groupId) => {\r\n    let group = groups[groupId]\r\n\r\n    for (const [group_id, group_] of Object.entries(groups))\r\n      group_.forEach(function(groupDay, index) {\r\n        if(Number(group_id) != groupId)\r\n        {\r\n          if(groupDay.checked)\r\n          {\r\n            setSchedulerData(schedulerData.filter(data => data.id !== groupDay.course_number))\r\n          }\r\n          groupDay.checked = false\r\n        }\r\n        else\r\n          groupDay.checked = !groupDay.checked\r\n     });\r\n\r\n     group = groups[groupId]\r\n\r\n     if(group[0].checked === false)\r\n     {\r\n       setSchedulerData(schedulerData.filter(data => data.id !== group[0].course_number))\r\n\r\n       if(allExercises){\r\n        for (const [group_id, group_] of Object.entries(allExercises))\r\n          group_.forEach(function(groupDay, index) {\r\n            if(groupDay.course_number == group[0].course_number)\r\n              groupDay.checked = false\r\n            });\r\n       }\r\n       \r\n       return\r\n      }\r\n\r\n\r\n    const courseType = getCourseType()\r\n    let fullGroupData = group.map((v, index) => ({\r\n        title: v['name'],\r\n        checked: true,\r\n        id: v['course_number'],\r\n        groupId: groupId,\r\n        startDate: new Date(schedulerYear, schedulerMonth, v['day'], v['start_hour'], v['start_min']),\r\n        endDate: new Date(schedulerYear, schedulerMonth, v['day'], v['end_hour'],  v['end_min']),\r\n        exercise: false,\r\n        courseType: courseType\r\n    }))\r\n\r\n    groupOverlap(fullGroupData)\r\n\r\n\r\n\r\n    const existingCourse = schedulerData.some(groupTime =>  groupTime.id == group[0]['course_number'] )\r\n    if (existingCourse == true) {\r\n        const removeCourse = schedulerData.filter(groupTime =>  groupTime.id != group[0]['course_number'] && groupTime.exercise == false )\r\n        fullGroupData = fullGroupData.concat(removeCourse)\r\n    }\r\n    else {\r\n      fullGroupData = fullGroupData.concat(schedulerData)\r\n    }\r\n\r\n    getExercise(groupId)\r\n    setSchedulerData(fullGroupData)\r\n  }\r\n\r\n  const exerciseClicked =(e, groupId) => {\r\n    let group = allExercises[groupId]\r\n    const courseNumber = group[0].course_number\r\n    console.log(\"exercises clicked: \", group)\r\n\r\n    for (const [group_id, group_] of Object.entries(allExercises))\r\n      group_.forEach(function(groupDay, index) {\r\n        if (groupDay.course_number == courseNumber){\r\n            if(Number(group_id) != groupId)\r\n              groupDay.checked = false\r\n            else\r\n              groupDay.checked = !groupDay.checked\r\n        }\r\n     });\r\n\r\n     group = allExercises[groupId]\r\n\r\n     if(group[0].checked === false)\r\n     {\r\n       setSchedulerData(schedulerData.filter(data => data.groupId != groupId))\r\n       return\r\n     }\r\n\r\n    let details = group.map((v, index) => ({\r\n        title: v['name'],\r\n        checked: true,\r\n        id: v['course_number'],\r\n        groupId: groupId,\r\n        startDate: new Date(schedulerYear, schedulerMonth, v['day'], v['start_hour'], v['start_min']),\r\n        endDate: new Date(schedulerYear, schedulerMonth, v['day'], v['end_hour'],  v['end_min']),\r\n        exercise: true\r\n    }))\r\n    groupOverlap(details)\r\n\r\n\r\n    const existingCourse = schedulerData.some(exerciseTime =>  exerciseTime.id == group[0]['course_number'] && exerciseTime.exercise == true )\r\n    if (existingCourse == true) {\r\n        const removeCourse = schedulerData.filter(exerciseTime =>  exerciseTime.id != group[0]['course_number'] || exerciseTime.exercise != true )\r\n        details = details.concat(removeCourse)\r\n    }\r\n    else {\r\n      details = details.concat(schedulerData)\r\n    }\r\n\r\n    setSchedulerData(details)\r\n\r\n    //add to scheduler data the new group/exercise\r\n\r\n    //details = details.concat(exerciseTimes)\r\n    //setExerciseTimes(details)\r\n\r\n\r\n    //const schedulerDataNew = schedulerData.filter(exerciseTime =>  exerciseTime.id != group[0]['course_number'] || exerciseTime.exercise == false )\r\n    //console.log(\"entering schudeler Data: \", details.concat(schedulerDataNew))\r\n    //setSchedulerData(details.concat(schedulerDataNew))\r\n  }\r\n\r\n\r\n  const sectionChange = (event) => {\r\n    setSection(event.value)\r\n  }\r\n\r\n  const semesterChange = (event) => {\r\n    setSemester(event.value)\r\n  }\r\n\r\n  const getCourseType = () => {\r\n    let courseType\r\n    if(section >= 1 && section <= 3)\r\n      courseType = \"Mandatory\"\r\n    else if(section >= 4 && section <= 6)\r\n      courseType = \"Elective\"\r\n    else if(section === 7)\r\n      courseType = \"Sadna\"\r\n\r\n    return courseType\r\n  }\r\n\r\n   let cleanData = (e) => {\r\n    e.preventDefault();\r\n    setSchedulerData([]);\r\n    setExercise(null);\r\n    setAllExercises(null);\r\n    setGroups(null)\r\n    }\r\n\r\n  let submit = (e) => {\r\n    e.preventDefault();\r\n    setExercise(null);\r\n    setAllExercises(null);\r\n    setGroups(null)\r\n\r\n    const courseType = getCourseType()\r\n\r\n    if (section == null || semester == null){\r\n        handleAlarm('warning', 'חסרים פרטים.')\r\n    }\r\n    axios.get('http://localhost:3000/relevantCourses', {\r\n      params: {\r\n        section: section,\r\n        semester: semester\r\n      }\r\n    }).then(res => {\r\n        const coursesData = res.data;\r\n        //setCoursesData(coursesData);\r\n        let coursesNames = []\r\n        coursesData.forEach(course => coursesNames.push(\r\n          { id: course.course_number, \r\n            title: course.course_name, \r\n            checked: false, \r\n            courseType: courseType\r\n          }))\r\n        setCourses(coursesNames);\r\n      });\r\n  }\r\n    const degreeYear = [\r\n        { value: 1, label: 'חובה - שנה ראשונה'},\r\n        { value: 2, label: 'חובה - שנה שנייה'},\r\n        { value: 3, label: 'חובה - שנה שלישית'},\r\n        { value: 4, label: 'בחירה - מדעי המחשב'},\r\n        { value: 5, label: 'בחירה - מדעים'},\r\n        { value: 6, label: 'בחירה מתמטיקה'},\r\n        { value: 7, label: 'סדנאות'},\r\n        { value: 8, label: 'אנגלית'},\r\n        ]\r\n\r\n    const degreeSemester = [\r\n      { value: 1, label:'סמסטר א\\''},\r\n      { value: 2, label: 'סמסטר ב\\''},\r\n      { value: 3, label: 'קיץ'},\r\n    ]\r\n\r\nconst isSchedulerActionValid = () => {\r\n  var isValid = true\r\n  if(!user)\r\n  {\r\n    handleAlarm('warning', 'התחבר/י על מנת להמשיך')\r\n    isValid = false\r\n  }\r\n  if(schedulerData.length === 0)\r\n  {\r\n    handleAlarm('warning', 'לא שובצו קורסים למערכת השעות')\r\n    isValid = false\r\n  }\r\n  return isValid\r\n}\r\n\r\nconst postSchedulerData = async (url) => {\r\n  const photoURL = user.photoURL\r\n  const displayName = user.displayName\r\n  axios({\r\n    method: 'post',\r\n    url: url,\r\n    data: {\r\n      schedulerData: {schedulerData},\r\n      photoURL: {photoURL},\r\n      displayName: {displayName},\r\n      year: {currYear},\r\n      semester: {currSemester}\r\n    }\r\n  });\r\n}\r\n\r\nconst handleSchedulerPublish = () => {\r\n  if(isSchedulerActionValid()) \r\n  {\r\n    var url = '/publishSchedulerData'\r\n    postSchedulerData(url)\r\n    handleAlarm('success', 'מערכת שעות פורסמה בהצלחה, ניתן לראותה בדף הבית')\r\n  }\r\n}\r\n\r\nconst handleSchedulerSave = () => {\r\n  if(isSchedulerActionValid()) {\r\n    var url = '/saveUserScheduleData/' + user.uid \r\n    postSchedulerData(url)\r\n    handleAlarm('success', 'מערכת שעות נשמרה בהצלחה')\r\n  }\r\n}\r\n\r\nconst onUserClick = (e, uid) => {\r\n  console.log(\"Clicked: \", uid)\r\n  var url = '/sharedSchedulersData/' + uid\r\n  postSchedulerData(url)\r\n  setShowUsers(false)\r\n  handleAlarm('success', 'מערכת שעות שותפה בהצלחה')\r\n}\r\n\r\nconst handleSchedulerShare = () => {\r\n  if(isSchedulerActionValid()) {\r\n    setShowUsers(true)\r\n  }\r\n}\r\n\r\nconst handleApprovalAlarm = (variant, text) => {\r\n  setShowApprovalAlarm(true)\r\n  setApprovalAlarmMessage(text)\r\n  setAlarmVariant(variant)\r\n}\r\n\r\nconst handleAlarm = (variant, text) => {\r\n  setTimeout(() => setMessage(''), 10000);\r\n  setMessage(text)\r\n  setAlarmVariant(variant)\r\n}\r\n\r\nreturn (\r\n  <div style={{height:'100%'}}>\r\n    <div style={{height:\"calc(100% - 64px)\", overflowY:\"scroll\"}}>\r\n      {show?\r\n        <>\r\n        <div style={{fontFamily: 'Calibri', fontSize: '24px'}}>\r\n          {message ? <Alert variant={alarmVariant} >{message}</Alert> : null}\r\n\r\n          <Alert \r\n          show={showApprovalAlarm} \r\n          variant={alarmVariant}\r\n          onClose={() => setShowApprovalAlarm(false)} \r\n          dismissible>\r\n            <Alert.Heading>{approvalAlarmMessage}</Alert.Heading>\r\n            <hr/>\r\n            <div className=\"d-flex justify-content-start\">\r\n              <Button \r\n                variant=\"outline-success\"\r\n                onClick={() => {\r\n                  setShowApprovalAlarm(false)\r\n                  handleSchedulerPublish()}} >\r\n                אישור\r\n              </Button>{' '}\r\n              <Button \r\n                variant=\"outline-danger\"\r\n                onClick={() => setShowApprovalAlarm(false)}>\r\n                סגירה\r\n              </Button>\r\n            </div>\r\n          </Alert>\r\n        </div>\r\n\r\n        <SelectUsers\r\n          show={showUsers}\r\n          onHide={() => setShowUsers(false)}\r\n          user={user}\r\n          users={users}\r\n          onChecked={onUserClick}\r\n        />\r\n\r\n        <PostInputModal\r\n          show={showPostInput}\r\n          onHide={() => setShowPostInput(false)}\r\n          setYear={setCurrYear}\r\n          setSemester={setCurrSemester}\r\n        />\r\n\r\n        <Container fluid>\r\n            <Row md={2}>\r\n                <Col>\r\n                  <Container style={{padding: '20px'}}>\r\n                    <Row>\r\n                      <Col sm={2}>\r\n                        <ButtonGroup vertical size=\"lg\">\r\n                          <Button\r\n                            variant=\"info\"\r\n                            onClick={() => \r\n                            {\r\n                              if(!currYear && !currSemester)\r\n                                setShowPostInput(true)\r\n                              handleApprovalAlarm('info', 'פרסום מערכת השעות יגרום לפרטים אישיים להפוך לציבוריים. האם להמשיך?')\r\n                            }}>\r\n                                פרסום\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"info\"\r\n                            onClick={() => {\r\n                              handleSchedulerShare()\r\n                              if(!currYear && !currSemester)\r\n                                setShowPostInput(true)\r\n                            }}>\r\n                                שיתוף\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"info\"\r\n                            onClick={handleSchedulerSave}>\r\n                                שמירה\r\n                          </Button>\r\n                        </ButtonGroup>\r\n                      </Col>\r\n                      <Col sm={10}>\r\n                        <form onSubmit={submit} className='mx-auto' style={formStyle}>\r\n                          <FormGroup role=\"form\">\r\n\r\n                            <Select class=\"form-control\" id=\"section\"\r\n                              menuPlacement=\"auto\"\r\n                              placeholder=\"שנת לימודים\"\r\n                              options={degreeYear}\r\n                              onChange={sectionChange}\r\n                            />\r\n                            <Select class=\"form-control\" id=\"semester\"\r\n                              menuPlacement=\"auto\"\r\n                              placeholder=\"סמסטר\"\r\n                              options={degreeSemester}\r\n                              onChange={semesterChange}\r\n                            />\r\n                            <div className=\"d-grid gap-2\"></div>\r\n                            <Button \r\n                              variant=\"info\"\r\n                              size=\"lg\"\r\n                              type=\"submit\">\r\n                                בחר/י\r\n                            </Button>\r\n                             <Button\r\n                              style={{marginRight:\"60px\"}}\r\n                              variant=\"info\"\r\n                              size=\"lg\"\r\n                              onClick={cleanData}\r\n                              type=\"clean\">\r\n                                ניקוי מערכת שעות\r\n                            </Button>\r\n                          </FormGroup>\r\n\r\n                        </form>\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                  <hr/>\r\n                  <SelectGroup\r\n                    courses={courses}\r\n                    groups={groups}\r\n                    exercise={exercise}\r\n                    exerciseData={allExercises}\r\n                    schedulerData={schedulerData}\r\n                    onCourseClicked={courseClicked}\r\n                    onGroupClicked={groupClicked}\r\n                    onExerciseClicked={exerciseClicked}\r\n                    currentCourse={currentCourse}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <SchedulerTable data={schedulerData} height='1150' />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n    \r\n      </>\r\n      : null}\r\n    </div>\r\n  </div>\r\n)\r\n}\r\n\r\nconst formStyle = {\r\n  color: 'black',\r\n  width: '600px',\r\n  textAlign: 'center',\r\n  fontFamily: 'Calibri',\r\n  fontSize:'20px'\r\n};\r\n\r\nexport default ScheduleCourses"]},"metadata":{},"sourceType":"module"}