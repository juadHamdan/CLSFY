[{"D:\\CLSFY\\src\\index.js":"1","D:\\CLSFY\\src\\App.js":"2","D:\\CLSFY\\src\\components\\AppBar.js":"3","D:\\CLSFY\\src\\components\\Login.js":"4","D:\\CLSFY\\src\\components\\Logout.js":"5","D:\\CLSFY\\src\\components\\firebase-config.js":"6","D:\\CLSFY\\src\\components\\AppStepper.js":"7","D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js":"8","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js":"9","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js":"10","D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js":"11","D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js":"12","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js":"13","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js":"14","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js":"15","D:\\CLSFY\\src\\components\\About.js":"16","D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js":"17","D:\\CLSFY\\src\\components\\show_example\\AppTable.js":"18","D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js":"19","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js":"20","D:\\CLSFY\\src\\components\\ModelsCards.js":"21","D:\\CLSFY\\src\\components\\ModelCard.js":"22","D:\\CLSFY\\src\\components\\DeleteConfirmationModal.js":"23","D:\\CLSFY\\src\\ThemeSettings.js":"24"},{"size":316,"mtime":1639863200005,"results":"25","hashOfConfig":"26"},{"size":6949,"mtime":1640904471364,"results":"27","hashOfConfig":"26"},{"size":6812,"mtime":1640882279009,"results":"28","hashOfConfig":"26"},{"size":1595,"mtime":1640468821828,"results":"29","hashOfConfig":"26"},{"size":1580,"mtime":1640871769021,"results":"30","hashOfConfig":"26"},{"size":526,"mtime":1638562198788,"results":"31","hashOfConfig":"26"},{"size":5223,"mtime":1640902937343,"results":"32","hashOfConfig":"26"},{"size":2818,"mtime":1640904471490,"results":"33","hashOfConfig":"26"},{"size":4581,"mtime":1640879661555,"results":"34","hashOfConfig":"26"},{"size":2531,"mtime":1640904489228,"results":"35","hashOfConfig":"26"},{"size":1330,"mtime":1640901214887,"results":"36","hashOfConfig":"26"},{"size":342,"mtime":1640881384717,"results":"37","hashOfConfig":"26"},{"size":1599,"mtime":1640946281886,"results":"38","hashOfConfig":"26"},{"size":4355,"mtime":1640902961232,"results":"39","hashOfConfig":"26"},{"size":2311,"mtime":1640872956305,"results":"40","hashOfConfig":"26"},{"size":906,"mtime":1640881064675,"results":"41","hashOfConfig":"26"},{"size":976,"mtime":1640468962670,"results":"42","hashOfConfig":"26"},{"size":949,"mtime":1640808744485,"results":"43","hashOfConfig":"26"},{"size":1071,"mtime":1640354949073,"results":"44","hashOfConfig":"26"},{"size":719,"mtime":1640468962670,"results":"45","hashOfConfig":"26"},{"size":1636,"mtime":1640810099933,"results":"46","hashOfConfig":"26"},{"size":3009,"mtime":1640894953247,"results":"47","hashOfConfig":"26"},{"size":1046,"mtime":1640468962670,"results":"48","hashOfConfig":"26"},{"size":214,"mtime":1640896056955,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"8vrk3u",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\CLSFY\\src\\index.js",[],["110","111"],"D:\\CLSFY\\src\\App.js",["112","113"],"import React from 'react';\nimport './App.css';\nimport { useState, useRef } from 'react'\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport AppBar from'./components/AppBar'\nimport About from'./components/About'\nimport AppStepper from'./components/AppStepper'\n\nimport HandleFile from'./components/file_handling/HandleFile'\nimport ModelsCards from'./components/ModelsCards'\nimport ScoresAndStats from'./components/scores_and_stats/ScoresAndStats'\nimport HandleDataToPredict from'./components/handle_data_to_predict/HandleDataToPredict'\n\nimport Container from '@mui/material/Container';\nimport { Snackbar } from '@mui/material';\n\nconst TextString = \"Text\"\nconst FeaturesString = \"Features\"\n\nconst TextClassificationColor = \"#ffcc80\"\nconst FeaturesClassificationColor = \"#80cbc4\"\n\nconst anonymousString = \"Anonymous\"\nconst signedString = \"Signed\"\n\nconst uploadStep = 0\nconst reportStep = 1\nconst PredictStep = 2\n\nconst scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\nfunction App()\n{\n  const [activeStep, setActiveStep] = useState(uploadStep)\n  const [themeColor, setThemeColor] = useState(TextClassificationColor)  \n  const [classifyingType, setClassifyingType] = useState(TextString)\n  const [report, setReport] = useState({})\n  const [user, setUser] = useState(null)\n  const [userType, setUserType] = useState(anonymousString)\n  const [uid, setUid] = useState(uuidv4()) //generate unique id for anonymous user\n  const [featuresLabels, setFeaturesLabels] = useState([])\n  const [modelId, setModelId] = useState(null)\n  const [modelsData, setModelsData] = useState(null)\n  const [message, setMessage] = useState(null)\n  const [switchOn, setSwitchOn] = useState(false)\n  const [disableSwitch, setDisabledSwitch] = useState(false)\n\n  const deleteModelFromDatabase = async (uid, modelIdToDelete) => {\n    const url = 'model/' + uid\n    try {\n        const res = await axios({\n            method: 'delete',\n            url: url,\n            data:{\n              modelIdToDelete\n            }\n        });\n        console.log(res.data)\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const fetchModelsData = async (uid) => {\n    const url = 'models-data/' + uid\n    try {\n        const res = await axios({\n            method: 'get',\n            url: url\n        });\n        console.log(res.data)\n        setModelsData(res.data['models_data'])\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const onLogin = async (userFromLogin) => {\n    setUser(userFromLogin)\n    setUserType(signedString)\n    setUid(userFromLogin.uid)\n    fetchModelsData(userFromLogin.uid)\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n    setUser(null)\n  }\n\n  const onPredictFormSubmit = async (predictedClass) => {\n    console.log(predictedClass)\n    //predictFeatures(dataToPredict)\n    //send to \n  }\n\n  const onPredictFileSubmit = (predictedClass) => {\n    console.log(predictedClass)\n  }\n\n  const onFileSubmit = async (data) => {\n    setDisabledSwitch(true)\n    setActiveStep(reportStep)\n    setModelId(data['file_id'])\n    console.log(data['report'])\n    const dataReport = data['report']\n    console.log(typeof dataReport)\n    setReport(dataReport)\n    setFeaturesLabels(data['report']['features_labels'])\n    setMessage('Trained model saved')\n  }\n\n  const handleSwitch = (SwitchTextString) => {\n    setClassifyingType(SwitchTextString)\n    if(!switchOn)\n      setThemeColor(FeaturesClassificationColor)\n    else\n      setThemeColor(TextClassificationColor)\n    setSwitchOn(!switchOn)\n  }\n\n  const deleteModelFromModelsData = (modelIdToDelete) => {\n    const newModelsData = modelsData.filter(modelData => modelData['id'] !== modelIdToDelete)\n    console.log(newModelsData)\n    setModelsData(newModelsData)\n  }\n\n  const onModelSelection = (modelId, features) => {\n    setFeaturesLabels(features)\n    setModelId(modelId)\n    setActiveStep(PredictStep)\n    executeScrollStart()\n  }\n\n  const handleModelDelete = (modelIdToDelete) => {\n    deleteModelFromModelsData(modelIdToDelete)\n    deleteModelFromDatabase(uid, modelIdToDelete)\n  }\n\n  const handleActiveSetChange = (step) => {\n    setActiveStep(step)\n  }\n\n  const homeRef = useRef(null)\n  const executeScrollHome = () => scrollToRef(homeRef)\n  const startRef = useRef(null)\n  const executeScrollStart = () => scrollToRef(startRef)\n\n  const testButtonClick = () => {\n    setMessage('Scores & Stats updated')\n  }\n\n  return ( \n    <div style={{fontFamily: 'Calibri light', fontSize: '1.25rem'}}>\n      <Snackbar\n        open={message}\n        autoHideDuration={6000}\n        onClose={() => setMessage(null)}\n        message={message}\n      />\n\n      <Container ref={homeRef} sx={{width: \"90%\"}}>\n        <AppBar\n          user={user} \n          handleLogin={onLogin} \n          handleLogout={onLogout}\n          handleHomeClick={executeScrollHome}\n          handleStartClick={executeScrollStart}\n        />\n        <div style={{ height: '10rem' }} />\n        <About user={user}/>\n        <button onClick={testButtonClick}>Test</button>\n        <br/>\n        {modelsData?\n          <>\n            <ModelsCards \n              modelsData={modelsData}\n              onModelSelection={onModelSelection}\n              handleModelDelete={handleModelDelete}\n            /> \n            <hr/>\n          </>\n        : null}\n\n      </Container>\n\n      <div className=\"waves\" role=\"presentation\"></div>\n      <div className=\"content-bottom\" ref={startRef} style={{color: themeColor}}>\n        <div style={{ height: '5rem' }} />\n          <AppStepper\n            activeStep={activeStep}\n            setActiveStep={handleActiveSetChange}\n            firstStepComponent={\n              <HandleFile \n                uid={uid}\n                onFileSubmit={onFileSubmit}\n                handleSwitch={handleSwitch}\n                switchOn={switchOn}\n                disableSwitch={disableSwitch}\n                classifyingType={classifyingType}\n                themeColor={themeColor}\n                TextClassificationColor={TextClassificationColor}\n                FeaturesClassificationColor={FeaturesClassificationColor}\n                TextString={TextString}\n                FeaturesString={FeaturesString}\n              />}\n            secondStepComponent={\n              <ScoresAndStats \n                report={report}\n              />}\n            thirdStepComponent={\n              <HandleDataToPredict \n                uid={uid}\n                classifyingType={classifyingType}\n                featuresLabels={featuresLabels}\n                onPredictFormSubmit={onPredictFormSubmit}\n                onPredictFileSubmit={onPredictFileSubmit}\n                modelId={modelId}\n              />}\n          />\n          <div style={{ height: '10rem' }} />\n        </div>\n    </div>\n  );\n}\n\nconst appStyle = \n{\n  backgroundColor: '#444',\n  color: 'white',\n}\n\nexport default App;","D:\\CLSFY\\src\\components\\AppBar.js",["114","115"],"import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport Login from './Login'\r\nimport Logout from './Logout'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AccountCircleRoundedIcon from '@mui/icons-material/AccountCircleRounded';\r\n\r\nconst StartText = 'Get Started'\r\nconst LoginText = 'Login'\r\nconst LogoutText = 'Logout'\r\n\r\nconst pages = [StartText, LoginText];\r\nconst settings = [LogoutText];\r\n\r\nconst AppNavBar = ({handleHomeClick, handleStartClick, handleLogin, handleLogout, user}) => {\r\n    const [showLoginModal, setShowLoginModal] = useState(false);\r\n    const [showLogoutModal, setShowLogoutModal] = useState(false);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [anchorElUser, setAnchorElUser] = useState(null);\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleOpenUserMenu = (event) => {\r\n        setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setAnchorElUser(null);\r\n    };\r\n\r\n    const onLoginSuccess = () => {\r\n        setShowLoginModal(false)\r\n    }\r\n\r\n    const handleLogoutClick = () => {\r\n        handleCloseNavMenu()\r\n        setShowLogoutModal(true)\r\n    }\r\n\r\n\r\n  const handleItemClick = (event) => {\r\n    let itemClickedTextLowered = event.target.innerText.toLowerCase()\r\n    console.log(itemClickedTextLowered)\r\n    if(itemClickedTextLowered === StartText.toLowerCase())\r\n        handleStartClick();\r\n    else if(itemClickedTextLowered === LoginText.toLowerCase())\r\n        setShowLoginModal(true)\r\n    handleCloseNavMenu()\r\n  };\r\n\r\n  return (\r\n      <>\r\n        <AppBar position=\"fixed\" style={{color: \"black\", backgroundColor: \"white\"}}>\r\n            <Container>\r\n                <Toolbar disableGutters>\r\n                <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <IconButton\r\n                    size=\"large\"\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleOpenNavMenu}\r\n                    color=\"inherit\"\r\n                    >\r\n                    <MenuIcon/>\r\n                    </IconButton>\r\n                    <Menu\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElNav}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={Boolean(anchorElNav)}\r\n                    onClose={handleCloseNavMenu}\r\n                    sx={{\r\n                        display: { xs: 'block', md: 'none' },\r\n                    }}\r\n                    >\r\n                    {pages.map((page) => (\r\n                        <MenuItem key={page} onClick={handleItemClick}>\r\n                        <Typography variant=\"button\" display=\"block\" gutterBottom textAlign=\"center\">\r\n                            <strong>{page}</strong>\r\n                        </Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n\r\n                    <Login \r\n                        show={showLoginModal} \r\n                        onHide={() => setShowLoginModal(false)}\r\n                        onLogin={handleLogin}\r\n                        onLoginSuccess={onLoginSuccess}\r\n                    />\r\n                    <Logout \r\n                        show={showLogoutModal} \r\n                        onHide={() => setShowLogoutModal(false)}\r\n                        onLogoutSuccess={handleLogout}\r\n                    />\r\n\r\n\r\n                    </Menu>\r\n                </Box>\r\n\r\n                <div style={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <Button>\r\n                        <img onClick={handleHomeClick} src=\"img/CLSFYlogo.png\" alt=\"logo\" height=\"90rem\" width=\"160rem\"/>\r\n                    </Button>\r\n                </div>\r\n\r\n\r\n                <Box sx={{ paddingLeft: \"10rem\", flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                    {pages.map((page) => (\r\n                    <Button\r\n                        key={page}\r\n                        onClick={handleItemClick}\r\n                        sx={{ fontSize: \"0.8rem\", paddingLeft: \"2rem\", paddingRight: \"2rem\", my: 4, color: 'black', display: 'block' }}\r\n                    >\r\n                        <strong>{page}</strong>\r\n                    </Button>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ flexGrow: 0 }}>\r\n                    <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n\r\n                    {user && user.photoURL?\r\n                        <Avatar alt=\"User\" src={user.photoURL} />\r\n                    :\r\n                        <AccountCircleRoundedIcon fontSize=\"large\"/>\r\n                    }\r\n                    </IconButton>\r\n                    <Menu\r\n                    sx={{ mt: '45px' }}\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElUser}\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    open={Boolean(anchorElUser)}\r\n                    onClose={handleCloseUserMenu}\r\n                    >\r\n                    {settings.map((setting) => (\r\n                        <MenuItem key={setting} onClick={handleLogoutClick}>\r\n                            <Typography textAlign=\"center\">{setting}</Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Menu>\r\n                </Box>\r\n\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    </>\r\n  );\r\n};\r\nexport default AppNavBar;\r\n","D:\\CLSFY\\src\\components\\Login.js",["116"],"import firebase from './firebase-config'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\r\n  \r\nconst Login = ({show, onHide, onLogin, onLoginSuccess}) => {\r\n    const uiConfig = { \r\n        signInFlow: 'popup',\r\n        signInOptions: [\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n            firebase.auth.GithubAuthProvider.PROVIDER_ID,\r\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n        ],\r\n        callbacks: {\r\n            signInSuccess: (user) => {\r\n                onLoginSuccess(true)\r\n                onLogin(user)\r\n                console.log(user)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal \r\n                show={show} \r\n                onHide={onHide}\r\n                size='sm'\r\n                style={modalStyle}\r\n                centered\r\n                animation={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title> Login </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{textAlign:'center'}} >\r\n                    <StyledFirebaseAuth\r\n                        uiConfig={uiConfig}\r\n                        firebaseAuth={firebase.auth()}\r\n                    />\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\nconst modalStyle = {\r\n    fontFamily: 'Calibri light',\r\n    fontSize:'18px'\r\n  };","D:\\CLSFY\\src\\components\\Logout.js",["117"],"import firebase from './firebase-config'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useState } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\n  \r\nconst Logout = ({show, onHide, onLogoutSuccess}) => {\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    const handleSuccess = () => {\r\n        onLogoutSuccess(true)\r\n        setSuccess(true)\r\n    }\r\n    const handleFailure = () => {\r\n        onLogoutSuccess(false)\r\n        setSuccess(false)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        firebase.auth().signOut()\r\n            .then(function() {\r\n                handleSuccess()\r\n            })\r\n            .catch(function(error) {\r\n                handleFailure()\r\n            });\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            <Modal \r\n                size='sm'\r\n                show={show} \r\n                onHide={onHide}\r\n                style={modalStyle}\r\n                onEnter={handleLogout}\r\n                centered\r\n                animation={false}\r\n                >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Body style={{textAlign: 'center'}}> \r\n                    {success? \r\n                    <>Logged Out Successfully </>\r\n                    : \r\n                    <> <i className=\"bi bi-exclamation-circle\">{' '}Please login</i></> }\r\n                    </Modal.Body>\r\n                </Modal.Header>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logout\r\n\r\nconst modalStyle = {\r\n    padding: \"80px\",\r\n    fontFamily: 'Calibri light',\r\n    fontSize:'18px'\r\n  };\r\n","D:\\CLSFY\\src\\components\\firebase-config.js",[],"D:\\CLSFY\\src\\components\\AppStepper.js",[],"D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js",["118"],"import React from 'react'\r\nimport { useState } from 'react'\r\nimport AppSwitch from'./AppSwitch'\r\nimport UploadFile from './UploadFile'\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleFile = ({uid, onFileSubmit, handleSwitch, switchOn, disableSwitch, TextString, FeaturesString, classifyingType, TextClassificationColor, FeaturesClassificationColor, themeColor}) => {\r\n    return (\r\n        <Container maxWidth='md' sx={{width: \"90%\"}}>\r\n            <p style={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\", paddingLeft: \"0.5rem\", textDecoration: \"underline\"}}>\r\n                Choose Classifyier Type\r\n            </p>\r\n            <AppSwitch \r\n                leftSwitchText={TextString}\r\n                rightSwitchText={FeaturesString}\r\n                onSwitch={handleSwitch}\r\n                switchOn={switchOn}\r\n                disableSwitch={disableSwitch}\r\n                TextClassificationColor={TextClassificationColor}\r\n                FeaturesClassificationColor={FeaturesClassificationColor}\r\n            />\r\n            \r\n            <div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n                <hr/>\r\n                Upload Excel file is in the following format:\r\n                <br/>\r\n                {classifyingType === FeaturesString?\r\n                <>\r\n                    Features (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\", \"Class\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\", \"0\"]]}\r\n                    />\r\n                </>\r\n                :\r\n                <>\r\n                    Text (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\", \"Class\"]} \r\n                        tableItems={[[\"text1\", \"class1\"]]}\r\n                    />\r\n                </>\r\n                }   \r\n                <hr/>\r\n                <UploadFile \r\n                    url={classifyingType === \"Text\" ? '/classify-text/' + uid : 'classify-features/' + uid}\r\n                    onSubmit={onFileSubmit}\r\n                    successMessage={\"Model trained successfully\"}\r\n                    awaitMessage={\"File uploaded, Training model...\"}\r\n                />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HandleFile\r\n","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js",["119"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport UploadRoundedIcon from '@mui/icons-material/UploadRounded';\r\nimport Button from '@mui/material/Button';\r\nimport FindInPageRoundedIcon from '@mui/icons-material/FindInPageRounded';\r\n\r\nconst inputText = 'Supports: xls, xlsx, xlsm, xlsb, odf, ods, odt'\r\n\r\nconst UploadFile = ({url, onSubmit, successMessage, awaitMessage}) => {\r\n  const [file, setFile] = useState('');\r\n  const [filename, setFilename] = useState(inputText);\r\n  const [message, setMessage] = useState('');\r\n  const [messageVariant, setMessageVariant] = useState('');\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const [showSpinner, setShowSpinner] = useState(false)\r\n\r\n\r\n  const uploadStyle = {\r\n    fontFamily: 'Calibri',\r\n    fontSize:'1rem'\r\n  };\r\n\r\n\r\n  const onChange = e => {\r\n    const file = e.target.files[0]\r\n    const fileName = e.target.files[0].name\r\n    setFile(file);\r\n    setFilename(fileName);\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    setShowSpinner(true)\r\n\r\n    try {\r\n      const res = await axios.post(url, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: progressEvent => {\r\n          setUploadPercentage(Math.round((progressEvent.loaded * 100) / progressEvent.total));\r\n        }\r\n      });\r\n      setTimeout(() => setUploadPercentage(0),3000);\r\n      setTimeout(() => setMessage(''), 3000);\r\n\r\n\r\n      setMessage(successMessage)\r\n      setMessageVariant('success')\r\n      console.log(res.data)\r\n      setShowSpinner(false)\r\n      onSubmit(res.data) //to outside scope\r\n    } \r\n    catch (err) \r\n    {\r\n      if (err.response.status === 500)\r\n      {\r\n        setMessage(err.response.statusText)\r\n        setMessageVariant('danger')\r\n      }\r\n      else if (err.response.status === 400)\r\n      {\r\n        setMessage(err.response.statusText + \" Only Excel file allowed.\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else if (err.response.status === 409)\r\n      {\r\n        console.log(err.response.data)\r\n        const htmlString = err.response.data\r\n        setMessage(err.response.statusText + \" Model of file name already exists\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else \r\n      {\r\n        setMessage(err.response.statusText);\r\n        setMessageVariant('info')\r\n      }\r\n      setUploadPercentage(0)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <div className='mx-auto' style={uploadStyle}>\r\n            {message ? \r\n            <Alert variant={messageVariant}>\r\n              {message} {showSpinner?<CircularProgress size=\"10\" color=\"warning\"/>:null}\r\n            </Alert>\r\n             : null}\r\n            {uploadPercentage === 100 ? <Alert variant='info' >{awaitMessage}</Alert> : null}\r\n\r\n            <form onSubmit={onSubmit} style={{textAlign:'center'}} >\r\n            <div className='custom-file'>\r\n                <input\r\n                type='file'\r\n                color='black'\r\n                className='custom-file-input'\r\n                size=\"lg\"\r\n                id='customFile'\r\n                onChange={onChange}\r\n                />\r\n                <label style={{borderRadius: '1.5rem', borderColor: \"inherit\", color: \"inherit\", backgroundColor: \"inherit\"}} className='custom-file-label' htmlFor='customFile'>\r\n                  {filename} <FindInPageRoundedIcon/>\r\n                </label>\r\n            </div>\r\n\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Box sx={{ width: '100%', mr: 1 }}>\r\n                <LinearProgress color=\"inherit\" variant=\"determinate\" value={uploadPercentage} />\r\n              </Box>\r\n              <Box sx={{ minWidth: 35 , }}>\r\n                <Typography ><strong>{`${uploadPercentage}%`}</strong></Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n              <Button\r\n                onClick={handleSubmit}\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n              >\r\n                <UploadRoundedIcon/>\r\n                <strong>Upload</strong>\r\n                <UploadRoundedIcon/>\r\n              </Button>\r\n            \r\n            </form>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadFile;","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js",["120","121"],"import * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst AppSwitch = ({leftSwitchText, rightSwitchText, onSwitch, switchOn, disableSwitch, TextClassificationColor, FeaturesClassificationColor}) => {\r\n    return (\r\n        <Container>\r\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n            <Typography sx={{color: TextClassificationColor}}>{leftSwitchText}</Typography>\r\n            {disableSwitch} {switchOn === true}\r\n            <MySwitch \r\n                disabled={disableSwitch}\r\n                defaultChecked={disableSwitch && switchOn}\r\n                sx={{ m: 1, textAlign: \"center\"}} \r\n                onClick={onSwitch}\r\n              />\r\n            <Typography sx={{color: FeaturesClassificationColor}}>{rightSwitchText}</Typography>\r\n          </Stack>\r\n        </Container>\r\n      );\r\n}\r\n\r\nconst MySwitch = styled((props) => (\r\n  <Switch focusVisibleClassName=\".Mui-focusVisible\" disableRipple {...props} />))(({ theme }) => ({\r\n  width: 42,\r\n  height: 26,\r\n  padding: 0,\r\n  textAlign: \"center\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    padding: 0,\r\n    margin: 2,\r\n    transitionDuration: \"300ms\",\r\n    \"&.Mui-checked\": {\r\n      transform: \"translateX(16px)\",\r\n      color: \"#fff\",\r\n      \"& + .MuiSwitch-track\": {\r\n        backgroundColor: \"#80cbc4\",\r\n        opacity: 1,\r\n        border: 0\r\n      },\r\n      \"&.Mui-disabled + .MuiSwitch-track\": {\r\n        opacity: 0.5\r\n      }\r\n    },\r\n    \"&.Mui-focusVisible .MuiSwitch-thumb\": {\r\n      color: \"#000\",\r\n      border: \"6px solid #fff\"\r\n    },\r\n    \"&.Mui-disabled .MuiSwitch-thumb\": {\r\n      color:\r\n        theme.palette.mode === \"light\"\r\n          ? theme.palette.grey[100]\r\n          : theme.palette.grey[600]\r\n    },\r\n    \"&.Mui-disabled + .MuiSwitch-track\": {\r\n      opacity: theme.palette.mode === \"light\" ? 0.7 : 0.3\r\n    }\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    boxSizing: \"border-box\",\r\n    width: 22,\r\n    height: 22,\r\n    backgroundColor: \"#363D3F\"\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    borderRadius: 26 / 2,\r\n    backgroundColor: \"#ffcc80\",\r\n    opacity: 1,\r\n    transition: theme.transitions.create([\"background-color\"], {\r\n      duration: 500\r\n    })\r\n  }\r\n}));\r\n\r\nexport default AppSwitch;\r\n","D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js",[],"D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js",["122"],"import Typography from '@mui/material/Typography';\r\nimport Rating from '@mui/material/Rating';\r\n\r\nconst MyRating = ({value}) => {\r\n    return(\r\n        <> \r\n            <Rating sx={{verticalAlign: 'text-bottom'}} size='large' name=\"half-rating-read\" value={value} precision={0.5} readOnly />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyRating;","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js",[],"D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js",["123"],"import React from 'react'\r\nimport axios from 'axios';\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport ClassModal from './ClassModal'\r\n\r\nconst HandleDataToPredict = ({uid, classifyingType, featuresLabels, onPredictFormSubmit, onPredictFileSubmit, modelId}) => {\r\n    const [classPrediction, setClassPrediction] = React.useState(null)\r\n    const [showClassPrediction, setShowClassPrediction] = React.useState(false)\r\n\r\n    const predict = async (url, dataToPredict) => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'post',\r\n                url: url,\r\n                data: {\r\n                    modelId,\r\n                    dataToPredict\r\n                }\r\n            });\r\n            console.log(res.data)\r\n            setClassPrediction(res.data[\"class\"])\r\n            setShowClassPrediction(true)\r\n            onPredictFormSubmit(classPrediction)\r\n          } \r\n          catch (err) \r\n          {\r\n            if (err.response.status === 500)\r\n            {\r\n              //setMessage(err.response.statusText)\r\n            }\r\n            else if (err.response.status === 400)\r\n            {\r\n              //setMessage(err.response.statusText, \"Only Excel file allowed.\")\r\n            }\r\n            else \r\n            {\r\n            }\r\n          }\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        console.log(data)\r\n        const url = (classifyingType === \"Text\" ? 'predict-data/' + uid : 'predict-features/' + uid)\r\n        predict(url, data)\r\n    }\r\n\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n    \r\n\r\n    return (\r\n            //<div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n        <Container maxWidth='md' sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n            <ClassModal\r\n                show={showClassPrediction} \r\n                onHide={() => setShowClassPrediction(false)} \r\n                text={classPrediction}\r\n            />\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={handleFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text1\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        featuresLabels={featuresLabels} \r\n                        onSubmit={handleFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={onPredictFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js",[],"D:\\CLSFY\\src\\components\\About.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTable.js",[],"D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js",["124"],"import React from 'react'\r\nimport AppTableModal from '../show_example/AppTableModal'\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoRoundedIcon from '@mui/icons-material/InfoRounded';\r\n\r\nconst ExampleButton = ({buttonText, tableTitle, tableFeatures, tableItems}) => {\r\n    const [showModalTable, setShowModalTable] = React.useState(false)\r\n    return (\r\n        <>\r\n            <Fab \r\n                style={{color: \"inherit\", backgroundColor: \"inherit\"}}\r\n                onClick={() => setShowModalTable(true)}\r\n                size=\"small\" \r\n                variant=\"extended\" \r\n                color=\"inherit\">\r\n            <InfoRoundedIcon sx={{ mr: 1 }} />\r\n            {buttonText}\r\n            </Fab>\r\n\r\n            <AppTableModal \r\n                show={showModalTable}\r\n                onHide={() => setShowModalTable(false)} \r\n                title={tableTitle}\r\n                features={tableFeatures} \r\n                items={tableItems}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExampleButton\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js",[],"D:\\CLSFY\\src\\components\\ModelsCards.js",[],"D:\\CLSFY\\src\\components\\ModelCard.js",["125"],"import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport CloseButton from 'react-bootstrap/CloseButton'\r\nimport ExampleButton from './show_example/ExampleButton'\r\nimport MyRating from './scores_and_stats/Rating'\r\n\r\n\r\nconst ModelCard = ({modelData, onClick, handleDelete}) => {\r\n    const [CreationString, setCreationString] = React.useState(\"\")\r\n    const fileName = modelData['file_name']\r\n    const dateTime = modelData['date_time']\r\n    const featuresLabels = modelData['report']['features_labels']\r\n    const classificationType = modelData['report']['classification_type']\r\n    const accuracy = modelData['report']['accuracy']\r\n\r\n    React.useEffect(() => {\r\n        getStringOfDaysFromCreation()\r\n        console.log(\"Here\")\r\n      }, [dateTime]); // get CreationString when datetime changes\r\n\r\n\r\n    const getStringOfDaysFromCreation = () => {\r\n        let dateTimeCreated = new Date(dateTime)\r\n        let dateTimeCurrent = new Date()\r\n        // One day in milliseconds\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n\r\n        // Calculating the time difference between two dates\r\n        const diffInTime = dateTimeCurrent.getTime() - dateTimeCreated.getTime();\r\n\r\n        // Calculating the no. of days between two dates\r\n        const diffInDays = Math.round(diffInTime / oneDay);\r\n        \r\n        console.log(diffInDays)\r\n\r\n        if(diffInDays === 0)\r\n            setCreationString(\"Created Today\")\r\n        else\r\n            setCreationString(`Created ${diffInDays} Days Ago`)\r\n    }\r\n\r\n    return (\r\n        <div style={{color: \"black\", textAlign: 'center'}}>\r\n                <Card style={{width: '20rem' }}>\r\n                <Card.Body >\r\n                    <CloseButton onClick={handleDelete}/>\r\n                    <Button \r\n                        style={{paddingLeft: '4rem', paddingRight: '4rem'}}\r\n                        onClick={onClick}\r\n                        variant=\"white\">\r\n                        <Card.Title>{fileName}</Card.Title>\r\n                        Classification Type: <strong>{classificationType}</strong>\r\n                        <MyRating value={accuracy * 5} />\r\n                        <hr/>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{dateTime}</Card.Subtitle>\r\n                    </Button>\r\n                    <hr/>\r\n                    <Card.Text>\r\n                        <ExampleButton\r\n                            buttonText={\"Show Attributes Of Model\"}\r\n                            tableTitle={\"Attributes:\"}\r\n                            tableFeatures={featuresLabels}\r\n                            tableItems={[]}\r\n                        />\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer className=\"text-muted\" style={{backgroundColor: '#ffcc80'}}>\r\n                    {CreationString}\r\n                </Card.Footer>\r\n                </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCard\r\n","D:\\CLSFY\\src\\components\\DeleteConfirmationModal.js",[],"D:\\CLSFY\\src\\ThemeSettings.js",["126"],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":41,"column":10,"nodeType":"133","messageId":"134","endLine":41,"endColumn":18},{"ruleId":"131","severity":1,"message":"135","line":232,"column":7,"nodeType":"133","messageId":"134","endLine":232,"endColumn":15},{"ruleId":"131","severity":1,"message":"136","line":6,"column":10,"nodeType":"133","messageId":"134","endLine":6,"endColumn":16},{"ruleId":"131","severity":1,"message":"137","line":16,"column":8,"nodeType":"133","messageId":"134","endLine":16,"endColumn":15},{"ruleId":"131","severity":1,"message":"138","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"138","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"139","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":18},{"ruleId":"131","severity":1,"message":"140","line":77,"column":15,"nodeType":"133","messageId":"134","endLine":77,"endColumn":25},{"ruleId":"131","severity":1,"message":"141","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":17},{"ruleId":"131","severity":1,"message":"142","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":24},{"ruleId":"131","severity":1,"message":"143","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":18},{"ruleId":"131","severity":1,"message":"144","line":51,"column":11,"nodeType":"133","messageId":"134","endLine":51,"endColumn":27},{"ruleId":"131","severity":1,"message":"138","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":14},{"ruleId":"145","severity":1,"message":"146","line":20,"column":10,"nodeType":"147","endLine":20,"endColumn":20,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":10,"column":1,"nodeType":"151","endLine":10,"endColumn":84},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'userType' is assigned a value but never used.","Identifier","unusedVar","'appStyle' is assigned a value but never used.","'styled' is defined but never used.","'Tooltip' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'htmlString' is assigned a value but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Typography' is defined but never used.","'handleFileSubmit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getStringOfDaysFromCreation'. Either include it or remove the dependency array.","ArrayExpression",["154"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Update the dependencies array to be: [dateTime, getStringOfDaysFromCreation]",{"range":"157","text":"158"},[803,813],"[dateTime, getStringOfDaysFromCreation]"]