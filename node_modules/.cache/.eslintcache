[{"D:\\CLSFY\\src\\index.js":"1","D:\\CLSFY\\src\\App.js":"2","D:\\CLSFY\\src\\components\\AppBar.js":"3","D:\\CLSFY\\src\\components\\Login.js":"4","D:\\CLSFY\\src\\components\\Logout.js":"5","D:\\CLSFY\\src\\components\\firebase-config.js":"6","D:\\CLSFY\\src\\components\\AppStepper.js":"7","D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js":"8","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js":"9","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js":"10","D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js":"11","D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js":"12","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js":"13","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js":"14","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js":"15","D:\\CLSFY\\src\\components\\About.js":"16","D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js":"17","D:\\CLSFY\\src\\components\\show_example\\AppTable.js":"18","D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js":"19","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js":"20"},{"size":316,"mtime":1639863200005,"results":"21","hashOfConfig":"22"},{"size":8941,"mtime":1640026289477,"results":"23","hashOfConfig":"22"},{"size":6836,"mtime":1638711095876,"results":"24","hashOfConfig":"22"},{"size":1503,"mtime":1638711179815,"results":"25","hashOfConfig":"22"},{"size":1764,"mtime":1638711187260,"results":"26","hashOfConfig":"22"},{"size":526,"mtime":1638562198788,"results":"27","hashOfConfig":"22"},{"size":4993,"mtime":1639488829838,"results":"28","hashOfConfig":"22"},{"size":2516,"mtime":1639866398231,"results":"29","hashOfConfig":"22"},{"size":4768,"mtime":1639866398231,"results":"30","hashOfConfig":"22"},{"size":2824,"mtime":1638831565367,"results":"31","hashOfConfig":"22"},{"size":597,"mtime":1639780625380,"results":"32","hashOfConfig":"22"},{"size":365,"mtime":1638715875992,"results":"33","hashOfConfig":"22"},{"size":1552,"mtime":1639488656735,"results":"34","hashOfConfig":"22"},{"size":4083,"mtime":1639867870692,"results":"35","hashOfConfig":"22"},{"size":2384,"mtime":1639817628487,"results":"36","hashOfConfig":"22"},{"size":727,"mtime":1640026279544,"results":"37","hashOfConfig":"22"},{"size":914,"mtime":1638871915615,"results":"38","hashOfConfig":"22"},{"size":939,"mtime":1638871896519,"results":"39","hashOfConfig":"22"},{"size":1059,"mtime":1638892659750,"results":"40","hashOfConfig":"22"},{"size":645,"mtime":1639867820281,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8vrk3u",{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CLSFY\\src\\index.js",[],"D:\\CLSFY\\src\\App.js",["90","91","92","93","94","95","96","97","98","99","100","101","102"],"D:\\CLSFY\\src\\components\\AppBar.js",["103"],"import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport Login from './Login'\r\nimport Logout from './Logout'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AccountCircleRoundedIcon from '@mui/icons-material/AccountCircleRounded';\r\n\r\nconst StartText = 'Get Started'\r\nconst LoginText = 'Login'\r\nconst LogoutText = 'Logout'\r\n\r\nconst pages = [StartText, LoginText];\r\nconst settings = [LogoutText];\r\n\r\nconst AppNavBar = ({handleStartClick, handleLogin, handleLogout, user}) => {\r\n    const [showLoginModal, setShowLoginModal] = useState(false);\r\n    const [showLogoutModal, setShowLogoutModal] = useState(false);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [anchorElUser, setAnchorElUser] = useState(null);\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.currentTarget);\r\n    };\r\n    const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n    };\r\n\r\n    const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n    };\r\n\r\n    const onLoginSuccess = () => {\r\n    setShowLoginModal(false)\r\n    }\r\n\r\n    const handleLogoutClick = () => {\r\n        handleCloseNavMenu()\r\n        setShowLogoutModal(true)\r\n    }\r\n\r\n\r\n  const handleItemClick = (event) => {\r\n    let itemClickedTextLowered = event.target.innerText.toLowerCase()\r\n    console.log(itemClickedTextLowered)\r\n    if(itemClickedTextLowered === StartText.toLowerCase())\r\n        handleStartClick();\r\n    else if(itemClickedTextLowered === LoginText.toLowerCase())\r\n        setShowLoginModal(true)\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n      <>\r\n        <AppBar position=\"fixed\" style={{color: \"black\", backgroundColor: \"white\"}}>\r\n            <Container>\r\n                <Toolbar disableGutters>\r\n                <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <IconButton\r\n                    size=\"large\"\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleOpenNavMenu}\r\n                    color=\"inherit\"\r\n                    >\r\n                    <MenuIcon/>\r\n                    </IconButton>\r\n                    <Menu\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElNav}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={Boolean(anchorElNav)}\r\n                    onClose={handleCloseNavMenu}\r\n                    sx={{\r\n                        display: { xs: 'block', md: 'none' },\r\n                    }}\r\n                    >\r\n                    {pages.map((page) => (\r\n                        <MenuItem key={page} onClick={handleItemClick}>\r\n                        <Typography variant=\"button\" display=\"block\" gutterBottom textAlign=\"center\">\r\n                            <strong>{page}</strong>\r\n                        </Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n\r\n                    <Login \r\n                        show={showLoginModal} \r\n                        onHide={() => setShowLoginModal(false)}\r\n                        onLogin={handleLogin}\r\n                        onLoginSuccess={onLoginSuccess}\r\n                    />\r\n                    <Logout \r\n                        show={showLogoutModal} \r\n                        onHide={() => setShowLogoutModal(false)}\r\n                        onLogoutSuccess={handleLogout}\r\n                    />\r\n\r\n\r\n                    </Menu>\r\n                </Box>\r\n\r\n                <div style={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <Button>\r\n                        <img onClick={() => window.scroll(0, 0)} src=\"img/CLSFYlogo.png\" alt=\"logo\" height=\"90rem\" width=\"160rem\"/>\r\n                    </Button>\r\n                </div>\r\n\r\n\r\n                <Box sx={{ paddingLeft: \"10rem\", flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                    {pages.map((page) => (\r\n                    <Button\r\n                        key={page}\r\n                        onClick={handleItemClick}\r\n                        sx={{ fontSize: \"0.8rem\", paddingLeft: \"2rem\", paddingRight: \"2rem\", my: 4, color: 'black', display: 'block' }}\r\n                    >\r\n                        <strong>{page}</strong>\r\n                    </Button>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ flexGrow: 0 }}>\r\n                <Tooltip title=\"Open settings\">\r\n                    <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n\r\n                    {user && user.photoURL?\r\n                        <Avatar alt=\"User\" src={user.photoURL} />\r\n                    :\r\n                        <AccountCircleRoundedIcon size=\"large\"/>\r\n                    }\r\n                    </IconButton>\r\n                </Tooltip>\r\n                    <Menu\r\n                    sx={{ mt: '45px' }}\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElUser}\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    open={Boolean(anchorElUser)}\r\n                    onClose={handleCloseUserMenu}\r\n                    >\r\n                    {settings.map((setting) => (\r\n                        <MenuItem key={setting} onClick={handleLogoutClick}>\r\n                            <Typography textAlign=\"center\">{setting}</Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Menu>\r\n                </Box>\r\n\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    </>\r\n  );\r\n};\r\nexport default AppNavBar;\r\n",["104","105"],"D:\\CLSFY\\src\\components\\Login.js",["106"],"import firebase from './firebase-config'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\r\n  \r\nconst Login = ({show, onHide, onLogin, onLoginSuccess}) => {\r\n    const uiConfig = { \r\n        signInFlow: 'popup',\r\n        signInOptions: [\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n            firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n            firebase.auth.GithubAuthProvider.PROVIDER_ID,\r\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n        ],\r\n        callbacks: {\r\n            signInSuccess: (user) => {\r\n                onLoginSuccess(true)\r\n                onLogin(user)\r\n                console.log(user)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal show={show} \r\n            onHide={onHide}\r\n            style={modalStyle}\r\n            centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title> Login </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{textAlign:'center'}} >\r\n                    <StyledFirebaseAuth\r\n                        uiConfig={uiConfig}\r\n                        firebaseAuth={firebase.auth()}\r\n                    />\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\nconst modalStyle = {\r\n    fontFamily: 'Calibri light',\r\n    fontSize:'18px'\r\n  };","D:\\CLSFY\\src\\components\\Logout.js",[],"D:\\CLSFY\\src\\components\\firebase-config.js",[],"D:\\CLSFY\\src\\components\\AppStepper.js",["107","108"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Stack from '@mui/material/Stack';\r\nimport Check from '@mui/icons-material/Check';\r\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\r\n\r\nconst steps = ['Upload Excel File', 'Scores & Statistics', 'Predict New Data'];\r\n\r\nconst AppStepper = ({firstStepComponent, secondStepComponent, thirdStepComponent}) => {\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Stepper activeStep={activeStep} alternativeLabel connector={<QontoConnector />}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false;\r\n          }\r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps} StepIconComponent={QontoStepIcon}>\r\n                <Typography sx={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\"}} variant=\"caption\">{label}</Typography>\r\n              </StepLabel>\r\n            </Step>\r\n          );\r\n        })}\r\n      </Stepper>\r\n        <>\r\n\r\n            <br/>\r\n            <hr/>\r\n            {activeStep === 0? firstStepComponent : null}\r\n            {activeStep === 1? secondStepComponent : null}\r\n            {activeStep === 2? thirdStepComponent : null}\r\n            <hr/>\r\n\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'row'}}>\r\n            <Button\r\n              color=\"inherit\"\r\n              variant=\"contained\"\r\n              disabled={activeStep === 0}\r\n              onClick={handleBack}\r\n              sx={{ mr: 1 }}> \r\n              <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Back</Typography>\r\n            </Button>\r\n\r\n            <Box sx={{ flex: '1 1 auto' }} />\r\n\r\n            {activeStep === steps.length - 1 ? \r\n              <Button \r\n                onClick={handleReset} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Reset</Typography>\r\n              </Button>\r\n            : \r\n              <Button \r\n                onClick={handleNext} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Next</Typography>\r\n              </Button>\r\n            }\r\n          </Box>\r\n          <hr/>\r\n        </>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\r\n  [`&.${stepConnectorClasses.alternativeLabel}`]: {\r\n    top: 10,\r\n    left: 'calc(-50% + 16px)',\r\n    right: 'calc(50% + 16px)',\r\n  },\r\n  [`&.${stepConnectorClasses.active}`]: {\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n      borderColor: '#212121',\r\n    },\r\n  },\r\n  [`&.${stepConnectorClasses.completed}`]: {\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n      borderColor: '#212121',\r\n    },\r\n  },\r\n  [`& .${stepConnectorClasses.line}`]: {\r\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\r\n    borderTopWidth: 3,\r\n    borderRadius: 1,\r\n  },\r\n}));\r\n\r\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\r\n  color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\r\n  display: 'flex',\r\n  height: 22,\r\n  alignItems: 'center',\r\n  ...(ownerState.active && {\r\n    color: '#212121',\r\n  }),\r\n  '& .QontoStepIcon-completedIcon': {\r\n    color: '#212121',\r\n    zIndex: 1,\r\n    fontSize: 28,\r\n  },\r\n  '& .QontoStepIcon-circle': {\r\n    width: 12,\r\n    height: 12,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n}));\r\n\r\nfunction QontoStepIcon(props) {\r\n  const { active, completed, className } = props;\r\n\r\n  return (\r\n    <QontoStepIconRoot ownerState={{ active }} className={className}>\r\n      {completed ? (\r\n        <Check className=\"QontoStepIcon-completedIcon\" />\r\n      ) : (\r\n        <div className=\"QontoStepIcon-circle\" />\r\n      )}\r\n    </QontoStepIconRoot>\r\n  );\r\n}\r\n\r\n\r\nexport default AppStepper;","D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js",["109"],"import React from 'react'\r\nimport { useState } from 'react'\r\nimport AppSwitch from'./AppSwitch'\r\nimport UploadFile from './UploadFile'\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleFile = ({uid, onFileSubmit, handleSwitch, TextString, FeaturesString, classifyingType, firstColor, secondColor, themeColor}) => {\r\n    return (\r\n        <Container maxWidth='md' sx={{width: \"90%\"}}>\r\n            <p style={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\", paddingLeft: \"0.5rem\", textDecoration: \"underline\"}}>\r\n                Choose Classifyier Type\r\n            </p>\r\n            <AppSwitch \r\n                leftSwitchText={TextString}\r\n                rightSwitchText={FeaturesString}\r\n                onSwitch={handleSwitch}\r\n                firstColor={firstColor}\r\n                secondColor={secondColor}\r\n            />\r\n            \r\n            <div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n                <hr/>\r\n                Upload Excel file is in the following format:\r\n                <br/>\r\n                {classifyingType === FeaturesString?\r\n                <>\r\n                    Features (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\", \"Class\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\", \"0\"]]}\r\n                    />\r\n                </>\r\n                :\r\n                <>\r\n                    Text (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\", \"Class\"]} \r\n                        tableItems={[[\"text1\", \"class1\"]]}\r\n                    />\r\n                </>\r\n                }   \r\n                <hr/>\r\n                <UploadFile \r\n                    url={classifyingType === \"Text\" ? '/classify-text/' + uid : 'classify-features/' + uid}\r\n                    onSubmit={onFileSubmit}\r\n                    successMessage={\"Model trained successfully\"}\r\n                    awaitMessage={\"File uploaded, Training model...\"}\r\n                />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HandleFile\r\n","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js",["110","111","112","113"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n//import Button from 'react-bootstrap/Button'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Fab from '@mui/material/Fab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport UploadRoundedIcon from '@mui/icons-material/UploadRounded';\r\nimport Button from '@mui/material/Button';\r\nimport FindInPageRoundedIcon from '@mui/icons-material/FindInPageRounded';\r\n\r\nconst inputText = 'Supports: xls, xlsx, xlsm, xlsb, odf, ods, odt'\r\n\r\nconst UploadFile = ({url, onSubmit, successMessage, awaitMessage}) => {\r\n  const [file, setFile] = useState('');\r\n  const [filename, setFilename] = useState(inputText);\r\n  const [message, setMessage] = useState('');\r\n  const [messageVariant, setMessageVariant] = useState('');\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const [showSpinner, setShowSpinner] = useState(false)\r\n\r\n\r\n  const uploadStyle = {\r\n    fontFamily: 'Calibri',\r\n    fontSize:'1rem'\r\n  };\r\n\r\n\r\n  const onChange = e => {\r\n    const file = e.target.files[0]\r\n    const fileName = e.target.files[0].name\r\n    setFile(file);\r\n    setFilename(fileName);\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    setShowSpinner(true)\r\n\r\n    try {\r\n      const res = await axios.post(url, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: progressEvent => {\r\n          setUploadPercentage(Math.round((progressEvent.loaded * 100) / progressEvent.total));\r\n        }\r\n      });\r\n      setTimeout(() => setUploadPercentage(0),3000);\r\n      setTimeout(() => setMessage(''), 3000);\r\n\r\n\r\n      setMessage(successMessage)\r\n      setMessageVariant('success')\r\n      console.log(res.data)\r\n      setShowSpinner(false)\r\n      onSubmit(res.data) //to outside scope\r\n    } \r\n    catch (err) \r\n    {\r\n      if (err.response.status === 500)\r\n      {\r\n        setMessage(err.response.statusText)\r\n        setMessageVariant('danger')\r\n      }\r\n      else if (err.response.status === 400)\r\n      {\r\n        setMessage(err.response.statusText + \" Only Excel file allowed.\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else if (err.response.status === 409)\r\n      {\r\n        console.log(err.response.data)\r\n        const htmlString = err.response.data\r\n        setMessage(err.response.statusText + \" Model of file name already exists\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else \r\n      {\r\n        setMessage(err.response.statusText);\r\n        setMessageVariant('info')\r\n      }\r\n      setUploadPercentage(0)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <div className='mx-auto' style={uploadStyle}>\r\n            {message ? \r\n            <Alert variant={messageVariant}>\r\n              {message} {showSpinner?<CircularProgress size=\"10\" color=\"warning\"/>:null}\r\n            </Alert>\r\n             : null}\r\n            {uploadPercentage === 100 ? <Alert variant='info' >{awaitMessage}</Alert> : null}\r\n\r\n            <form onSubmit={onSubmit} style={{textAlign:'center'}} >\r\n            <div className='custom-file'>\r\n                <input\r\n                type='file'\r\n                color='black'\r\n                className='custom-file-input'\r\n                size=\"lg\"\r\n                id='customFile'\r\n                onChange={onChange}\r\n                />\r\n                <label style={{borderRadius: '1.5rem', borderColor: \"inherit\", color: \"inherit\", backgroundColor: \"inherit\"}} className='custom-file-label' htmlFor='customFile'>\r\n                  {filename} <FindInPageRoundedIcon/>\r\n                </label>\r\n            </div>\r\n\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Box sx={{ width: '100%', mr: 1 }}>\r\n                <LinearProgress color=\"inherit\" variant=\"determinate\" value={uploadPercentage} />\r\n              </Box>\r\n              <Box sx={{ minWidth: 35 , }}>\r\n                <Typography ><strong>{`${uploadPercentage}%`}</strong></Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n              <Button\r\n                onClick={handleSubmit}\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n              >\r\n                <UploadRoundedIcon/>\r\n                <strong>Upload</strong>\r\n                <UploadRoundedIcon/>\r\n              </Button>\r\n            \r\n            </form>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadFile;","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js",[],"D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js",[],"D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js",[],"D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js",[],"D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js",["114"],"import React from 'react'\r\nimport axios from 'axios';\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport ClassModal from './ClassModal'\r\n\r\nconst HandleDataToPredict = ({uid, classifyingType, features, onPredictFormSubmit, onPredictFileSubmit, modelId}) => {\r\n    const [classPrediction, setClassPrediction] = React.useState(null)\r\n\r\n    const predict = async (url, dataToPredict) => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'post',\r\n                url: url,\r\n                data: {\r\n                    modelId,\r\n                    dataToPredict\r\n                }\r\n            });\r\n            console.log(res.data)\r\n            setClassPrediction(res.data[\"class\"])\r\n          } \r\n          catch (err) \r\n          {\r\n            if (err.response.status === 500)\r\n            {\r\n              //setMessage(err.response.statusText)\r\n            }\r\n            else if (err.response.status === 400)\r\n            {\r\n              //setMessage(err.response.statusText, \"Only Excel file allowed.\")\r\n            }\r\n            else \r\n            {\r\n            }\r\n          }\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        console.log(data)\r\n        const url = (classifyingType === \"Text\" ? '/predict-data/' + uid : 'predict-features/' + uid)\r\n        predict(url, data)\r\n    }\r\n\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n    \r\n\r\n    return (\r\n            //<div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n        <Container maxWidth='md' sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n            <ClassModal\r\n                show={classPrediction} \r\n                onHide={() => setClassPrediction(null)} \r\n                title={'Class'}\r\n                body={classPrediction}\r\n            />\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={handleFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text1\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        features={features} \r\n                        onSubmit={handleFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={onPredictFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js",[],"D:\\CLSFY\\src\\components\\About.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTable.js",[],"D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js",["115"],"import React from 'react'\r\nimport AppTableModal from '../show_example/AppTableModal'\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoRoundedIcon from '@mui/icons-material/InfoRounded';\r\n\r\nconst ExampleButton = ({tableTitle, tableFeatures, tableItems}) => {\r\n    const [showModalTable, setShowModalTable] = React.useState(false)\r\n    return (\r\n        <>\r\n            <Fab \r\n                style={{color: \"inherit\", backgroundColor: \"inherit\"}}\r\n                onClick={() => setShowModalTable(true)}\r\n                size=\"small\" \r\n                variant=\"extended\" \r\n                color=\"inherit\">\r\n            <InfoRoundedIcon sx={{ mr: 1 }} />\r\n            Show Example\r\n            </Fab>\r\n\r\n            <AppTableModal \r\n                show={showModalTable}\r\n                onHide={() => setShowModalTable(false)} \r\n                title={tableTitle}\r\n                features={tableFeatures} \r\n                items={tableItems}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExampleButton\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js",[],{"ruleId":"116","severity":1,"message":"117","line":34,"column":10,"nodeType":"118","messageId":"119","endLine":34,"endColumn":26},{"ruleId":"116","severity":1,"message":"120","line":34,"column":28,"nodeType":"118","messageId":"119","endLine":34,"endColumn":47},{"ruleId":"116","severity":1,"message":"121","line":35,"column":10,"nodeType":"118","messageId":"119","endLine":35,"endColumn":25},{"ruleId":"116","severity":1,"message":"122","line":35,"column":27,"nodeType":"118","messageId":"119","endLine":35,"endColumn":45},{"ruleId":"116","severity":1,"message":"123","line":36,"column":10,"nodeType":"118","messageId":"119","endLine":36,"endColumn":31},{"ruleId":"116","severity":1,"message":"124","line":36,"column":33,"nodeType":"118","messageId":"119","endLine":36,"endColumn":57},{"ruleId":"116","severity":1,"message":"125","line":37,"column":10,"nodeType":"118","messageId":"119","endLine":37,"endColumn":33},{"ruleId":"116","severity":1,"message":"126","line":37,"column":35,"nodeType":"118","messageId":"119","endLine":37,"endColumn":61},{"ruleId":"116","severity":1,"message":"127","line":38,"column":10,"nodeType":"118","messageId":"119","endLine":38,"endColumn":30},{"ruleId":"116","severity":1,"message":"128","line":38,"column":32,"nodeType":"118","messageId":"119","endLine":38,"endColumn":55},{"ruleId":"129","severity":1,"message":"130","line":41,"column":13,"nodeType":"131","endLine":53,"endColumn":4},{"ruleId":"116","severity":1,"message":"132","line":174,"column":11,"nodeType":"118","messageId":"119","endLine":174,"endColumn":14},{"ruleId":"116","severity":1,"message":"133","line":304,"column":7,"nodeType":"118","messageId":"119","endLine":304,"endColumn":15},{"ruleId":"116","severity":1,"message":"134","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":16},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"116","severity":1,"message":"139","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":14},{"ruleId":"116","severity":1,"message":"140","line":8,"column":8,"nodeType":"118","messageId":"119","endLine":8,"endColumn":17},{"ruleId":"116","severity":1,"message":"141","line":10,"column":8,"nodeType":"118","messageId":"119","endLine":10,"endColumn":13},{"ruleId":"116","severity":1,"message":"142","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":18},{"ruleId":"116","severity":1,"message":"143","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":19},{"ruleId":"116","severity":1,"message":"144","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":15},{"ruleId":"116","severity":1,"message":"145","line":9,"column":8,"nodeType":"118","messageId":"119","endLine":9,"endColumn":11},{"ruleId":"116","severity":1,"message":"146","line":81,"column":15,"nodeType":"118","messageId":"119","endLine":81,"endColumn":25},{"ruleId":"116","severity":1,"message":"147","line":48,"column":11,"nodeType":"118","messageId":"119","endLine":48,"endColumn":27},{"ruleId":"116","severity":1,"message":"139","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":14},"no-unused-vars","'mandatoryCourses' is assigned a value but never used.","Identifier","unusedVar","'setMandatoryCourses' is assigned a value but never used.","'electiveCourses' is assigned a value but never used.","'setElectiveCourses' is assigned a value but never used.","'userHaveSchedulerData' is assigned a value but never used.","'setUserHaveSchedulerData' is assigned a value but never used.","'publishedSchedulersData' is assigned a value but never used.","'setPublishedSchedulersData' is assigned a value but never used.","'sharedSchedulersData' is assigned a value but never used.","'setSharedSchedulersData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'uid' is assigned a value but never used.","'appStyle' is assigned a value but never used.","'styled' is defined but never used.","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"'Button' is defined but never used.","'PropTypes' is defined but never used.","'Stack' is defined but never used.","'useState' is defined but never used.","'ProgressBar' is defined but never used.","'Spinner' is defined but never used.","'Fab' is defined but never used.","'htmlString' is assigned a value but never used.","'handleFileSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]