[{"D:\\CLSFY\\src\\index.js":"1","D:\\CLSFY\\src\\App.js":"2","D:\\CLSFY\\src\\components\\AppBar.js":"3","D:\\CLSFY\\src\\components\\Login.js":"4","D:\\CLSFY\\src\\components\\Logout.js":"5","D:\\CLSFY\\src\\components\\firebase-config.js":"6","D:\\CLSFY\\src\\components\\AppStepper.js":"7","D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js":"8","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js":"9","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js":"10","D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js":"11","D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js":"12","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js":"13","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js":"14","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js":"15","D:\\CLSFY\\src\\components\\About.js":"16","D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js":"17","D:\\CLSFY\\src\\components\\show_example\\AppTable.js":"18","D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js":"19","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js":"20","D:\\CLSFY\\src\\components\\ModelsCards.js":"21","D:\\CLSFY\\src\\components\\ModelCard.js":"22","D:\\CLSFY\\src\\components\\DeleteConfirmationModal.js":"23"},{"size":316,"mtime":1639863200005,"results":"24","hashOfConfig":"25"},{"size":10880,"mtime":1640433138819,"results":"26","hashOfConfig":"25"},{"size":6759,"mtime":1640356192912,"results":"27","hashOfConfig":"25"},{"size":1595,"mtime":1640468821828,"results":"28","hashOfConfig":"25"},{"size":1570,"mtime":1640356120616,"results":"29","hashOfConfig":"25"},{"size":526,"mtime":1638562198788,"results":"30","hashOfConfig":"25"},{"size":4993,"mtime":1639488829838,"results":"31","hashOfConfig":"25"},{"size":2622,"mtime":1640355026638,"results":"32","hashOfConfig":"25"},{"size":4849,"mtime":1640435348259,"results":"33","hashOfConfig":"25"},{"size":2824,"mtime":1638831565367,"results":"34","hashOfConfig":"25"},{"size":597,"mtime":1639780625380,"results":"35","hashOfConfig":"25"},{"size":365,"mtime":1638715875992,"results":"36","hashOfConfig":"25"},{"size":1552,"mtime":1639488656735,"results":"37","hashOfConfig":"25"},{"size":4379,"mtime":1640385064070,"results":"38","hashOfConfig":"25"},{"size":2384,"mtime":1640342346327,"results":"39","hashOfConfig":"25"},{"size":727,"mtime":1640026279544,"results":"40","hashOfConfig":"25"},{"size":976,"mtime":1640468962670,"results":"41","hashOfConfig":"25"},{"size":939,"mtime":1638871896519,"results":"42","hashOfConfig":"25"},{"size":1071,"mtime":1640354949073,"results":"43","hashOfConfig":"25"},{"size":719,"mtime":1640468962670,"results":"44","hashOfConfig":"25"},{"size":1777,"mtime":1640425314948,"results":"45","hashOfConfig":"25"},{"size":1500,"mtime":1640425113834,"results":"46","hashOfConfig":"25"},{"size":1046,"mtime":1640468962670,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"8vrk3u",{"filePath":"51","messages":"52","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CLSFY\\src\\index.js",[],["103","104"],"D:\\CLSFY\\src\\App.js",["105","106","107","108","109","110","111","112","113","114","115","116","117"],"import React from 'react';\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react'\nimport axios from 'axios';\nimport AppBar from'./components/AppBar'\nimport About from'./components/About'\nimport AppStepper from'./components/AppStepper'\n\nimport HandleFile from'./components/file_handling/HandleFile'\nimport ModelsCards from'./components/ModelsCards'\nimport ScoresAndStats from'./components/scores_and_stats/ScoresAndStats'\nimport HandleDataToPredict from'./components/handle_data_to_predict/HandleDataToPredict'\n\nimport Container from '@mui/material/Container';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst TextString = \"Text\"\nconst FeaturesString = \"Features\"\n\nconst firstColor = \"#ffcc80\"\nconst secondColor = \"#80cbc4\"\n\nconst anonymousString = \"Anonymous\"\nconst signedString = \"Signed\"\n\nconst scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\nfunction App()\n{\n  const [themeColor, setThemeColor] = useState(firstColor)  \n  const [classifyingType, setClassifyingType] = useState(TextString)\n  const [accuracy, setAccuracy] = useState(0)\n  const [user, setUser] = useState(null)\n  const [userType, setUserType] = useState(anonymousString)\n  const [uid, setUid] = useState(uuidv4()) //generate unique id for anonymous user\n  const [features, setFeatures] = useState({})\n  const [modelId, setModelId] = useState(null)\n  const [modelsData, setModelsData] = useState(null)\n\n  const [mandatoryCourses, setMandatoryCourses] = useState(null)\n  const [electiveCourses, setElectiveCourses] = useState(null)\n  const [userHaveSchedulerData, setUserHaveSchedulerData] = useState(false)\n  const [publishedSchedulersData, setPublishedSchedulersData] = useState([])\n  const [sharedSchedulersData, setSharedSchedulersData] = useState([])\n\n\n  useEffect(async () => {\n    /*\n    const schedulersDataRes = await fetch('/schedulersData')\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"Home Page schedulers: \", Object.values(schedulersData))\n    setPublishedSchedulersData(Object.values(schedulersData))\n\n    const usersRes = await fetch('/getUsersInfo')\n    const usersData = await usersRes.json()\n    console.log(Object.values(usersData))\n    setUsers(Object.values(usersData))\n    */\n  }, []);\n/*\n  const checkUserCoursesExists = async (uid) => {\n    var url = '/checkUserCourses/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database courses exists\n    {\n      console.log('User have courses.')\n      return true\n    }\n    if(res.status === 400)\n    {\n      return false\n    }\n  }\n\n  const checkUserSchedulerDataExists = async (uid) => {\n    var url = '/checkUserScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('User have scheduler data.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  const checkSharedSchedulersDataExists = async (uid) => {\n    var url = '/checkSharedScheduleData/' + uid\n    const res = await fetch(url)\n    if(res.status === 200) //user database exists\n    {\n      console.log('Shared scheduler data to user.')\n      return true\n    }\n    else\n    {\n      return false\n    }\n  }\n\n  //fetch from user database courses\n  const fetchUserMandadtoryCourses = async (uid) => {\n    var url = '/mandatoryCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user mandatory courses: \", data.mandatoryCourses)\n    setMandatoryCourses(data.mandatoryCourses)\n  }\n  const fetchUserElectiveCourses = async (uid) => {\n    var url = '/electiveCourses/' + uid \n    const res = await fetch(url)\n    const data = await res.json()\n    console.log(\"user elective courses: \", data.electiveCourses)\n    setElectiveCourses(data.electiveCourses)\n  }\n  const fetchSharedSchedulers = async (uid) => {\n    var url = '/sharedSchedulersData/' + uid \n    const schedulersDataRes = await fetch(url)\n    const schedulersData = await schedulersDataRes.json()\n    console.log(\"shared schedulers2: \", Object.values(schedulersData))\n    setSharedSchedulersData(Object.values(schedulersData))\n  }\n\n  //fetch from newsletter database courses\n  const fetchMCourses = async () => {\n    const url = '/mandatoryCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    // init: adding needed fields to each object\n    const result = data.mandatoryCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Mandatory'\n    }));\n    console.log(\"Mandatory Courses: \", result)\n    setMandatoryCourses(result)\n    return result\n  }\n\n  const fetchECourses = async () => {\n    var url = '/electiveCourses'\n    const res = await fetch(url)\n    const data = await res.json()\n    //adding needed fields to each object\n    const result = data.electiveCourses.map((v, index) => ({...v,\n        done: false,\n        id: index,\n\t\t    courseType: 'Elective'\n    }));\n    console.log(\"Elective Courses: \", result)\n    setElectiveCourses(result)\n  }\n\n  const updateUserDatabase = async () => {\n    const url = '/updateUserDatabase/' + user.uid\n    axios({\n      method: 'post',\n      url: url,\n      data: {\n        mandatoryCourses: {mandatoryCourses},\n        electiveCourses: {electiveCourses}\n      }\n    });\n  }\n  /*\n  const handleFileSubmit = async (formYear, formSemester) => {\n    //e.preventDefault()\n    year = formYear\n    semester = formSemester\n    var mandatoryCourses_ = await fetchMCourses()\n    await fetchECourses()\n    defaultCheckDoneCourses(mandatoryCourses_)\n    setShowKey('select')\n  }\n  */\n\n  const deleteModelFromDatabase = async (uid, modelIdToDelete) => {\n    const url = 'model/' + uid\n    try {\n        const res = await axios({\n            method: 'delete',\n            url: url,\n            data:{\n              modelIdToDelete\n            }\n        });\n        console.log(res.data)\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const fetchModelsData = async (uid) => {\n    const url = 'models-data/' + uid\n    try {\n        const res = await axios({\n            method: 'get',\n            url: url\n        });\n        console.log(res.data)\n        setModelsData(res.data['models_data'])\n      } \n      catch (err) \n      {\n        console.log(err.response.status)\n      }\n}\n\n  const onLogin = async (userFromLogin) => {\n    setUser(userFromLogin)\n    setUserType(signedString)\n    setUid(userFromLogin.uid)\n    fetchModelsData(userFromLogin.uid)\n\n    \n\n    /*\n    const userHaveCourses = await checkUserCoursesExists(uid)\n    const userHaveSchedulerData_ = await checkUserSchedulerDataExists(uid)\n    const userHaveSharedSchedulersData_ = await checkSharedSchedulersDataExists(uid)\n    if(userHaveSharedSchedulersData_)\n      await fetchSharedSchedulers(uid)\n    if(userHaveSchedulerData_ && userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    else if(userHaveCourses)\n    {\n      await fetchUserMandadtoryCourses(uid)\n      await fetchUserElectiveCourses(uid)\n    }\n    */\n  }\n\n  const onLogout = () => {\n    console.log(\"LOGOUT\")\n    setUser(null)\n  }\n\n  const onPredictFormSubmit = async (predictedClass) => {\n    console.log(predictedClass)\n    //predictFeatures(dataToPredict)\n    //send to \n  }\n\n  const onPredictFileSubmit = (predictedClass) => {\n    console.log(predictedClass)\n  }\n\n  //TODO: extract scores and stats data\n  const onFileSubmit = async (data) => {\n    setModelId(data['file_id'])\n    setFeatures(data['features'])\n    setAccuracy(data['report']['accuracy'])\n\n    //set confusion matrix and f1 scores\n    /*\n    for (let key in data)\n    {\n      console.log(typeof data[key])\n      if(typeof data[key] === Object)\n        for (let innerKey in data[key])\n          console.log(data[key][innerKey])\n      else\n        console.log(key + \": \" + data[key])\n    }\n    */\n  }\n\n  const handleSwitch = (SwitchTextString) => {\n    setClassifyingType(SwitchTextString)\n    if(themeColor === firstColor)\n      setThemeColor(secondColor)\n    else\n      setThemeColor(firstColor)\n    console.log(SwitchTextString)\n  }\n\n  const deleteModelFromModelsData = (modelIdToDelete) => {\n    const newModelsData = modelsData.filter(modelData => modelData['id'] !== modelIdToDelete)\n    console.log(newModelsData)\n    setModelsData(newModelsData)\n  }\n\n  const onModelSelection = (modelId, features) => {\n    setFeatures(features)\n    setModelId(modelId)\n    //TODO: goto step3 in stepper!\n\n    executeScroll()\n  }\n\n  const handleModelDelete = (modelIdToDelete) => {\n    deleteModelFromModelsData(modelIdToDelete)\n    deleteModelFromDatabase(uid, modelIdToDelete)\n  }\n\n  const startRef = useRef(null)\n  const executeScroll = () => scrollToRef(startRef)\n\n  const testButtonClick = async () => {\n    const url = 'models-data/1'\n\n    const res = await axios({\n      method: 'get',\n      url: url\n    });\n    console.log(res.data)\n  }\n\n  return ( \n    <div style={{fontFamily: 'Calibri'}}>\n      <Container sx={{width: \"90%\"}}>\n        <AppBar\n          user={user} \n          handleLogin={onLogin} \n          handleLogout={onLogout}\n          handleStartClick={executeScroll}\n        />\n        <br/><br/><br/><br/><br/>\n        <About user={user}/>\n        <button onClick={testButtonClick}>Test</button>\n        <br/>\n        {modelsData? \n          <ModelsCards \n            modelsData={modelsData}\n            onModelSelection={onModelSelection}\n            handleModelDelete={handleModelDelete}\n          /> \n        : null}\n          <br/>\n\n      </Container>\n\n        <div className=\"waves\" role=\"presentation\"></div>\n        <div className=\"content-bottom\" ref={startRef} style={{color: themeColor}}>\n\n\n          <AppStepper\n            firstStepComponent={\n              <HandleFile \n                uid={uid}\n                onFileSubmit={onFileSubmit}\n                handleSwitch={handleSwitch}\n                classifyingType={classifyingType}\n                themeColor={themeColor}\n                firstColor={firstColor}\n                secondColor={secondColor}\n                TextString={TextString}\n                FeaturesString={FeaturesString}\n              />}\n            secondStepComponent={\n              <ScoresAndStats \n                accuracy={accuracy}\n              />}\n            thirdStepComponent={\n              <HandleDataToPredict \n                uid={uid}\n                classifyingType={classifyingType}\n                features={features}\n                onPredictFormSubmit={onPredictFormSubmit}\n                onPredictFileSubmit={onPredictFileSubmit}\n                modelId={modelId}\n              />}\n          />\n          <div style={{ height: 300 }} />\n        </div>\n    </div>\n  );\n}\n\nconst appStyle = \n{\n  backgroundColor: '#444',\n  color: 'white',\n\tdirection: 'rtl',\n\tTextStringAlign: 'right',\n}\n\nexport default App;","D:\\CLSFY\\src\\components\\AppBar.js",["118","119"],"import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport Login from './Login'\r\nimport Logout from './Logout'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AccountCircleRoundedIcon from '@mui/icons-material/AccountCircleRounded';\r\n\r\nconst StartText = 'Get Started'\r\nconst LoginText = 'Login'\r\nconst LogoutText = 'Logout'\r\n\r\nconst pages = [StartText, LoginText];\r\nconst settings = [LogoutText];\r\n\r\nconst AppNavBar = ({handleStartClick, handleLogin, handleLogout, user}) => {\r\n    const [showLoginModal, setShowLoginModal] = useState(false);\r\n    const [showLogoutModal, setShowLogoutModal] = useState(false);\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    const [anchorElUser, setAnchorElUser] = useState(null);\r\n\r\n    const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.currentTarget);\r\n    };\r\n    const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n    };\r\n\r\n    const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n    };\r\n\r\n    const onLoginSuccess = () => {\r\n    setShowLoginModal(false)\r\n    }\r\n\r\n    const handleLogoutClick = () => {\r\n        handleCloseNavMenu()\r\n        setShowLogoutModal(true)\r\n    }\r\n\r\n\r\n  const handleItemClick = (event) => {\r\n    let itemClickedTextLowered = event.target.innerText.toLowerCase()\r\n    console.log(itemClickedTextLowered)\r\n    if(itemClickedTextLowered === StartText.toLowerCase())\r\n        handleStartClick();\r\n    else if(itemClickedTextLowered === LoginText.toLowerCase())\r\n        setShowLoginModal(true)\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n      <>\r\n        <AppBar position=\"fixed\" style={{color: \"black\", backgroundColor: \"white\"}}>\r\n            <Container>\r\n                <Toolbar disableGutters>\r\n                <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <IconButton\r\n                    size=\"large\"\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleOpenNavMenu}\r\n                    color=\"inherit\"\r\n                    >\r\n                    <MenuIcon/>\r\n                    </IconButton>\r\n                    <Menu\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElNav}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={Boolean(anchorElNav)}\r\n                    onClose={handleCloseNavMenu}\r\n                    sx={{\r\n                        display: { xs: 'block', md: 'none' },\r\n                    }}\r\n                    >\r\n                    {pages.map((page) => (\r\n                        <MenuItem key={page} onClick={handleItemClick}>\r\n                        <Typography variant=\"button\" display=\"block\" gutterBottom textAlign=\"center\">\r\n                            <strong>{page}</strong>\r\n                        </Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n\r\n                    <Login \r\n                        show={showLoginModal} \r\n                        onHide={() => setShowLoginModal(false)}\r\n                        onLogin={handleLogin}\r\n                        onLoginSuccess={onLoginSuccess}\r\n                    />\r\n                    <Logout \r\n                        show={showLogoutModal} \r\n                        onHide={() => setShowLogoutModal(false)}\r\n                        onLogoutSuccess={handleLogout}\r\n                    />\r\n\r\n\r\n                    </Menu>\r\n                </Box>\r\n\r\n                <div style={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n                    <Button>\r\n                        <img onClick={() => window.scroll(0, 0)} src=\"img/CLSFYlogo.png\" alt=\"logo\" height=\"90rem\" width=\"160rem\"/>\r\n                    </Button>\r\n                </div>\r\n\r\n\r\n                <Box sx={{ paddingLeft: \"10rem\", flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                    {pages.map((page) => (\r\n                    <Button\r\n                        key={page}\r\n                        onClick={handleItemClick}\r\n                        sx={{ fontSize: \"0.8rem\", paddingLeft: \"2rem\", paddingRight: \"2rem\", my: 4, color: 'black', display: 'block' }}\r\n                    >\r\n                        <strong>{page}</strong>\r\n                    </Button>\r\n                    ))}\r\n                </Box>\r\n\r\n                <Box sx={{ flexGrow: 0 }}>\r\n                    <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n\r\n                    {user && user.photoURL?\r\n                        <Avatar alt=\"User\" src={user.photoURL} />\r\n                    :\r\n                        <AccountCircleRoundedIcon size=\"large\"/>\r\n                    }\r\n                    </IconButton>\r\n                    <Menu\r\n                    sx={{ mt: '45px' }}\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorElUser}\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    open={Boolean(anchorElUser)}\r\n                    onClose={handleCloseUserMenu}\r\n                    >\r\n                    {settings.map((setting) => (\r\n                        <MenuItem key={setting} onClick={handleLogoutClick}>\r\n                            <Typography textAlign=\"center\">{setting}</Typography>\r\n                        </MenuItem>\r\n                    ))}\r\n                    </Menu>\r\n                </Box>\r\n\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    </>\r\n  );\r\n};\r\nexport default AppNavBar;\r\n","D:\\CLSFY\\src\\components\\Login.js",["120"],"D:\\CLSFY\\src\\components\\Logout.js",["121"],"import firebase from './firebase-config'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useState } from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\n  \r\nconst Logout = ({show, onHide, onLogoutSuccess}) => {\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    const handleSuccess = () => {\r\n        onLogoutSuccess(true)\r\n        setSuccess(true)\r\n    }\r\n    const handleFailure = () => {\r\n        onLogoutSuccess(false)\r\n        setSuccess(false)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        firebase.auth().signOut()\r\n            .then(function() {\r\n                handleSuccess()\r\n            })\r\n            .catch(function(error) {\r\n                handleFailure()\r\n            });\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            <Modal \r\n                size='sm'\r\n                show={show} \r\n                onHide={onHide}\r\n                style={modalStyle}\r\n                onEnter={handleLogout}\r\n                centered\r\n                >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Body style={{textAlign: 'center'}}> \r\n                    {success? \r\n                    <>Logged Out Successfully </>\r\n                    : \r\n                    <> <i class=\"bi bi-exclamation-circle\">Error Occured</i></> }\r\n                    </Modal.Body>\r\n                </Modal.Header>\r\n                <Modal.Footer/>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logout\r\n\r\nconst modalStyle = {\r\n    padding: \"80px\",\r\n    fontFamily: 'Calibri light',\r\n    fontSize:'18px'\r\n  };\r\n","D:\\CLSFY\\src\\components\\firebase-config.js",[],"D:\\CLSFY\\src\\components\\AppStepper.js",["122","123"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Stack from '@mui/material/Stack';\r\nimport Check from '@mui/icons-material/Check';\r\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\r\n\r\nconst steps = ['Upload Excel File', 'Scores & Statistics', 'Predict New Data'];\r\n\r\nconst AppStepper = ({firstStepComponent, secondStepComponent, thirdStepComponent}) => {\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Stepper activeStep={activeStep} alternativeLabel connector={<QontoConnector />}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false;\r\n          }\r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps} StepIconComponent={QontoStepIcon}>\r\n                <Typography sx={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\"}} variant=\"caption\">{label}</Typography>\r\n              </StepLabel>\r\n            </Step>\r\n          );\r\n        })}\r\n      </Stepper>\r\n        <>\r\n\r\n            <br/>\r\n            <hr/>\r\n            {activeStep === 0? firstStepComponent : null}\r\n            {activeStep === 1? secondStepComponent : null}\r\n            {activeStep === 2? thirdStepComponent : null}\r\n            <hr/>\r\n\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'row'}}>\r\n            <Button\r\n              color=\"inherit\"\r\n              variant=\"contained\"\r\n              disabled={activeStep === 0}\r\n              onClick={handleBack}\r\n              sx={{ mr: 1 }}> \r\n              <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Back</Typography>\r\n            </Button>\r\n\r\n            <Box sx={{ flex: '1 1 auto' }} />\r\n\r\n            {activeStep === steps.length - 1 ? \r\n              <Button \r\n                onClick={handleReset} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Reset</Typography>\r\n              </Button>\r\n            : \r\n              <Button \r\n                onClick={handleNext} \r\n                variant=\"contained\" \r\n                color=\"inherit\">\r\n                <Typography sx={{color: \"#424242\", fontSize: '0.8rem'}}>Next</Typography>\r\n              </Button>\r\n            }\r\n          </Box>\r\n          <hr/>\r\n        </>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\r\n  [`&.${stepConnectorClasses.alternativeLabel}`]: {\r\n    top: 10,\r\n    left: 'calc(-50% + 16px)',\r\n    right: 'calc(50% + 16px)',\r\n  },\r\n  [`&.${stepConnectorClasses.active}`]: {\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n      borderColor: '#212121',\r\n    },\r\n  },\r\n  [`&.${stepConnectorClasses.completed}`]: {\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n      borderColor: '#212121',\r\n    },\r\n  },\r\n  [`& .${stepConnectorClasses.line}`]: {\r\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\r\n    borderTopWidth: 3,\r\n    borderRadius: 1,\r\n  },\r\n}));\r\n\r\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\r\n  color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\r\n  display: 'flex',\r\n  height: 22,\r\n  alignItems: 'center',\r\n  ...(ownerState.active && {\r\n    color: '#212121',\r\n  }),\r\n  '& .QontoStepIcon-completedIcon': {\r\n    color: '#212121',\r\n    zIndex: 1,\r\n    fontSize: 28,\r\n  },\r\n  '& .QontoStepIcon-circle': {\r\n    width: 12,\r\n    height: 12,\r\n    borderRadius: '50%',\r\n    backgroundColor: 'currentColor',\r\n  },\r\n}));\r\n\r\nfunction QontoStepIcon(props) {\r\n  const { active, completed, className } = props;\r\n\r\n  return (\r\n    <QontoStepIconRoot ownerState={{ active }} className={className}>\r\n      {completed ? (\r\n        <Check className=\"QontoStepIcon-completedIcon\" />\r\n      ) : (\r\n        <div className=\"QontoStepIcon-circle\" />\r\n      )}\r\n    </QontoStepIconRoot>\r\n  );\r\n}\r\n\r\n\r\nexport default AppStepper;","D:\\CLSFY\\src\\components\\file_handling\\HandleFile.js",["124"],"import React from 'react'\r\nimport { useState } from 'react'\r\nimport AppSwitch from'./AppSwitch'\r\nimport UploadFile from './UploadFile'\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport Container from '@mui/material/Container';\r\n\r\nconst HandleFile = ({uid, onFileSubmit, handleSwitch, TextString, FeaturesString, classifyingType, firstColor, secondColor, themeColor}) => {\r\n    return (\r\n        <Container maxWidth='md' sx={{width: \"90%\"}}>\r\n            <p style={{fontFamily: \"Calibri light\", fontSize: \"1.5rem\", color: \"#bdbdbd\", paddingLeft: \"0.5rem\", textDecoration: \"underline\"}}>\r\n                Choose Classifyier Type\r\n            </p>\r\n            <AppSwitch \r\n                leftSwitchText={TextString}\r\n                rightSwitchText={FeaturesString}\r\n                onSwitch={handleSwitch}\r\n                firstColor={firstColor}\r\n                secondColor={secondColor}\r\n            />\r\n            \r\n            <div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n                <hr/>\r\n                Upload Excel file is in the following format:\r\n                <br/>\r\n                {classifyingType === FeaturesString?\r\n                <>\r\n                    Features (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\", \"Class\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\", \"0\"]]}\r\n                    />\r\n                </>\r\n                :\r\n                <>\r\n                    Text (Numbers) | Class (Numbers or Strings)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\", \"Class\"]} \r\n                        tableItems={[[\"text1\", \"class1\"]]}\r\n                    />\r\n                </>\r\n                }   \r\n                <hr/>\r\n                <UploadFile \r\n                    url={classifyingType === \"Text\" ? '/classify-text/' + uid : 'classify-features/' + uid}\r\n                    onSubmit={onFileSubmit}\r\n                    successMessage={\"Model trained successfully\"}\r\n                    awaitMessage={\"File uploaded, Training model...\"}\r\n                />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HandleFile\r\n","D:\\CLSFY\\src\\components\\file_handling\\UploadFile.js",["125","126","127","128"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n//import Button from 'react-bootstrap/Button'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Fab from '@mui/material/Fab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport UploadRoundedIcon from '@mui/icons-material/UploadRounded';\r\nimport Button from '@mui/material/Button';\r\nimport FindInPageRoundedIcon from '@mui/icons-material/FindInPageRounded';\r\n\r\nconst inputText = 'Supports: xls, xlsx, xlsm, xlsb, odf, ods, odt'\r\n\r\nconst UploadFile = ({url, onSubmit, successMessage, awaitMessage}) => {\r\n  const [file, setFile] = useState('');\r\n  const [filename, setFilename] = useState(inputText);\r\n  const [message, setMessage] = useState('');\r\n  const [messageVariant, setMessageVariant] = useState('');\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const [showSpinner, setShowSpinner] = useState(false)\r\n\r\n\r\n  const uploadStyle = {\r\n    fontFamily: 'Calibri',\r\n    fontSize:'1rem'\r\n  };\r\n\r\n\r\n  const onChange = e => {\r\n    const file = e.target.files[0]\r\n    const fileName = e.target.files[0].name\r\n    setFile(file);\r\n    setFilename(fileName);\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    //const userType = \"Anonymous\"\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    //formData.append('userType', userType)\r\n    formData.append('file', file);\r\n\r\n    setShowSpinner(true)\r\n\r\n    try {\r\n      const res = await axios.post(url, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: progressEvent => {\r\n          setUploadPercentage(Math.round((progressEvent.loaded * 100) / progressEvent.total));\r\n        }\r\n      });\r\n      setTimeout(() => setUploadPercentage(0),3000);\r\n      setTimeout(() => setMessage(''), 3000);\r\n\r\n\r\n      setMessage(successMessage)\r\n      setMessageVariant('success')\r\n      console.log(res.data)\r\n      setShowSpinner(false)\r\n      onSubmit(res.data) //to outside scope\r\n    } \r\n    catch (err) \r\n    {\r\n      if (err.response.status === 500)\r\n      {\r\n        setMessage(err.response.statusText)\r\n        setMessageVariant('danger')\r\n      }\r\n      else if (err.response.status === 400)\r\n      {\r\n        setMessage(err.response.statusText + \" Only Excel file allowed.\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else if (err.response.status === 409)\r\n      {\r\n        console.log(err.response.data)\r\n        const htmlString = err.response.data\r\n        setMessage(err.response.statusText + \" Model of file name already exists\")\r\n        setMessageVariant('warning')\r\n      }\r\n      else \r\n      {\r\n        setMessage(err.response.statusText);\r\n        setMessageVariant('info')\r\n      }\r\n      setUploadPercentage(0)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n        <div className='mx-auto' style={uploadStyle}>\r\n            {message ? \r\n            <Alert variant={messageVariant}>\r\n              {message} {showSpinner?<CircularProgress size=\"10\" color=\"warning\"/>:null}\r\n            </Alert>\r\n             : null}\r\n            {uploadPercentage === 100 ? <Alert variant='info' >{awaitMessage}</Alert> : null}\r\n\r\n            <form onSubmit={onSubmit} style={{textAlign:'center'}} >\r\n            <div className='custom-file'>\r\n                <input\r\n                type='file'\r\n                color='black'\r\n                className='custom-file-input'\r\n                size=\"lg\"\r\n                id='customFile'\r\n                onChange={onChange}\r\n                />\r\n                <label style={{borderRadius: '1.5rem', borderColor: \"inherit\", color: \"inherit\", backgroundColor: \"inherit\"}} className='custom-file-label' htmlFor='customFile'>\r\n                  {filename} <FindInPageRoundedIcon/>\r\n                </label>\r\n            </div>\r\n\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Box sx={{ width: '100%', mr: 1 }}>\r\n                <LinearProgress color=\"inherit\" variant=\"determinate\" value={uploadPercentage} />\r\n              </Box>\r\n              <Box sx={{ minWidth: 35 , }}>\r\n                <Typography ><strong>{`${uploadPercentage}%`}</strong></Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n              <Button\r\n                onClick={handleSubmit}\r\n                size=\"small\"\r\n                color=\"inherit\"\r\n              >\r\n                <UploadRoundedIcon/>\r\n                <strong>Upload</strong>\r\n                <UploadRoundedIcon/>\r\n              </Button>\r\n            \r\n            </form>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadFile;","D:\\CLSFY\\src\\components\\file_handling\\AppSwitch.js",[],"D:\\CLSFY\\src\\components\\scores_and_stats\\ScoresAndStats.js",[],"D:\\CLSFY\\src\\components\\scores_and_stats\\Rating.js",[],"D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleTextDataToPredict.js",[],"D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleDataToPredict.js",["129"],"import React from 'react'\r\nimport axios from 'axios';\r\nimport HandleTextDataToPredict from './HandleTextDataToPredict'\r\nimport HandleFeaturesDataToPredict from './HandleFeaturesDataToPredict'\r\nimport UploadFile from '../file_handling/UploadFile'\r\nimport Container from '@mui/material/Container';\r\nimport ExampleButton from '../show_example/ExampleButton'\r\nimport ClassModal from './ClassModal'\r\n\r\nconst HandleDataToPredict = ({uid, classifyingType, features, onPredictFormSubmit, onPredictFileSubmit, modelId}) => {\r\n    const [classPrediction, setClassPrediction] = React.useState(null)\r\n    const [showClassPrediction, setShowClassPrediction] = React.useState(false)\r\n\r\n    const predict = async (url, dataToPredict) => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'post',\r\n                url: url,\r\n                data: {\r\n                    modelId,\r\n                    dataToPredict\r\n                }\r\n            });\r\n            console.log(res.data)\r\n            setClassPrediction(res.data[\"class\"])\r\n            setShowClassPrediction(true)\r\n            onPredictFormSubmit(classPrediction)\r\n            console.log(classPrediction)\r\n          } \r\n          catch (err) \r\n          {\r\n            if (err.response.status === 500)\r\n            {\r\n              //setMessage(err.response.statusText)\r\n            }\r\n            else if (err.response.status === 400)\r\n            {\r\n              //setMessage(err.response.statusText, \"Only Excel file allowed.\")\r\n            }\r\n            else \r\n            {\r\n            }\r\n          }\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        console.log(data)\r\n        const url = (classifyingType === \"Text\" ? 'predict-data/' + uid : 'predict-features/' + uid)\r\n        predict(url, data)\r\n    }\r\n\r\n    const handleFileSubmit = async (data) => {\r\n        console.log(\"File Submit\")\r\n        console.log(data) //Class is here\r\n    }\r\n    \r\n\r\n    return (\r\n            //<div style={{color: themeColor, fontSize: '1.3rem'}}>\r\n        <Container maxWidth='md' sx={{width: \"90%\", fontSize: \"1rem\"}}>\r\n            <ClassModal\r\n                show={showClassPrediction} \r\n                onHide={() => setShowClassPrediction(false)} \r\n                text={classPrediction}\r\n            />\r\n            {classifyingType === \"Text\"?\r\n                <>\r\n                    You Can Enter Text To Predict The Class\r\n                    <hr/>\r\n                    <HandleTextDataToPredict onSubmit={handleFormSubmit}/>\r\n\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Text (Numbers)\r\n                    <br/><br/>\r\n\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for text classification\"}\r\n                        tableFeatures={[\"Text\"]} \r\n                        tableItems={[[\"text1\"]]}\r\n                    />\r\n\r\n                </>\r\n                :\r\n                <>\r\n                    You Can Enter Features To Predict The Class\r\n                    <hr/>\r\n                    <HandleFeaturesDataToPredict \r\n                        features={features} \r\n                        onSubmit={handleFormSubmit}\r\n                    />\r\n                    <hr/>\r\n                    Or You Can Upload Excel file in the following format:\r\n                    <br/>\r\n                    Features (Numbers)\r\n                    <br/><br/>\r\n                    <ExampleButton\r\n                        buttonText={\"Show Example\"}\r\n                        tableTitle={\"File upload example for features classification\"}\r\n                        tableFeatures={[\"Feature 1\", \"Feature 2\", \"Feature 3\" , \"...\"]} \r\n                        tableItems={[[\"0\", \"1\", \"0\", \"...\"]]}\r\n                    />\r\n                </>\r\n            }   \r\n\r\n            <hr/>\r\n            <br/>\r\n            <UploadFile \r\n                onSubmit={onPredictFileSubmit} \r\n                url={classifyingType === \"Text\" ? '/predictTextFile/1' : 'predictFeaturesFile/1'}\r\n                successMessage={\"Model trained successfully\"}\r\n                awaitMessage={\"File uploaded, Training model...\"}\r\n            />\r\n        </Container>\r\n    )\r\n}   \r\n\r\nexport default HandleDataToPredict\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\HandleFeaturesDataToPredict.js",[],"D:\\CLSFY\\src\\components\\About.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTableModal.js",[],"D:\\CLSFY\\src\\components\\show_example\\AppTable.js",[],"D:\\CLSFY\\src\\components\\show_example\\ExampleButton.js",["130"],"import React from 'react'\r\nimport AppTableModal from '../show_example/AppTableModal'\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport InfoRoundedIcon from '@mui/icons-material/InfoRounded';\r\n\r\nconst ExampleButton = ({buttonText, tableTitle, tableFeatures, tableItems}) => {\r\n    const [showModalTable, setShowModalTable] = React.useState(false)\r\n    return (\r\n        <>\r\n            <Fab \r\n                style={{color: \"inherit\", backgroundColor: \"inherit\"}}\r\n                onClick={() => setShowModalTable(true)}\r\n                size=\"small\" \r\n                variant=\"extended\" \r\n                color=\"inherit\">\r\n            <InfoRoundedIcon sx={{ mr: 1 }} />\r\n            {buttonText}\r\n            </Fab>\r\n\r\n            <AppTableModal \r\n                show={showModalTable}\r\n                onHide={() => setShowModalTable(false)} \r\n                title={tableTitle}\r\n                features={tableFeatures} \r\n                items={tableItems}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExampleButton\r\n","D:\\CLSFY\\src\\components\\handle_data_to_predict\\ClassModal.js",[],"D:\\CLSFY\\src\\components\\ModelsCards.js",[],"D:\\CLSFY\\src\\components\\ModelCard.js",[],"D:\\CLSFY\\src\\components\\DeleteConfirmationModal.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":35,"column":10,"nodeType":"137","messageId":"138","endLine":35,"endColumn":18},{"ruleId":"135","severity":1,"message":"139","line":41,"column":10,"nodeType":"137","messageId":"138","endLine":41,"endColumn":26},{"ruleId":"135","severity":1,"message":"140","line":41,"column":28,"nodeType":"137","messageId":"138","endLine":41,"endColumn":47},{"ruleId":"135","severity":1,"message":"141","line":42,"column":10,"nodeType":"137","messageId":"138","endLine":42,"endColumn":25},{"ruleId":"135","severity":1,"message":"142","line":42,"column":27,"nodeType":"137","messageId":"138","endLine":42,"endColumn":45},{"ruleId":"135","severity":1,"message":"143","line":43,"column":10,"nodeType":"137","messageId":"138","endLine":43,"endColumn":31},{"ruleId":"135","severity":1,"message":"144","line":43,"column":33,"nodeType":"137","messageId":"138","endLine":43,"endColumn":57},{"ruleId":"135","severity":1,"message":"145","line":44,"column":10,"nodeType":"137","messageId":"138","endLine":44,"endColumn":33},{"ruleId":"135","severity":1,"message":"146","line":44,"column":35,"nodeType":"137","messageId":"138","endLine":44,"endColumn":61},{"ruleId":"135","severity":1,"message":"147","line":45,"column":10,"nodeType":"137","messageId":"138","endLine":45,"endColumn":30},{"ruleId":"135","severity":1,"message":"148","line":45,"column":32,"nodeType":"137","messageId":"138","endLine":45,"endColumn":55},{"ruleId":"149","severity":1,"message":"150","line":48,"column":13,"nodeType":"151","endLine":60,"endColumn":4},{"ruleId":"135","severity":1,"message":"152","line":378,"column":7,"nodeType":"137","messageId":"138","endLine":378,"endColumn":15},{"ruleId":"135","severity":1,"message":"153","line":6,"column":10,"nodeType":"137","messageId":"138","endLine":6,"endColumn":16},{"ruleId":"135","severity":1,"message":"154","line":16,"column":8,"nodeType":"137","messageId":"138","endLine":16,"endColumn":15},{"ruleId":"135","severity":1,"message":"155","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"155","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":14},{"ruleId":"135","severity":1,"message":"156","line":8,"column":8,"nodeType":"137","messageId":"138","endLine":8,"endColumn":17},{"ruleId":"135","severity":1,"message":"157","line":10,"column":8,"nodeType":"137","messageId":"138","endLine":10,"endColumn":13},{"ruleId":"135","severity":1,"message":"158","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":18},{"ruleId":"135","severity":1,"message":"159","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":19},{"ruleId":"135","severity":1,"message":"160","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":15},{"ruleId":"135","severity":1,"message":"161","line":9,"column":8,"nodeType":"137","messageId":"138","endLine":9,"endColumn":11},{"ruleId":"135","severity":1,"message":"162","line":83,"column":15,"nodeType":"137","messageId":"138","endLine":83,"endColumn":25},{"ruleId":"135","severity":1,"message":"163","line":52,"column":11,"nodeType":"137","messageId":"138","endLine":52,"endColumn":27},{"ruleId":"135","severity":1,"message":"155","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":14},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'userType' is assigned a value but never used.","Identifier","unusedVar","'mandatoryCourses' is assigned a value but never used.","'setMandatoryCourses' is assigned a value but never used.","'electiveCourses' is assigned a value but never used.","'setElectiveCourses' is assigned a value but never used.","'userHaveSchedulerData' is assigned a value but never used.","'setUserHaveSchedulerData' is assigned a value but never used.","'publishedSchedulersData' is assigned a value but never used.","'setPublishedSchedulersData' is assigned a value but never used.","'sharedSchedulersData' is assigned a value but never used.","'setSharedSchedulersData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'appStyle' is assigned a value but never used.","'styled' is defined but never used.","'Tooltip' is defined but never used.","'Button' is defined but never used.","'PropTypes' is defined but never used.","'Stack' is defined but never used.","'useState' is defined but never used.","'ProgressBar' is defined but never used.","'Spinner' is defined but never used.","'Fab' is defined but never used.","'htmlString' is assigned a value but never used.","'handleFileSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]